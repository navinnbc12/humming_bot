/* Generated by Cython 0.29.15 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\LimitOrder.h",
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\OrderExpirationEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h",
            "hummingbot\\core\\cpp\\Utils.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.connector.exchange.paper_trade.paper_trade_exchange",
        "sources": [
            "hummingbot\\connector\\exchange\\paper_trade\\paper_trade_exchange.pyx",
            "hummingbot/core/cpp/Utils.cpp",
            "hummingbot/core/cpp/LimitOrder.cpp",
            "hummingbot/core/cpp/OrderExpirationEntry.cpp"
        ]
    },
    "module_name": "hummingbot.connector.exchange.paper_trade.paper_trade_exchange"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_15"
#define CYTHON_HEX_VERSION 0x001D0FF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__connector__exchange__paper_trade__paper_trade_exchange
#define __PYX_HAVE_API__hummingbot__connector__exchange__paper_trade__paper_trade_exchange
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <set>
#include <string.h>
#include <string>
#include <unordered_map>
#include "../cpp/LimitOrder.h"
#include "../cpp/OrderExpirationEntry.h"
#include <stdint.h>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "pythread.h"
#include <iterator>
#include "cpp/Utils.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "hummingbot\\connector\\exchange\\paper_trade\\paper_trade_exchange.pyx",
  "stringsource",
  "__init__.pxd",
  "hummingbot\\core\\pubsub.pxd",
  "hummingbot\\core\\event\\event_reporter.pxd",
  "hummingbot\\core\\event\\event_logger.pxd",
  "hummingbot\\core\\data_type\\order_book_query_result.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "hummingbot\\core\\data_type\\order_book.pxd",
  "hummingbot\\core\\clock.pxd",
  "hummingbot\\core\\time_iterator.pxd",
  "hummingbot\\core\\network_iterator.pxd",
  "hummingbot\\connector\\connector_base.pxd",
  "hummingbot\\core\\data_type\\composite_order_book.pxd",
  "hummingbot\\core\\data_type\\limit_order.pxd",
};

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook;
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all;
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":17
 *     AssetType
 * )
 * ctypedef cpp_set[CPPLimitOrder] SingleTradingPairLimitOrders             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders].iterator LimitOrdersIterator
 * ctypedef pair[string, SingleTradingPairLimitOrders] LimitOrdersPair
 */
typedef std::set<LimitOrder>  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":18
 * )
 * ctypedef cpp_set[CPPLimitOrder] SingleTradingPairLimitOrders
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders].iterator LimitOrdersIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[string, SingleTradingPairLimitOrders] LimitOrdersPair
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders] LimitOrders
 */
typedef std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":19
 * ctypedef cpp_set[CPPLimitOrder] SingleTradingPairLimitOrders
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders].iterator LimitOrdersIterator
 * ctypedef pair[string, SingleTradingPairLimitOrders] LimitOrdersPair             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders] LimitOrders
 * ctypedef cpp_set[CPPLimitOrder].iterator SingleTradingPairLimitOrdersIterator
 */
typedef std::pair<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders>  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersPair;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":20
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders].iterator LimitOrdersIterator
 * ctypedef pair[string, SingleTradingPairLimitOrders] LimitOrdersPair
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders] LimitOrders             # <<<<<<<<<<<<<<
 * ctypedef cpp_set[CPPLimitOrder].iterator SingleTradingPairLimitOrdersIterator
 * ctypedef cpp_set[CPPLimitOrder].reverse_iterator SingleTradingPairLimitOrdersRIterator
 */
typedef std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders>  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":21
 * ctypedef pair[string, SingleTradingPairLimitOrders] LimitOrdersPair
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders] LimitOrders
 * ctypedef cpp_set[CPPLimitOrder].iterator SingleTradingPairLimitOrdersIterator             # <<<<<<<<<<<<<<
 * ctypedef cpp_set[CPPLimitOrder].reverse_iterator SingleTradingPairLimitOrdersRIterator
 * ctypedef cpp_set[CPPOrderExpirationEntry] LimitOrderExpirationSet
 */
typedef std::set<LimitOrder> ::iterator __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":22
 * ctypedef unordered_map[string, SingleTradingPairLimitOrders] LimitOrders
 * ctypedef cpp_set[CPPLimitOrder].iterator SingleTradingPairLimitOrdersIterator
 * ctypedef cpp_set[CPPLimitOrder].reverse_iterator SingleTradingPairLimitOrdersRIterator             # <<<<<<<<<<<<<<
 * ctypedef cpp_set[CPPOrderExpirationEntry] LimitOrderExpirationSet
 * ctypedef cpp_set[CPPOrderExpirationEntry].iterator LimitOrderExpirationSetIterator
 */
typedef std::set<LimitOrder> ::reverse_iterator __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersRIterator;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":23
 * ctypedef cpp_set[CPPLimitOrder].iterator SingleTradingPairLimitOrdersIterator
 * ctypedef cpp_set[CPPLimitOrder].reverse_iterator SingleTradingPairLimitOrdersRIterator
 * ctypedef cpp_set[CPPOrderExpirationEntry] LimitOrderExpirationSet             # <<<<<<<<<<<<<<
 * ctypedef cpp_set[CPPOrderExpirationEntry].iterator LimitOrderExpirationSetIterator
 * 
 */
typedef std::set<OrderExpirationEntry>  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrderExpirationSet;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":24
 * ctypedef cpp_set[CPPLimitOrder].reverse_iterator SingleTradingPairLimitOrdersRIterator
 * ctypedef cpp_set[CPPOrderExpirationEntry] LimitOrderExpirationSet
 * ctypedef cpp_set[CPPOrderExpirationEntry].iterator LimitOrderExpirationSetIterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::set<OrderExpirationEntry> ::iterator __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrderExpirationSetIterator;

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":75
 *     cdef c_process_crossed_limit_orders(self)
 *     cdef c_match_trade_to_limit_orders(self, object order_book_trade_event)
 *     cdef object c_cancel_order_from_orders_map(self,             # <<<<<<<<<<<<<<
 *                                                LimitOrders *orders_map,
 *                                                str trading_pair_str,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map {
  int __pyx_n;
  int cancel_all;
  PyObject *client_order_id;
};

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":326
 *         self.c_process_crossed_limit_orders()
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair_str,
 *                    object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":381
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair_str,
 *                     object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":953
 *         return (price // price_quantum) * price_quantum
 * 
 *     cdef object c_quantize_order_amount(self,             # <<<<<<<<<<<<<<
 *                                         str trading_pair,
 *                                         object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};

/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/core/data_type/composite_order_book.pxd":4
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * 
 * cdef class CompositeOrderBook(OrderBook):             # <<<<<<<<<<<<<<
 *     cdef:
 *         OrderBook _traded_order_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *_traded_order_book;
};


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PyObject_HEAD
  LimitOrder _cpp_limit_order;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pxd":27
 * 
 * 
 * cdef class PaperTradeExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         LimitOrders _bid_limit_orders
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders _bid_limit_orders;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders _ask_limit_orders;
  int _paper_trade_market_initialized;
  PyObject *_trading_pairs;
  PyObject *_config;
  PyObject *_queued_orders;
  PyObject *_quantization_params;
  PyObject *_order_book_trade_listener;
  PyObject *_market_order_filled_listener;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrderExpirationSet _limit_order_expiration_set;
  PyObject *_target_market;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":69
 * 
 * 
 * cdef class QuantizationParams:             # <<<<<<<<<<<<<<
 *     cdef:
 *         str trading_pair
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams {
  PyObject_HEAD
  PyObject *trading_pair;
  int price_precision;
  int price_decimals;
  int order_size_precision;
  int order_size_decimals;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":94
 * 
 * 
 * cdef class QueuedOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         double create_timestamp
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder {
  PyObject_HEAD
  double create_timestamp;
  PyObject *_order_id;
  int _is_buy;
  PyObject *_trading_pair;
  PyObject *_amount;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":134
 * 
 * 
 * cdef class OrderBookTradeListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ExchangeBase _market
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *_market;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":148
 *             self.logger().error("Error call trade listener.", exc_info=True)
 * 
 * cdef class OrderBookMarketOrderFillListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ExchangeBase _market
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *_market;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":302
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         self._order_book_tracker.start()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":306
 *         self._order_book_tracker.start()
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":309
 *         self._order_book_tracker.stop()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":435
 *         return order_id
 * 
 *     cdef c_execute_buy(self, str order_id, str trading_pair, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy {
  PyObject_HEAD
  PyObject *__pyx_v_buy_entries;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":446
 *         buy_entries = order_book.simulate_buy(amount)
 *         # Calculate the quote currency needed, including fees.
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         if total_quote_needed > quote_balance:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *__pyx_outer_scope;
  PyObject *__pyx_v_row;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":459
 * 
 *         # Calculate the base currency acquired, including fees.
 *         total_base_acquired = Decimal(sum(row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset, quote_balance - total_quote_needed)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *__pyx_outer_scope;
  PyObject *__pyx_v_row;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":487
 *                                    OrderType.MARKET))
 * 
 *     cdef c_execute_sell(self, str order_id, str trading_pair_str, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object quote_asset_amount
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell {
  PyObject_HEAD
  PyObject *__pyx_v_sell_entries;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":517
 * 
 *         # Calculate the quote currency acquired, including fees.
 *         acquired_amount = Decimal(sum(row.price * row.amount for row in sell_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *__pyx_outer_scope;
  PyObject *__pyx_v_row;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":831
 *         return self.available_balances.get(currency.upper(), s_decimal_0)
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":834
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrders *limit_orders_map_ptr
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all {
  PyObject_HEAD
  PyObject *__pyx_v_cancellation_results;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr;
  PyObject *__pyx_v_results;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
  double __pyx_v_timeout_seconds;
  PyObject *__pyx_v_trading_pair_str;
};


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1009
 *         return OrderType.LIMIT
 * 
 *     async def trigger_event_async(self,             # <<<<<<<<<<<<<<
 *                                   event_tag,
 *                                   event):
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async {
  PyObject_HEAD
  PyObject *__pyx_v_event;
  PyObject *__pyx_v_event_tag;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self;
};



/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/core/data_type/composite_order_book.pxd":4
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * 
 * cdef class CompositeOrderBook(OrderBook):             # <<<<<<<<<<<<<<
 *     cdef:
 *         OrderBook _traded_order_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook;


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":164
 * 
 * 
 * cdef class PaperTradeExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     TRADE_EXECUTION_DELAY = 5.0
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange {
  struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *(*c_execute_buy)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_execute_sell)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_process_market_orders)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *);
  PyObject *(*c_set_balance)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *);
  PyObject *(*c_delete_limit_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator const );
  PyObject *(*c_process_limit_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, int, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator);
  PyObject *(*c_process_limit_bid_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator);
  PyObject *(*c_process_limit_ask_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator);
  PyObject *(*c_process_crossed_limit_orders_for_trading_pair)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, int, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *);
  PyObject *(*c_process_crossed_limit_orders)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *);
  PyObject *(*c_match_trade_to_limit_orders)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *);
  PyObject *(*c_cancel_order_from_orders_map)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":134
 * 
 * 
 * cdef class OrderBookTradeListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ExchangeBase _market
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;


/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":148
 *             self.logger().error("Error call trade listener.", exc_info=True)
 * 
 * cdef class OrderBookMarketOrderFillListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ExchangeBase _market
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Coroutine.proto */
#define __Pyx_Coroutine_USED
static PyTypeObject *__pyx_CoroutineType = 0;
static PyTypeObject *__pyx_CoroutineAwaitType = 0;
#define __Pyx_Coroutine_CheckExact(obj) (Py_TYPE(obj) == __pyx_CoroutineType)
#define __Pyx_Coroutine_Check(obj) __Pyx_Coroutine_CheckExact(obj)
#define __Pyx_CoroutineAwait_CheckExact(obj) (Py_TYPE(obj) == __pyx_CoroutineAwaitType)
#define __Pyx_Coroutine_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_CoroutineType, body, code, closure, name, qualname, module_name)
static int __pyx_Coroutine_init(void);
static PyObject *__Pyx__Coroutine_await(PyObject *coroutine);
typedef struct {
    PyObject_HEAD
    PyObject *coroutine;
} __pyx_CoroutineAwaitObject;
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg);
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args);

/* GetAwaitIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o);
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *o);

/* CoroutineYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* ReturnWithStopIteration.proto */
#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* PatchAsyncIO.proto */
static PyObject* __Pyx_patch_asyncio(PyObject* module);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_c_call(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, PyObject *__pyx_v_event_object); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_c_call(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, PyObject *__pyx_v_event_object); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_start(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_set_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency, PyObject *__pyx_v_balance); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_market_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_delete_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator const __pyx_v_orders_it); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_bid_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_ask_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, int __pyx_v_is_buy, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders_for_trading_pair(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, int __pyx_v_is_buy, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_match_trade_to_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_book_trade_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_orders_map, PyObject *__pyx_v_trading_pair_str, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_client_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_asset, CYTHON_UNUSED PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_size); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_price(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount *__pyx_optional_args); /* proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'hummingbot.core.data_type.LimitOrder' */

/* Module declarations from 'hummingbot.core.data_type.OrderExpirationEntry' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'hummingbot.core.PyRef' */

/* Module declarations from 'hummingbot.core.pubsub' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;

/* Module declarations from 'hummingbot.core.event.event_listener' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;

/* Module declarations from 'hummingbot.core.event.event_reporter' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;

/* Module declarations from 'hummingbot.core.event.event_logger' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'hummingbot.core.data_type.OrderBookEntry' */

/* Module declarations from 'hummingbot.core.data_type.order_book_query_result' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'hummingbot.core.data_type.order_book' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;

/* Module declarations from 'hummingbot.core.clock' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;

/* Module declarations from 'hummingbot.core.time_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;

/* Module declarations from 'hummingbot.core.network_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;

/* Module declarations from 'hummingbot.connector.connector_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;

/* Module declarations from 'hummingbot.connector.exchange_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;

/* Module declarations from 'hummingbot.core.Utils' */

/* Module declarations from 'hummingbot.core.data_type.composite_order_book' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook = 0;

/* Module declarations from 'hummingbot.core.data_type.limit_order' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = 0;
static struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*__pyx_f_10hummingbot_4core_9data_type_11limit_order_c_create_limit_order_from_cpp_limit_order)(LimitOrder const ); /*proto*/

/* Module declarations from 'hummingbot.connector.exchange.paper_trade.paper_trade_exchange' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async = 0;
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QueuedOrder__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookTradeListener__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookMarketOrderFillListener__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "hummingbot.connector.exchange.paper_trade.paper_trade_exchange"
extern int __pyx_module_is_main_hummingbot__connector__exchange__paper_trade__paper_trade_exchange;
int __pyx_module_is_main_hummingbot__connector__exchange__paper_trade__paper_trade_exchange = 0;

/* Implementation of 'hummingbot.connector.exchange.paper_trade.paper_trade_exchange' */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_[] = "', ";
static const char __pyx_k_1e[] = "1e-";
static const char __pyx_k_7g[] = "%.7g";
static const char __pyx_k_8g[] = ".8g";
static const char __pyx_k__2[] = ", ";
static const char __pyx_k__3[] = ")";
static const char __pyx_k__4[] = ", '";
static const char __pyx_k__7[] = "://";
static const char __pyx_k__8[] = "/";
static const char __pyx_k__9[] = "";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_02x[] = "02x";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k__10[] = ".";
static const char __pyx_k__15[] = " ";
static const char __pyx_k__17[] = ". ";
static const char __pyx_k__20[] = "'.";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_buy[] = "buy";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_1e_2[] = "1e";
static const char __pyx_k_1e_7[] = "1e-7";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_sell[] = "sell";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_1e_10[] = "1e-10";
static const char __pyx_k_Clock[] = "Clock";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_await[] = "__await__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_event[] = "event";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_log10[] = "log10";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_asyncio[] = "asyncio";
static const char __pyx_k_balance[] = "balance";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_currency[] = "currency";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_AssetType[] = "AssetType";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_available[] = " available.";
static const char __pyx_k_event_tag[] = "event_tag";
static const char __pyx_k_is_finite[] = "is_finite";
static const char __pyx_k_needed_vs[] = " needed vs. ";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_Not_enough[] = "Not enough ";
static const char __pyx_k_PaperTrade[] = "_PaperTrade";
static const char __pyx_k_TradeEvent[] = "TradeEvent";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_cancel_all[] = "cancel_all";
static const char __pyx_k_order_side[] = "order_side";
static const char __pyx_k_order_type[] = "order_type";
static const char __pyx_k_ptm_logger[] = "ptm_logger";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MarketEvent[] = "MarketEvent";
static const char __pyx_k_OrderFilled[] = "OrderFilled";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_QueuedOrder[] = "QueuedOrder(";
static const char __pyx_k_TradingPair[] = "TradingPair";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_data_source[] = "data_source";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_order_books[] = "order_books";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_status_dict[] = "status_dict";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_Insufficient[] = "Insufficient ";
static const char __pyx_k_MarketConfig[] = "MarketConfig";
static const char __pyx_k_OrderFailure[] = "OrderFailure";
static const char __pyx_k_Trading_pair[] = "Trading pair '";
static const char __pyx_k_available_vs[] = " available vs. ";
static const char __pyx_k_estimate_fee[] = "estimate_fee";
static const char __pyx_k_limit_orders[] = "limit_orders";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_simulate_buy[] = "simulate_buy";
static const char __pyx_k_stop_network[] = "stop_network";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_BASE_CURRENCY[] = "BASE_CURRENCY";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_QueuedOrder_2[] = "QueuedOrder";
static const char __pyx_k_asyncio_tasks[] = "asyncio.tasks";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_check_network[] = "check_network";
static const char __pyx_k_exchange_name[] = "exchange_name";
static const char __pyx_k_market_config[] = "market_config";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_simulate_sell[] = "simulate_sell";
static const char __pyx_k_start_network[] = "start_network";
static const char __pyx_k_target_market[] = "target_market";
static const char __pyx_k_OrderBookEvent[] = "OrderBookEvent";
static const char __pyx_k_OrderCancelled[] = "OrderCancelled";
static const char __pyx_k_buy_fees_asset[] = "buy_fees_asset";
static const char __pyx_k_price_decimals[] = "price_decimals";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_BuyOrderCreated[] = "BuyOrderCreated";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_price_precision[] = "price_precision";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_random_order_id[] = "random_order_id";
static const char __pyx_k_sell_fees_asset[] = "sell_fees_asset";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_OrderBookTracker[] = "OrderBookTracker";
static const char __pyx_k_OrderFilledEvent[] = "OrderFilledEvent";
static const char __pyx_k_SellOrderCreated[] = "SellOrderCreated";
static const char __pyx_k_create_timestamp[] = "create_timestamp";
static const char __pyx_k_on_hold_balances[] = "on_hold_balances";
static const char __pyx_k_sell_fees_amount[] = "sell_fees_amount";
static const char __pyx_k_BuyOrderCompleted[] = "BuyOrderCompleted";
static const char __pyx_k_CancellationResult[] = "CancellationResult";
static const char __pyx_k_CompositeOrderBook[] = "CompositeOrderBook";
static const char __pyx_k_PaperTradeExchange[] = "PaperTradeExchange";
static const char __pyx_k_QuantizationParams[] = "QuantizationParams('";
static const char __pyx_k_SellOrderCompleted[] = "SellOrderCompleted";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_available_balances[] = "available_balances";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_order_book_tracker[] = "order_book_tracker";
static const char __pyx_k_safe_ensure_future[] = "safe_ensure_future";
static const char __pyx_k_split_trading_pair[] = "split_trading_pair";
static const char __pyx_k_OrderBookTradeEvent[] = "OrderBookTradeEvent";
static const char __pyx_k_OrderCancelledEvent[] = "OrderCancelledEvent";
static const char __pyx_k_order_size_decimals[] = "order_size_decimals";
static const char __pyx_k_record_filled_order[] = "record_filled_order";
static const char __pyx_k_trigger_event_async[] = "trigger_event_async";
static const char __pyx_k_BuyOrderCreatedEvent[] = "BuyOrderCreatedEvent";
static const char __pyx_k_QuantizationParams_2[] = "QuantizationParams";
static const char __pyx_k_init___locals_lambda[] = "__init__.<locals>.<lambda>";
static const char __pyx_k_order_size_precision[] = "order_size_precision";
static const char __pyx_k_Error_canceling_order[] = "Error canceling order.";
static const char __pyx_k_SellOrderCreatedEvent[] = "SellOrderCreatedEvent";
static const char __pyx_k_TRADE_EXECUTION_DELAY[] = "TRADE_EXECUTION_DELAY";
static const char __pyx_k_hummingbot_core_clock[] = "hummingbot.core.clock";
static const char __pyx_k_BuyOrderCompletedEvent[] = "BuyOrderCompletedEvent";
static const char __pyx_k_ORDER_FILLED_EVENT_TAG[] = "ORDER_FILLED_EVENT_TAG";
static const char __pyx_k_OrderBookTradeListener[] = "OrderBookTradeListener";
static const char __pyx_k_required_for_the_order[] = " required for the order.";
static const char __pyx_k_MarketOrderFailureEvent[] = "MarketOrderFailureEvent";
static const char __pyx_k_SellOrderCompletedEvent[] = "SellOrderCompletedEvent";
static const char __pyx_k_init_paper_trade_market[] = "init_paper_trade_market";
static const char __pyx_k_order_books_initialized[] = "order_books_initialized";
static const char __pyx_k_No_order_book_exists_for[] = "No order book exists for '";
static const char __pyx_k_pyx_unpickle_QueuedOrder[] = "__pyx_unpickle_QueuedOrder";
static const char __pyx_k_Error_call_trade_listener[] = "Error call trade listener.";
static const char __pyx_k_ORDER_BOOK_TRADE_EVENT_TAG[] = "ORDER_BOOK_TRADE_EVENT_TAG";
static const char __pyx_k_order_book_create_function[] = "order_book_create_function";
static const char __pyx_k_get_active_exchange_markets[] = "get_active_exchange_markets";
static const char __pyx_k_match_trade_to_limit_orders[] = "match_trade_to_limit_orders";
static const char __pyx_k_Error_executing_queued_order[] = "Error executing queued order.";
static const char __pyx_k_Error_processing_limit_order[] = "Error processing limit order.";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG[] = "BUY_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_PaperTradeExchange_cancel_all[] = "PaperTradeExchange.cancel_all";
static const char __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG[] = "MARKET_ORDER_FAILURE_EVENT_TAG";
static const char __pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG[] = "SELL_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_pyx_unpickle_OrderBookMarketOr[] = "__pyx_unpickle_OrderBookMarketOrderFillListener";
static const char __pyx_k_pyx_unpickle_OrderBookTradeLis[] = "__pyx_unpickle_OrderBookTradeListener";
static const char __pyx_k_pyx_unpickle_QuantizationParam[] = "__pyx_unpickle_QuantizationParams";
static const char __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT[] = "MARKET_SELL_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_PaperTradeExchange_stop_network[] = "PaperTradeExchange.stop_network";
static const char __pyx_k_balance_available_for_buy_order[] = " balance available for buy order. ";
static const char __pyx_k_balance_available_for_sell_orde[] = " balance available for sell order. ";
static const char __pyx_k_balance_to_fill_limit_buy_order[] = " balance to fill limit buy order on ";
static const char __pyx_k_balance_to_fill_limit_sell_orde[] = " balance to fill limit sell order on ";
static const char __pyx_k_does_not_existing_in_current_da[] = "' does not existing in current data set.";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_hummingbot_core_data_type_order[] = "hummingbot.core.data_type.order_book_tracker";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Account_balance_does_not_have_as[] = "Account balance does not have asset ";
static const char __pyx_k_Incompatible_checksums_s_vs_0x37[] = "Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x5a[] = "Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x78[] = "Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))";
static const char __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T[] = "MARKET_BUY_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG[] = "MARKET_ORDER_CANCELLED_EVENT_TAG";
static const char __pyx_k_OrderBookMarketOrderFillListener[] = "OrderBookMarketOrderFillListener";
static const char __pyx_k_PaperTradeExchange_c_execute_buy[] = "PaperTradeExchange.c_execute_buy.<locals>.genexpr";
static const char __pyx_k_PaperTradeExchange_c_execute_sel[] = "PaperTradeExchange.c_execute_sell.<locals>.genexpr";
static const char __pyx_k_PaperTradeExchange_check_network[] = "PaperTradeExchange.check_network";
static const char __pyx_k_PaperTradeExchange_get_active_ex[] = "PaperTradeExchange.get_active_exchange_markets";
static const char __pyx_k_PaperTradeExchange_start_network[] = "PaperTradeExchange.start_network";
static const char __pyx_k_PaperTradeExchange_trigger_event[] = "PaperTradeExchange.trigger_event_async";
static const char __pyx_k_convert_from_exchange_trading_pa[] = "convert_from_exchange_trading_pair";
static const char __pyx_k_convert_to_exchange_trading_pair[] = "convert_to_exchange_trading_pair";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_connector_exchange_pa[] = "hummingbot.connector.exchange.paper_trade.paper_trade_exchange";
static const char __pyx_k_hummingbot_core_data_type_cancel[] = "hummingbot.core.data_type.cancellation_result";
static const char __pyx_k_hummingbot_core_data_type_compos[] = "hummingbot.core.data_type.composite_order_book";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_utils_async_util[] = "hummingbot.core.utils.async_utils";
static const char __pyx_k_hummingbot_core_utils_estimate_f[] = "hummingbot.core.utils.estimate_fee";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_order_filled_events_from_order_b[] = "order_filled_events_from_order_book_rows";
static const char __pyx_k_self__ask_limit_orders_self__bid[] = "self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling";
static const char __pyx_k_hummingbot_connector_exchange_pa_2[] = "hummingbot.connector.exchange.paper_trade.trading_pair";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_02x;
static PyObject *__pyx_kp_u_1e;
static PyObject *__pyx_kp_u_1e_10;
static PyObject *__pyx_kp_u_1e_2;
static PyObject *__pyx_kp_u_1e_7;
static PyObject *__pyx_kp_u_7g;
static PyObject *__pyx_kp_u_8g;
static PyObject *__pyx_kp_u_Account_balance_does_not_have_as;
static PyObject *__pyx_n_s_AssetType;
static PyObject *__pyx_n_s_BASE_CURRENCY;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_n_u_BUY;
static PyObject *__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG;
static PyObject *__pyx_n_s_BuyOrderCompleted;
static PyObject *__pyx_n_s_BuyOrderCompletedEvent;
static PyObject *__pyx_n_s_BuyOrderCreated;
static PyObject *__pyx_n_s_BuyOrderCreatedEvent;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_n_s_CancellationResult;
static PyObject *__pyx_n_s_Clock;
static PyObject *__pyx_n_s_CompositeOrderBook;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_kp_u_Error_call_trade_listener;
static PyObject *__pyx_kp_u_Error_canceling_order;
static PyObject *__pyx_kp_u_Error_executing_queued_order;
static PyObject *__pyx_kp_u_Error_processing_limit_order;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x37;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x5a;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x78;
static PyObject *__pyx_kp_u_Insufficient;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T;
static PyObject *__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT;
static PyObject *__pyx_n_s_MarketConfig;
static PyObject *__pyx_n_s_MarketEvent;
static PyObject *__pyx_n_s_MarketOrderFailureEvent;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_order_book_exists_for;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_kp_u_Not_enough;
static PyObject *__pyx_n_s_ORDER_BOOK_TRADE_EVENT_TAG;
static PyObject *__pyx_n_s_ORDER_FILLED_EVENT_TAG;
static PyObject *__pyx_n_s_OrderBookEvent;
static PyObject *__pyx_n_s_OrderBookMarketOrderFillListener;
static PyObject *__pyx_n_s_OrderBookTracker;
static PyObject *__pyx_n_s_OrderBookTradeEvent;
static PyObject *__pyx_n_s_OrderBookTradeListener;
static PyObject *__pyx_n_s_OrderCancelled;
static PyObject *__pyx_n_s_OrderCancelledEvent;
static PyObject *__pyx_n_s_OrderFailure;
static PyObject *__pyx_n_s_OrderFilled;
static PyObject *__pyx_n_s_OrderFilledEvent;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_n_u_PaperTrade;
static PyObject *__pyx_n_s_PaperTradeExchange;
static PyObject *__pyx_n_s_PaperTradeExchange_c_execute_buy;
static PyObject *__pyx_n_s_PaperTradeExchange_c_execute_sel;
static PyObject *__pyx_n_s_PaperTradeExchange_cancel_all;
static PyObject *__pyx_n_s_PaperTradeExchange_check_network;
static PyObject *__pyx_n_s_PaperTradeExchange_get_active_ex;
static PyObject *__pyx_n_s_PaperTradeExchange_start_network;
static PyObject *__pyx_n_s_PaperTradeExchange_stop_network;
static PyObject *__pyx_n_s_PaperTradeExchange_trigger_event;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_u_QuantizationParams;
static PyObject *__pyx_n_s_QuantizationParams_2;
static PyObject *__pyx_kp_u_QueuedOrder;
static PyObject *__pyx_n_s_QueuedOrder_2;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG;
static PyObject *__pyx_n_s_SellOrderCompleted;
static PyObject *__pyx_n_s_SellOrderCompletedEvent;
static PyObject *__pyx_n_s_SellOrderCreated;
static PyObject *__pyx_n_s_SellOrderCreatedEvent;
static PyObject *__pyx_n_s_TRADE_EXECUTION_DELAY;
static PyObject *__pyx_n_s_TradeEvent;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_TradingPair;
static PyObject *__pyx_kp_u_Trading_pair;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asyncio;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_asyncio_tasks;
static PyObject *__pyx_kp_u_available;
static PyObject *__pyx_n_s_available_balances;
static PyObject *__pyx_kp_u_available_vs;
static PyObject *__pyx_n_s_await;
static PyObject *__pyx_n_s_balance;
static PyObject *__pyx_kp_u_balance_available_for_buy_order;
static PyObject *__pyx_kp_u_balance_available_for_sell_orde;
static PyObject *__pyx_kp_u_balance_to_fill_limit_buy_order;
static PyObject *__pyx_kp_u_balance_to_fill_limit_sell_orde;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_u_buy;
static PyObject *__pyx_n_s_buy_fees_asset;
static PyObject *__pyx_n_s_cancel_all;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_check_network;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_config;
static PyObject *__pyx_n_s_convert_from_exchange_trading_pa;
static PyObject *__pyx_n_s_convert_to_exchange_trading_pair;
static PyObject *__pyx_n_s_create_timestamp;
static PyObject *__pyx_n_s_currency;
static PyObject *__pyx_n_s_data_source;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_kp_u_does_not_existing_in_current_da;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_estimate_fee;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_event_tag;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_s_exchange_name;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_active_exchange_markets;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_pa;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_pa_2;
static PyObject *__pyx_n_s_hummingbot_core_clock;
static PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
static PyObject *__pyx_n_s_hummingbot_core_data_type_compos;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_data_type_order;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
static PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init___locals_lambda;
static PyObject *__pyx_n_s_init_paper_trade_market;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_finite;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_limit_orders;
static PyObject *__pyx_n_s_log10;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_s_market_config;
static PyObject *__pyx_n_s_match_trade_to_limit_orders;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_needed_vs;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_on_hold_balances;
static PyObject *__pyx_n_s_order_book_create_function;
static PyObject *__pyx_n_s_order_book_tracker;
static PyObject *__pyx_n_s_order_books;
static PyObject *__pyx_n_u_order_books_initialized;
static PyObject *__pyx_n_s_order_filled_events_from_order_b;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_side;
static PyObject *__pyx_n_s_order_size_decimals;
static PyObject *__pyx_n_s_order_size_precision;
static PyObject *__pyx_n_s_order_type;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_price_decimals;
static PyObject *__pyx_n_s_price_precision;
static PyObject *__pyx_n_s_ptm_logger;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_OrderBookMarketOr;
static PyObject *__pyx_n_s_pyx_unpickle_OrderBookTradeLis;
static PyObject *__pyx_n_s_pyx_unpickle_QuantizationParam;
static PyObject *__pyx_n_s_pyx_unpickle_QueuedOrder;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quantity;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_random_order_id;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_record_filled_order;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_u_required_for_the_order;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_safe_ensure_future;
static PyObject *__pyx_kp_s_self__ask_limit_orders_self__bid;
static PyObject *__pyx_n_u_sell;
static PyObject *__pyx_n_s_sell_fees_amount;
static PyObject *__pyx_n_s_sell_fees_asset;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_simulate_buy;
static PyObject *__pyx_n_s_simulate_sell;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_split_trading_pair;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_network;
static PyObject *__pyx_n_s_status_dict;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stop_network;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_target_market;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_trigger_event_async;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_warning;
static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self, PyObject *__pyx_v_trading_pair, int __pyx_v_price_precision, int __pyx_v_price_decimals, int __pyx_v_order_size_precision, int __pyx_v_order_size_decimals); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_2__repr__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_4__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_6__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self, double __pyx_v_create_timestamp, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_2__repr__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_4__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_book_tracker, PyObject *__pyx_v_config, PyTypeObject *__pyx_v_target_market); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_2random_order_id(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_order_side, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4init_paper_trade_market(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_6split_trading_pair(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14check_network(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_17get_active_exchange_markets(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_20cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED double __pyx_v_timeout_seconds); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_23get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_25get_all_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_27match_trade_to_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_event_object); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_29set_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency, PyObject *__pyx_v_balance); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_31get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_33buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_35sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_37cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_39get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_41get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_43get_maker_order_type(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_45get_taker_order_type(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_47trigger_event_async(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_event_tag, PyObject *__pyx_v_event); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_2__pyx_unpickle_QueuedOrder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_4__pyx_unpickle_OrderBookTradeListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_6__pyx_unpickle_OrderBookMarketOrderFillListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_5_0;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_1eneg_7;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_58563262;
static PyObject *__pyx_int_95353964;
static PyObject *__pyx_int_126189128;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__31;
static PyObject *__pyx_k__32;
static PyObject *__pyx_k__33;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
/* Late includes */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":77
 *         int order_size_decimals
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  str trading_pair,
 *                  int price_precision,
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  int __pyx_v_price_precision;
  int __pyx_v_price_decimals;
  int __pyx_v_order_size_precision;
  int __pyx_v_order_size_decimals;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_price_precision,&__pyx_n_s_price_decimals,&__pyx_n_s_order_size_precision,&__pyx_n_s_order_size_decimals,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price_precision)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price_decimals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_precision)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_size_decimals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_price_precision = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_price_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L3_error)
    __pyx_v_price_decimals = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_price_decimals == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    __pyx_v_order_size_precision = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_order_size_precision == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
    __pyx_v_order_size_decimals = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_order_size_decimals == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QuantizationParams.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_price_precision, __pyx_v_price_decimals, __pyx_v_order_size_precision, __pyx_v_order_size_decimals);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self, PyObject *__pyx_v_trading_pair, int __pyx_v_price_precision, int __pyx_v_price_decimals, int __pyx_v_order_size_precision, int __pyx_v_order_size_decimals) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":83
 *                  int order_size_precision,
 *                  int order_size_decimals):
 *         self.trading_pair = trading_pair             # <<<<<<<<<<<<<<
 *         self.price_precision = price_precision
 *         self.price_decimals = price_decimals
 */
  __Pyx_INCREF(__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_v_trading_pair);
  __Pyx_GOTREF(__pyx_v_self->trading_pair);
  __Pyx_DECREF(__pyx_v_self->trading_pair);
  __pyx_v_self->trading_pair = __pyx_v_trading_pair;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":84
 *                  int order_size_decimals):
 *         self.trading_pair = trading_pair
 *         self.price_precision = price_precision             # <<<<<<<<<<<<<<
 *         self.price_decimals = price_decimals
 *         self.order_size_precision = order_size_precision
 */
  __pyx_v_self->price_precision = __pyx_v_price_precision;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":85
 *         self.trading_pair = trading_pair
 *         self.price_precision = price_precision
 *         self.price_decimals = price_decimals             # <<<<<<<<<<<<<<
 *         self.order_size_precision = order_size_precision
 *         self.order_size_decimals = order_size_decimals
 */
  __pyx_v_self->price_decimals = __pyx_v_price_decimals;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":86
 *         self.price_precision = price_precision
 *         self.price_decimals = price_decimals
 *         self.order_size_precision = order_size_precision             # <<<<<<<<<<<<<<
 *         self.order_size_decimals = order_size_decimals
 * 
 */
  __pyx_v_self->order_size_precision = __pyx_v_order_size_precision;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":87
 *         self.price_decimals = price_decimals
 *         self.order_size_precision = order_size_precision
 *         self.order_size_decimals = order_size_decimals             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __pyx_v_self->order_size_decimals = __pyx_v_order_size_decimals;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":77
 *         int order_size_decimals
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  str trading_pair,
 *                  int price_precision,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":89
 *         self.order_size_decimals = order_size_decimals
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (f"QuantizationParams('{self.trading_pair}', {self.price_precision}, {self.price_decimals}, "
 *                 f"{self.order_size_precision}, {self.order_size_decimals})")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_2__repr__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_2__repr__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":90
 * 
 *     def __repr__(self) -> str:
 *         return (f"QuantizationParams('{self.trading_pair}', {self.price_precision}, {self.price_decimals}, "             # <<<<<<<<<<<<<<
 *                 f"{self.order_size_precision}, {self.order_size_decimals})")
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_QuantizationParams);
  __pyx_t_2 += 20;
  __Pyx_GIVEREF(__pyx_kp_u_QuantizationParams);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_QuantizationParams);
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_self->trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->price_precision, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__2);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->price_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":91
 *     def __repr__(self) -> str:
 *         return (f"QuantizationParams('{self.trading_pair}', {self.price_precision}, {self.price_decimals}, "
 *                 f"{self.order_size_precision}, {self.order_size_decimals})")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->order_size_precision, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__2);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_self->order_size_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__3);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":90
 * 
 *     def __repr__(self) -> str:
 *         return (f"QuantizationParams('{self.trading_pair}', {self.price_precision}, {self.price_decimals}, "             # <<<<<<<<<<<<<<
 *                 f"{self.order_size_precision}, {self.order_size_decimals})")
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":89
 *         self.order_size_decimals = order_size_decimals
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (f"QuantizationParams('{self.trading_pair}', {self.price_precision}, {self.price_decimals}, "
 *                 f"{self.order_size_precision}, {self.order_size_decimals})")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QuantizationParams.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_4__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_4__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.order_size_decimals, self.order_size_precision, self.price_decimals, self.price_precision, self.trading_pair)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->order_size_decimals); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->order_size_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->price_decimals); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->price_precision); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->trading_pair);
  __Pyx_GIVEREF(__pyx_v_self->trading_pair);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_self->trading_pair);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.order_size_decimals, self.order_size_precision, self.price_decimals, self.price_precision, self.trading_pair)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self.order_size_decimals, self.order_size_precision, self.price_decimals, self.price_precision, self.trading_pair)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.trading_pair is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.order_size_decimals, self.order_size_precision, self.price_decimals, self.price_precision, self.trading_pair)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.trading_pair is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, None), state
 */
  /*else*/ {
    __pyx_t_7 = (__pyx_v_self->trading_pair != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_7;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.trading_pair is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = self.trading_pair is not None
 *     if use_setstate:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_QuantizationParam); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126189128);
    __Pyx_GIVEREF(__pyx_int_126189128);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_126189128);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.trading_pair is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, None), state
 *     else:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_QuantizationParams__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_QuantizationParam); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126189128);
    __Pyx_GIVEREF(__pyx_int_126189128);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_126189128);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QuantizationParams.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_QuantizationParams__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_6__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_6__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_QuantizationParams__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_QuantizationParams, (type(self), 0x7857e48, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_QuantizationParams__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QuantizationParams.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":102
 *         object _amount
 * 
 *     def __init__(self, create_timestamp: float, order_id: str, is_buy: bool, trading_pair: str, amount: Decimal):             # <<<<<<<<<<<<<<
 *         self.create_timestamp = create_timestamp
 *         self._order_id = order_id
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_create_timestamp;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_create_timestamp,&__pyx_n_s_order_id,&__pyx_n_s_is_buy,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_create_timestamp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 102, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_create_timestamp = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_create_timestamp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    __pyx_v_order_id = ((PyObject*)values[1]);
    __pyx_v_is_buy = values[2];
    __pyx_v_trading_pair = ((PyObject*)values[3]);
    __pyx_v_amount = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 102, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self), __pyx_v_create_timestamp, __pyx_v_order_id, __pyx_v_is_buy, __pyx_v_trading_pair, __pyx_v_amount);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self, double __pyx_v_create_timestamp, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":103
 * 
 *     def __init__(self, create_timestamp: float, order_id: str, is_buy: bool, trading_pair: str, amount: Decimal):
 *         self.create_timestamp = create_timestamp             # <<<<<<<<<<<<<<
 *         self._order_id = order_id
 *         self._is_buy = is_buy
 */
  __pyx_v_self->create_timestamp = __pyx_v_create_timestamp;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":104
 *     def __init__(self, create_timestamp: float, order_id: str, is_buy: bool, trading_pair: str, amount: Decimal):
 *         self.create_timestamp = create_timestamp
 *         self._order_id = order_id             # <<<<<<<<<<<<<<
 *         self._is_buy = is_buy
 *         self._trading_pair = trading_pair
 */
  __Pyx_INCREF(__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_v_order_id);
  __Pyx_GOTREF(__pyx_v_self->_order_id);
  __Pyx_DECREF(__pyx_v_self->_order_id);
  __pyx_v_self->_order_id = __pyx_v_order_id;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":105
 *         self.create_timestamp = create_timestamp
 *         self._order_id = order_id
 *         self._is_buy = is_buy             # <<<<<<<<<<<<<<
 *         self._trading_pair = trading_pair
 *         self._amount = amount
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_v_self->_is_buy = __pyx_t_1;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":106
 *         self._order_id = order_id
 *         self._is_buy = is_buy
 *         self._trading_pair = trading_pair             # <<<<<<<<<<<<<<
 *         self._amount = amount
 * 
 */
  __Pyx_INCREF(__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_v_trading_pair);
  __Pyx_GOTREF(__pyx_v_self->_trading_pair);
  __Pyx_DECREF(__pyx_v_self->_trading_pair);
  __pyx_v_self->_trading_pair = __pyx_v_trading_pair;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":107
 *         self._is_buy = is_buy
 *         self._trading_pair = trading_pair
 *         self._amount = amount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_v_amount);
  __Pyx_GOTREF(__pyx_v_self->_amount);
  __Pyx_DECREF(__pyx_v_self->_amount);
  __pyx_v_self->_amount = __pyx_v_amount;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":102
 *         object _amount
 * 
 *     def __init__(self, create_timestamp: float, order_id: str, is_buy: bool, trading_pair: str, amount: Decimal):             # <<<<<<<<<<<<<<
 *         self.create_timestamp = create_timestamp
 *         self._order_id = order_id
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":110
 * 
 *     @property
 *     def timestamp(self) -> double:             # <<<<<<<<<<<<<<
 *         return self.create_timestamp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":111
 *     @property
 *     def timestamp(self) -> double:
 *         return self.create_timestamp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->create_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":110
 * 
 *     @property
 *     def timestamp(self) -> double:             # <<<<<<<<<<<<<<
 *         return self.create_timestamp
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.timestamp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":114
 * 
 *     @property
 *     def order_id(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._order_id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":115
 *     @property
 *     def order_id(self) -> str:
 *         return self._order_id             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_order_id);
  __pyx_r = __pyx_v_self->_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":114
 * 
 *     @property
 *     def order_id(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._order_id
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":118
 * 
 *     @property
 *     def is_buy(self) -> bint:             # <<<<<<<<<<<<<<
 *         return self._is_buy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":119
 *     @property
 *     def is_buy(self) -> bint:
 *         return self._is_buy             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":118
 * 
 *     @property
 *     def is_buy(self) -> bint:             # <<<<<<<<<<<<<<
 *         return self._is_buy
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.is_buy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":122
 * 
 *     @property
 *     def trading_pair(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._trading_pair
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":123
 *     @property
 *     def trading_pair(self) -> str:
 *         return self._trading_pair             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_trading_pair);
  __pyx_r = __pyx_v_self->_trading_pair;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":122
 * 
 *     @property
 *     def trading_pair(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._trading_pair
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":126
 * 
 *     @property
 *     def amount(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self._amount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":127
 *     @property
 *     def amount(self) -> Decimal:
 *         return self._amount             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_amount);
  __pyx_r = __pyx_v_self->_amount;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":126
 * 
 *     @property
 *     def amount(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self._amount
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":129
 *         return self._amount
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (f"QueuedOrder({self.create_timestamp}, '{self.order_id}', {self.is_buy}, '{self.trading_pair}', "
 *                 f"{self.amount})")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_2__repr__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_2__repr__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":130
 * 
 *     def __repr__(self) -> str:
 *         return (f"QueuedOrder({self.create_timestamp}, '{self.order_id}', {self.is_buy}, '{self.trading_pair}', "             # <<<<<<<<<<<<<<
 *                 f"{self.amount})")
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_QueuedOrder);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_QueuedOrder);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_QueuedOrder);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->create_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_2 += 3;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":131
 *     def __repr__(self) -> str:
 *         return (f"QueuedOrder({self.create_timestamp}, '{self.order_id}', {self.is_buy}, '{self.trading_pair}', "
 *                 f"{self.amount})")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__3);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":130
 * 
 *     def __repr__(self) -> str:
 *         return (f"QueuedOrder({self.create_timestamp}, '{self.order_id}', {self.is_buy}, '{self.trading_pair}', "             # <<<<<<<<<<<<<<
 *                 f"{self.amount})")
 * 
 */
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":129
 *         return self._amount
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         return (f"QueuedOrder({self.create_timestamp}, '{self.order_id}', {self.is_buy}, '{self.trading_pair}', "
 *                 f"{self.amount})")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_4__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_4__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._amount, self._is_buy, self._order_id, self._trading_pair, self.create_timestamp)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->create_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->_amount);
  __Pyx_GIVEREF(__pyx_v_self->_amount);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->_amount);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->_order_id);
  __Pyx_GIVEREF(__pyx_v_self->_order_id);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self->_order_id);
  __Pyx_INCREF(__pyx_v_self->_trading_pair);
  __Pyx_GIVEREF(__pyx_v_self->_trading_pair);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_self->_trading_pair);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._amount, self._is_buy, self._order_id, self._trading_pair, self.create_timestamp)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self._amount, self._is_buy, self._order_id, self._trading_pair, self.create_timestamp)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._amount is not None or self._order_id is not None or self._trading_pair is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._amount, self._is_buy, self._order_id, self._trading_pair, self.create_timestamp)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._amount is not None or self._order_id is not None or self._trading_pair is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->_amount != Py_None);
    __pyx_t_6 = (__pyx_t_4 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->_order_id != ((PyObject*)Py_None));
    __pyx_t_4 = (__pyx_t_6 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_5 = __pyx_t_4;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_4 = (__pyx_v_self->_trading_pair != ((PyObject*)Py_None));
    __pyx_t_6 = (__pyx_t_4 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._amount is not None or self._order_id is not None or self._trading_pair is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self._amount is not None or self._order_id is not None or self._trading_pair is not None
 *     if use_setstate:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_QueuedOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_95353964);
    __Pyx_GIVEREF(__pyx_int_95353964);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_95353964);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._amount is not None or self._order_id is not None or self._trading_pair is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, None), state
 *     else:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_QueuedOrder__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_QueuedOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_95353964);
    __Pyx_GIVEREF(__pyx_int_95353964);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_95353964);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_QueuedOrder__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_QueuedOrder__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QueuedOrder__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_QueuedOrder, (type(self), 0x5aefc6c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_QueuedOrder__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":138
 *         ExchangeBase _market
 * 
 *     def __init__(self, market: ExchangeBase):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._market = market
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 138, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 138, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_market), __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase, 1, "market", 0))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)__pyx_v_self), __pyx_v_market);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":139
 * 
 *     def __init__(self, market: ExchangeBase):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._market = market
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":140
 *     def __init__(self, market: ExchangeBase):
 *         super().__init__()
 *         self._market = market             # <<<<<<<<<<<<<<
 * 
 *     cdef c_call(self, object event_object):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_market));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_market));
  __Pyx_GOTREF(__pyx_v_self->_market);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_market));
  __pyx_v_self->_market = __pyx_v_market;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":138
 *         ExchangeBase _market
 * 
 *     def __init__(self, market: ExchangeBase):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._market = market
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":142
 *         self._market = market
 * 
 *     cdef c_call(self, object event_object):             # <<<<<<<<<<<<<<
 *         try:
 *             self._market.match_trade_to_limit_orders(event_object)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_c_call(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, PyObject *__pyx_v_event_object) {
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":143
 * 
 *     cdef c_call(self, object event_object):
 *         try:             # <<<<<<<<<<<<<<
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":144
 *     cdef c_call(self, object event_object):
 *         try:
 *             self._market.match_trade_to_limit_orders(event_object)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             self.logger().error("Error call trade listener.", exc_info=True)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_market), __pyx_n_s_match_trade_to_limit_orders); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_event_object) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_event_object);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":143
 * 
 *     cdef c_call(self, object event_object):
 *         try:             # <<<<<<<<<<<<<<
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":145
 *         try:
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error("Error call trade listener.", exc_info=True)
 * 
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_7) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 145, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":146
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:
 *             self.logger().error("Error call trade listener.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 * cdef class OrderBookMarketOrderFillListener(EventListener):
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 146, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 146, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 146, __pyx_L14_error)
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__5, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 146, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":145
 *         try:
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error("Error call trade listener.", exc_info=True)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e);
          __pyx_v_e = NULL;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __pyx_t_7 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
          }
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
          __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
          __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":143
 * 
 *     cdef c_call(self, object event_object):
 *         try:             # <<<<<<<<<<<<<<
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":142
 *         self._market = market
 * 
 *     cdef c_call(self, object event_object):             # <<<<<<<<<<<<<<
 *         try:
 *             self._market.match_trade_to_limit_orders(event_object)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_2__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._market)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_market));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_market));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->_market));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->_market) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderBookTradeLis); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58563262);
    __Pyx_GIVEREF(__pyx_int_58563262);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_58563262);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, None), state
 *     else:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderBookTradeListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderBookTradeLis); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58563262);
    __Pyx_GIVEREF(__pyx_int_58563262);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_58563262);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderBookTradeListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_4__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderBookTradeListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookTradeListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderBookTradeListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderBookTradeListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":152
 *         ExchangeBase _market
 * 
 *     def __init__(self, market: ExchangeBase):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._market = market
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_market)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_market), __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase, 1, "market", 0))) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)__pyx_v_self), __pyx_v_market);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":153
 * 
 *     def __init__(self, market: ExchangeBase):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._market = market
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":154
 *     def __init__(self, market: ExchangeBase):
 *         super().__init__()
 *         self._market = market             # <<<<<<<<<<<<<<
 * 
 *     cdef c_call(self, object event_object):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_market));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_market));
  __Pyx_GOTREF(__pyx_v_self->_market);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_market));
  __pyx_v_self->_market = __pyx_v_market;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":152
 *         ExchangeBase _market
 * 
 *     def __init__(self, market: ExchangeBase):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._market = market
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":156
 *         self._market = market
 * 
 *     cdef c_call(self, object event_object):             # <<<<<<<<<<<<<<
 * 
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_c_call(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, PyObject *__pyx_v_event_object) {
  PyObject *__pyx_v_order_book = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":158
 *     cdef c_call(self, object event_object):
 * 
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             return
 *         order_book = self._market.order_books[event_object.trading_pair]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_event_object, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_market), __pyx_n_s_order_books); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_event_object, __pyx_n_s_order_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":159
 * 
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:
 *             return             # <<<<<<<<<<<<<<
 *         order_book = self._market.order_books[event_object.trading_pair]
 *         order_book.record_filled_order(event_object)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":158
 *     cdef c_call(self, object event_object):
 * 
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             return
 *         order_book = self._market.order_books[event_object.trading_pair]
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":160
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:
 *             return
 *         order_book = self._market.order_books[event_object.trading_pair]             # <<<<<<<<<<<<<<
 *         order_book.record_filled_order(event_object)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_market), __pyx_n_s_order_books); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_event_object, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_order_book = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":161
 *             return
 *         order_book = self._market.order_books[event_object.trading_pair]
 *         order_book.record_filled_order(event_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book, __pyx_n_s_record_filled_order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_event_object) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_event_object);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":156
 *         self._market = market
 * 
 *     cdef c_call(self, object event_object):             # <<<<<<<<<<<<<<
 * 
 *         if event_object.trading_pair not in self._market.order_books or event_object.order_type != OrderType.MARKET:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_book);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_2__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._market)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_market));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_market));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->_market));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._market)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->_market) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderBookMarketOr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58563262);
    __Pyx_GIVEREF(__pyx_int_58563262);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_58563262);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._market is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, None), state
 *     else:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderBookMarketOr); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58563262);
    __Pyx_GIVEREF(__pyx_int_58563262);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_58563262);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_4__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookMarketOrderFillListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderBookMarketOrderFillListener, (type(self), 0x37d9abe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":175
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):             # <<<<<<<<<<<<<<
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()
 *         self._order_book_tracker = order_book_tracker
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_book_tracker = 0;
  PyObject *__pyx_v_config = 0;
  PyTypeObject *__pyx_v_target_market = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_book_tracker,&__pyx_n_s_config,&__pyx_n_s_target_market,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_book_tracker)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_config)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_market)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_order_book_tracker = values[0];
    __pyx_v_config = values[1];
    __pyx_v_target_market = ((PyTypeObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_market), (&PyType_Type), 1, "target_market", 1))) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_order_book_tracker, __pyx_v_config, __pyx_v_target_market);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":176
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker = order_book_tracker
 *         super(ExchangeBase, self).__init__()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8__init___lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8__init___lambda = {"lambda", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8__init___lambda, METH_NOARGS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8__init___lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.__init__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":175
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):             # <<<<<<<<<<<<<<
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()
 *         self._order_book_tracker = order_book_tracker
 */

static int __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_book_tracker, PyObject *__pyx_v_config, PyTypeObject *__pyx_v_target_market) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":176
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker = order_book_tracker
 *         super(ExchangeBase, self).__init__()
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8__init___lambda, 0, __pyx_n_s_init___locals_lambda, NULL, __pyx_n_s_hummingbot_connector_exchange_pa, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book_tracker, __pyx_n_s_data_source); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_order_book_create_function, __pyx_t_1) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":177
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()
 *         self._order_book_tracker = order_book_tracker             # <<<<<<<<<<<<<<
 *         super(ExchangeBase, self).__init__()
 *         self._account_balances = {}
 */
  __Pyx_INCREF(__pyx_v_order_book_tracker);
  __Pyx_GIVEREF(__pyx_v_order_book_tracker);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __pyx_v_self->__pyx_base._order_book_tracker = __pyx_v_order_book_tracker;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":178
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()
 *         self._order_book_tracker = order_book_tracker
 *         super(ExchangeBase, self).__init__()             # <<<<<<<<<<<<<<
 *         self._account_balances = {}
 *         self._account_available_balances = {}
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":179
 *         self._order_book_tracker = order_book_tracker
 *         super(ExchangeBase, self).__init__()
 *         self._account_balances = {}             # <<<<<<<<<<<<<<
 *         self._account_available_balances = {}
 *         self._paper_trade_market_initialized = False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_balances = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":180
 *         super(ExchangeBase, self).__init__()
 *         self._account_balances = {}
 *         self._account_available_balances = {}             # <<<<<<<<<<<<<<
 *         self._paper_trade_market_initialized = False
 *         self._trading_pairs = {}
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_available_balances = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":181
 *         self._account_balances = {}
 *         self._account_available_balances = {}
 *         self._paper_trade_market_initialized = False             # <<<<<<<<<<<<<<
 *         self._trading_pairs = {}
 *         self._config = config
 */
  __pyx_v_self->_paper_trade_market_initialized = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":182
 *         self._account_available_balances = {}
 *         self._paper_trade_market_initialized = False
 *         self._trading_pairs = {}             # <<<<<<<<<<<<<<
 *         self._config = config
 *         self._queued_orders = deque()
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_trading_pairs);
  __Pyx_DECREF(__pyx_v_self->_trading_pairs);
  __pyx_v_self->_trading_pairs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":183
 *         self._paper_trade_market_initialized = False
 *         self._trading_pairs = {}
 *         self._config = config             # <<<<<<<<<<<<<<
 *         self._queued_orders = deque()
 *         self._quantization_params = {}
 */
  __Pyx_INCREF(__pyx_v_config);
  __Pyx_GIVEREF(__pyx_v_config);
  __Pyx_GOTREF(__pyx_v_self->_config);
  __Pyx_DECREF(__pyx_v_self->_config);
  __pyx_v_self->_config = __pyx_v_config;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":184
 *         self._trading_pairs = {}
 *         self._config = config
 *         self._queued_orders = deque()             # <<<<<<<<<<<<<<
 *         self._quantization_params = {}
 *         self._order_book_trade_listener = OrderBookTradeListener(self)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_queued_orders);
  __Pyx_DECREF(__pyx_v_self->_queued_orders);
  __pyx_v_self->_queued_orders = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":185
 *         self._config = config
 *         self._queued_orders = deque()
 *         self._quantization_params = {}             # <<<<<<<<<<<<<<
 *         self._order_book_trade_listener = OrderBookTradeListener(self)
 *         self._target_market = target_market
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_quantization_params);
  __Pyx_DECREF(__pyx_v_self->_quantization_params);
  __pyx_v_self->_quantization_params = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":186
 *         self._queued_orders = deque()
 *         self._quantization_params = {}
 *         self._order_book_trade_listener = OrderBookTradeListener(self)             # <<<<<<<<<<<<<<
 *         self._target_market = target_market
 *         self._market_order_filled_listener = OrderBookMarketOrderFillListener(self)
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_order_book_trade_listener);
  __Pyx_DECREF(__pyx_v_self->_order_book_trade_listener);
  __pyx_v_self->_order_book_trade_listener = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":187
 *         self._quantization_params = {}
 *         self._order_book_trade_listener = OrderBookTradeListener(self)
 *         self._target_market = target_market             # <<<<<<<<<<<<<<
 *         self._market_order_filled_listener = OrderBookMarketOrderFillListener(self)
 *         self.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._market_order_filled_listener)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_target_market));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_target_market));
  __Pyx_GOTREF(__pyx_v_self->_target_market);
  __Pyx_DECREF(__pyx_v_self->_target_market);
  __pyx_v_self->_target_market = ((PyObject *)__pyx_v_target_market);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":188
 *         self._order_book_trade_listener = OrderBookTradeListener(self)
 *         self._target_market = target_market
 *         self._market_order_filled_listener = OrderBookMarketOrderFillListener(self)             # <<<<<<<<<<<<<<
 *         self.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._market_order_filled_listener)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_market_order_filled_listener);
  __Pyx_DECREF(__pyx_v_self->_market_order_filled_listener);
  __pyx_v_self->_market_order_filled_listener = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":189
 *         self._target_market = target_market
 *         self._market_order_filled_listener = OrderBookMarketOrderFillListener(self)
 *         self.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._market_order_filled_listener)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_v_self->_market_order_filled_listener) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self->_market_order_filled_listener, __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener))))) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_self->_market_order_filled_listener;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":175
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):             # <<<<<<<<<<<<<<
 *         order_book_tracker.data_source.order_book_create_function = lambda: CompositeOrderBook()
 *         self._order_book_tracker = order_book_tracker
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":192
 * 
 *     @classmethod
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:             # <<<<<<<<<<<<<<
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_3random_order_id(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_3random_order_id(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_order_id (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_side,&__pyx_n_s_trading_pair,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_side)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_order_id", 1, 2, 2, 1); __PYX_ERR(0, 192, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_order_id") < 0)) __PYX_ERR(0, 192, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_order_side = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_order_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 192, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.random_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_side), (&PyUnicode_Type), 1, "order_side", 1))) __PYX_ERR(0, 192, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_2random_order_id(((PyTypeObject*)__pyx_v_cls), __pyx_v_order_side, __pyx_v_trading_pair);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_2random_order_id(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_order_side, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_v_vals = NULL;
  CYTHON_UNUSED long __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_8genexpr1__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("random_order_id", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":193
 *     @classmethod
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]             # <<<<<<<<<<<<<<
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    for (__pyx_t_2 = 0; __pyx_t_2 < 13; __pyx_t_2+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_2;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_choice); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __pyx_v_vals = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":194
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])             # <<<<<<<<<<<<<<
 * 
 *     def init_paper_trade_market(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_Unicode(__pyx_v_order_side); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_3, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_v_vals; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    for (;;) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 194, __pyx_L7_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_val, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Format(__pyx_8genexpr1__pyx_v_val, __pyx_kp_u_02x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 194, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_5 = PyUnicode_Join(__pyx_kp_u__9, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":192
 * 
 *     @classmethod
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:             # <<<<<<<<<<<<<<
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.random_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":196
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 * 
 *     def init_paper_trade_market(self):             # <<<<<<<<<<<<<<
 *         for trading_pair_str, order_book in self._order_book_tracker.order_books.items():
 *             assert type(order_book) is CompositeOrderBook
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5init_paper_trade_market(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5init_paper_trade_market(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_paper_trade_market (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4init_paper_trade_market(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4init_paper_trade_market(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_v_trading_pair_str = NULL;
  PyObject *__pyx_v_order_book = NULL;
  PyObject *__pyx_v_base_asset = NULL;
  PyObject *__pyx_v_quote_asset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int64_t __pyx_t_12;
  __Pyx_RefNannySetupContext("init_paper_trade_market", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":197
 * 
 *     def init_paper_trade_market(self):
 *         for trading_pair_str, order_book in self._order_book_tracker.order_books.items():             # <<<<<<<<<<<<<<
 *             assert type(order_book) is CompositeOrderBook
 *             base_asset, quote_asset = self.split_trading_pair(trading_pair_str)
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 197, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_dict_iterator(__pyx_t_5, 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_6;
  __pyx_t_6 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_6, &__pyx_t_5, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_trading_pair_str, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_order_book, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":198
 *     def init_paper_trade_market(self):
 *         for trading_pair_str, order_book in self._order_book_tracker.order_books.items():
 *             assert type(order_book) is CompositeOrderBook             # <<<<<<<<<<<<<<
 *             base_asset, quote_asset = self.split_trading_pair(trading_pair_str)
 *             self._trading_pairs[self._target_market.convert_from_exchange_trading_pair(trading_pair_str)] = TradingPair(trading_pair_str, base_asset, quote_asset)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = (((PyObject *)Py_TYPE(__pyx_v_order_book)) == ((PyObject *)__pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook));
      if (unlikely(!(__pyx_t_8 != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 198, __pyx_L1_error)
      }
    }
    #endif

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":199
 *         for trading_pair_str, order_book in self._order_book_tracker.order_books.items():
 *             assert type(order_book) is CompositeOrderBook
 *             base_asset, quote_asset = self.split_trading_pair(trading_pair_str)             # <<<<<<<<<<<<<<
 *             self._trading_pairs[self._target_market.convert_from_exchange_trading_pair(trading_pair_str)] = TradingPair(trading_pair_str, base_asset, quote_asset)
 *             (<CompositeOrderBook>order_book).c_add_listener(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_split_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_9, __pyx_v_trading_pair_str) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_trading_pair_str);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 199, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 199, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_base_asset, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_quote_asset, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":200
 *             assert type(order_book) is CompositeOrderBook
 *             base_asset, quote_asset = self.split_trading_pair(trading_pair_str)
 *             self._trading_pairs[self._target_market.convert_from_exchange_trading_pair(trading_pair_str)] = TradingPair(trading_pair_str, base_asset, quote_asset)             # <<<<<<<<<<<<<<
 *             (<CompositeOrderBook>order_book).c_add_listener(
 *                 self.ORDER_BOOK_TRADE_EVENT_TAG,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TradingPair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_trading_pair_str, __pyx_v_base_asset, __pyx_v_quote_asset};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_trading_pair_str, __pyx_v_base_asset, __pyx_v_quote_asset};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_trading_pair_str);
      __Pyx_GIVEREF(__pyx_v_trading_pair_str);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_v_trading_pair_str);
      __Pyx_INCREF(__pyx_v_base_asset);
      __Pyx_GIVEREF(__pyx_v_base_asset);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_v_base_asset);
      __Pyx_INCREF(__pyx_v_quote_asset);
      __Pyx_GIVEREF(__pyx_v_quote_asset);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_7, __pyx_v_quote_asset);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 200, __pyx_L1_error)
    }
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_target_market, __pyx_n_s_convert_from_exchange_trading_pa); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_6, __pyx_v_trading_pair_str) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_trading_pair_str);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_self->_trading_pairs, __pyx_t_9, __pyx_t_5) < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":202
 *             self._trading_pairs[self._target_market.convert_from_exchange_trading_pair(trading_pair_str)] = TradingPair(trading_pair_str, base_asset, quote_asset)
 *             (<CompositeOrderBook>order_book).c_add_listener(
 *                 self.ORDER_BOOK_TRADE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                 self._order_book_trade_listener
 *             )
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_BOOK_TRADE_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":203
 *             (<CompositeOrderBook>order_book).c_add_listener(
 *                 self.ORDER_BOOK_TRADE_EVENT_TAG,
 *                 self._order_book_trade_listener             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    if (!(likely(((__pyx_v_self->_order_book_trade_listener) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self->_order_book_trade_listener, __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener))))) __PYX_ERR(0, 203, __pyx_L1_error)
    __pyx_t_5 = __pyx_v_self->_order_book_trade_listener;
    __Pyx_INCREF(__pyx_t_5);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":201
 *             base_asset, quote_asset = self.split_trading_pair(trading_pair_str)
 *             self._trading_pairs[self._target_market.convert_from_exchange_trading_pair(trading_pair_str)] = TradingPair(trading_pair_str, base_asset, quote_asset)
 *             (<CompositeOrderBook>order_book).c_add_listener(             # <<<<<<<<<<<<<<
 *                 self.ORDER_BOOK_TRADE_EVENT_TAG,
 *                 self._order_book_trade_listener
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook *)((struct __pyx_obj_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook *)__pyx_v_order_book)->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)((struct __pyx_obj_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook *)__pyx_v_order_book)), __pyx_t_12, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":196
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 * 
 *     def init_paper_trade_market(self):             # <<<<<<<<<<<<<<
 *         for trading_pair_str, order_book in self._order_book_tracker.order_books.items():
 *             assert type(order_book) is CompositeOrderBook
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.init_paper_trade_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair_str);
  __Pyx_XDECREF(__pyx_v_order_book);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":206
 *             )
 * 
 *     def split_trading_pair(self, trading_pair: str) -> Tuple[str, str]:             # <<<<<<<<<<<<<<
 *         return self._target_market.split_trading_pair(trading_pair)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_7split_trading_pair(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_7split_trading_pair(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split_trading_pair (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_6split_trading_pair(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((PyObject*)__pyx_v_trading_pair));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_6split_trading_pair(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("split_trading_pair", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":207
 * 
 *     def split_trading_pair(self, trading_pair: str) -> Tuple[str, str]:
 *         return self._target_market.split_trading_pair(trading_pair)             # <<<<<<<<<<<<<<
 * 
 *     #  <editor-fold desc="Property">
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_target_market, __pyx_n_s_split_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":206
 *             )
 * 
 *     def split_trading_pair(self, trading_pair: str) -> Tuple[str, str]:             # <<<<<<<<<<<<<<
 *         return self._target_market.split_trading_pair(trading_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.split_trading_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":211
 *     #  <editor-fold desc="Property">
 *     @property
 *     def trading_pair(self) -> Dict[str, TradingPair]:             # <<<<<<<<<<<<<<
 *         return self._trading_pairs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":212
 *     @property
 *     def trading_pair(self) -> Dict[str, TradingPair]:
 *         return self._trading_pairs             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_trading_pairs);
  __pyx_r = __pyx_v_self->_trading_pairs;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":211
 *     #  <editor-fold desc="Property">
 *     @property
 *     def trading_pair(self) -> Dict[str, TradingPair]:             # <<<<<<<<<<<<<<
 *         return self._trading_pairs
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":215
 * 
 *     @property
 *     def name(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.exchange_name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":216
 *     @property
 *     def name(self) -> str:
 *         return self._order_book_tracker.exchange_name             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_exchange_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":215
 * 
 *     @property
 *     def name(self) -> str:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.exchange_name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":219
 * 
 *     @property
 *     def display_name(self) -> str:             # <<<<<<<<<<<<<<
 *         return f"{self._order_book_tracker.exchange_name}_PaperTrade"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":220
 *     @property
 *     def display_name(self) -> str:
 *         return f"{self._order_book_tracker.exchange_name}_PaperTrade"             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_exchange_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_n_u_PaperTrade); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":219
 * 
 *     @property
 *     def display_name(self) -> str:             # <<<<<<<<<<<<<<
 *         return f"{self._order_book_tracker.exchange_name}_PaperTrade"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.display_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":223
 * 
 *     @property
 *     def order_books(self) -> Dict[str, CompositeOrderBook]:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.order_books
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":224
 *     @property
 *     def order_books(self) -> Dict[str, CompositeOrderBook]:
 *         return self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":223
 * 
 *     @property
 *     def order_books(self) -> Dict[str, CompositeOrderBook]:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.order_books
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.order_books.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":227
 * 
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:             # <<<<<<<<<<<<<<
 *         return {
 *             "order_books_initialized": self._order_book_tracker and len(self._order_book_tracker.order_books) > 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":228
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {             # <<<<<<<<<<<<<<
 *             "order_books_initialized": self._order_book_tracker and len(self._order_book_tracker.order_books) > 0
 *         }
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":229
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 *             "order_books_initialized": self._order_book_tracker and len(self._order_book_tracker.order_books) > 0             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_self->__pyx_base._order_book_tracker); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
  if (__pyx_t_3) {
  } else {
    __Pyx_INCREF(__pyx_v_self->__pyx_base._order_book_tracker);
    __pyx_t_2 = __pyx_v_self->__pyx_base._order_book_tracker;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_5 > 0);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_order_books_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":227
 * 
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:             # <<<<<<<<<<<<<<
 *         return {
 *             "order_books_initialized": self._order_book_tracker and len(self._order_book_tracker.order_books) > 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.status_dict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":233
 * 
 *     @property
 *     def ready(self):             # <<<<<<<<<<<<<<
 *         if not self._order_book_tracker.ready:
 *             return False
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":234
 *     @property
 *     def ready(self):
 *         if not self._order_book_tracker.ready:             # <<<<<<<<<<<<<<
 *             return False
 *         if all(self.status_dict.values()):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_ready); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":235
 *     def ready(self):
 *         if not self._order_book_tracker.ready:
 *             return False             # <<<<<<<<<<<<<<
 *         if all(self.status_dict.values()):
 *             if not self._paper_trade_market_initialized:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":234
 *     @property
 *     def ready(self):
 *         if not self._order_book_tracker.ready:             # <<<<<<<<<<<<<<
 *             return False
 *         if all(self.status_dict.values()):
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":236
 *         if not self._order_book_tracker.ready:
 *             return False
 *         if all(self.status_dict.values()):             # <<<<<<<<<<<<<<
 *             if not self._paper_trade_market_initialized:
 *                 self.init_paper_trade_market()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_status_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_values); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":237
 *             return False
 *         if all(self.status_dict.values()):
 *             if not self._paper_trade_market_initialized:             # <<<<<<<<<<<<<<
 *                 self.init_paper_trade_market()
 *                 self._paper_trade_market_initialized = True
 */
    __pyx_t_3 = ((!(__pyx_v_self->_paper_trade_market_initialized != 0)) != 0);
    if (__pyx_t_3) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":238
 *         if all(self.status_dict.values()):
 *             if not self._paper_trade_market_initialized:
 *                 self.init_paper_trade_market()             # <<<<<<<<<<<<<<
 *                 self._paper_trade_market_initialized = True
 *             return True
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_paper_trade_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":239
 *             if not self._paper_trade_market_initialized:
 *                 self.init_paper_trade_market()
 *                 self._paper_trade_market_initialized = True             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
      __pyx_v_self->_paper_trade_market_initialized = 1;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":237
 *             return False
 *         if all(self.status_dict.values()):
 *             if not self._paper_trade_market_initialized:             # <<<<<<<<<<<<<<
 *                 self.init_paper_trade_market()
 *                 self._paper_trade_market_initialized = True
 */
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":240
 *                 self.init_paper_trade_market()
 *                 self._paper_trade_market_initialized = True
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":236
 *         if not self._order_book_tracker.ready:
 *             return False
 *         if all(self.status_dict.values()):             # <<<<<<<<<<<<<<
 *             if not self._paper_trade_market_initialized:
 *                 self.init_paper_trade_market()
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":242
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":233
 * 
 *     @property
 *     def ready(self):             # <<<<<<<<<<<<<<
 *         if not self._order_book_tracker.ready:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.ready.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":245
 * 
 *     @property
 *     def queued_orders(self) -> List[QueuedOrder]:             # <<<<<<<<<<<<<<
 *         return self._queued_orders
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":246
 *     @property
 *     def queued_orders(self) -> List[QueuedOrder]:
 *         return self._queued_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_queued_orders);
  __pyx_r = __pyx_v_self->_queued_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":245
 * 
 *     @property
 *     def queued_orders(self) -> List[QueuedOrder]:             # <<<<<<<<<<<<<<
 *         return self._queued_orders
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":249
 * 
 *     @property
 *     def limit_orders(self) -> List[LimitOrder]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrdersIterator map_it
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_single_trading_pair_collection_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_collection_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersRIterator __pyx_v_collection_rit;
  LimitOrder const *__pyx_v_cpp_limit_order_ptr;
  PyObject *__pyx_v_retval = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":256
 *             SingleTradingPairLimitOrdersRIterator collection_rit
 *             const CPPLimitOrder *cpp_limit_order_ptr
 *             list retval = []             # <<<<<<<<<<<<<<
 * 
 *         map_it = self._bid_limit_orders.begin()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retval = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":258
 *             list retval = []
 * 
 *         map_it = self._bid_limit_orders.begin()             # <<<<<<<<<<<<<<
 *         while map_it != self._bid_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 */
  __pyx_v_map_it = __pyx_v_self->_bid_limit_orders.begin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":259
 * 
 *         map_it = self._bid_limit_orders.begin()
 *         while map_it != self._bid_limit_orders.end():             # <<<<<<<<<<<<<<
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_rit = single_trading_pair_collection_ptr.rbegin()
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_map_it != __pyx_v_self->_bid_limit_orders.end()) != 0);
    if (!__pyx_t_2) break;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":260
 *         map_it = self._bid_limit_orders.begin()
 *         while map_it != self._bid_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *             collection_rit = single_trading_pair_collection_ptr.rbegin()
 *             while collection_rit != single_trading_pair_collection_ptr.rend():
 */
    __pyx_v_single_trading_pair_collection_ptr = (&(*__pyx_v_map_it).second);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":261
 *         while map_it != self._bid_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_rit = single_trading_pair_collection_ptr.rbegin()             # <<<<<<<<<<<<<<
 *             while collection_rit != single_trading_pair_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(collection_rit))
 */
    __pyx_v_collection_rit = __pyx_v_single_trading_pair_collection_ptr->rbegin();

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":262
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_rit = single_trading_pair_collection_ptr.rbegin()
 *             while collection_rit != single_trading_pair_collection_ptr.rend():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(collection_rit))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_collection_rit != __pyx_v_single_trading_pair_collection_ptr->rend()) != 0);
      if (!__pyx_t_2) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":263
 *             collection_rit = single_trading_pair_collection_ptr.rbegin()
 *             while collection_rit != single_trading_pair_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(collection_rit))             # <<<<<<<<<<<<<<
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_rit)
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_collection_rit));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":264
 *             while collection_rit != single_trading_pair_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(collection_rit))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))             # <<<<<<<<<<<<<<
 *                 inc(collection_rit)
 *             inc(map_it)
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_10hummingbot_4core_9data_type_11limit_order_c_create_limit_order_from_cpp_limit_order((*__pyx_v_cpp_limit_order_ptr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":265
 *                 cpp_limit_order_ptr = address(deref(collection_rit))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_rit)             # <<<<<<<<<<<<<<
 *             inc(map_it)
 * 
 */
      (void)((__pyx_v_collection_rit++));
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":266
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_rit)
 *             inc(map_it)             # <<<<<<<<<<<<<<
 * 
 *         map_it = self._ask_limit_orders.begin()
 */
    (void)((__pyx_v_map_it++));
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":268
 *             inc(map_it)
 * 
 *         map_it = self._ask_limit_orders.begin()             # <<<<<<<<<<<<<<
 *         while map_it != self._ask_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 */
  __pyx_v_map_it = __pyx_v_self->_ask_limit_orders.begin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":269
 * 
 *         map_it = self._ask_limit_orders.begin()
 *         while map_it != self._ask_limit_orders.end():             # <<<<<<<<<<<<<<
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_it = single_trading_pair_collection_ptr.begin()
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_map_it != __pyx_v_self->_ask_limit_orders.end()) != 0);
    if (!__pyx_t_2) break;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":270
 *         map_it = self._ask_limit_orders.begin()
 *         while map_it != self._ask_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *             collection_it = single_trading_pair_collection_ptr.begin()
 *             while collection_it != single_trading_pair_collection_ptr.end():
 */
    __pyx_v_single_trading_pair_collection_ptr = (&(*__pyx_v_map_it).second);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":271
 *         while map_it != self._ask_limit_orders.end():
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_it = single_trading_pair_collection_ptr.begin()             # <<<<<<<<<<<<<<
 *             while collection_it != single_trading_pair_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(collection_it))
 */
    __pyx_v_collection_it = __pyx_v_single_trading_pair_collection_ptr->begin();

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":272
 *             single_trading_pair_collection_ptr = address(deref(map_it).second)
 *             collection_it = single_trading_pair_collection_ptr.begin()
 *             while collection_it != single_trading_pair_collection_ptr.end():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(collection_it))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_collection_it != __pyx_v_single_trading_pair_collection_ptr->end()) != 0);
      if (!__pyx_t_2) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":273
 *             collection_it = single_trading_pair_collection_ptr.begin()
 *             while collection_it != single_trading_pair_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(collection_it))             # <<<<<<<<<<<<<<
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_it)
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_collection_it));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":274
 *             while collection_it != single_trading_pair_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(collection_it))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))             # <<<<<<<<<<<<<<
 *                 inc(collection_it)
 *             inc(map_it)
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_10hummingbot_4core_9data_type_11limit_order_c_create_limit_order_from_cpp_limit_order((*__pyx_v_cpp_limit_order_ptr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":275
 *                 cpp_limit_order_ptr = address(deref(collection_it))
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_it)             # <<<<<<<<<<<<<<
 *             inc(map_it)
 * 
 */
      (void)((__pyx_v_collection_it++));
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":276
 *                 retval.append(c_create_limit_order_from_cpp_limit_order(deref(cpp_limit_order_ptr)))
 *                 inc(collection_it)
 *             inc(map_it)             # <<<<<<<<<<<<<<
 * 
 *         return retval
 */
    (void)((__pyx_v_map_it++));
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":278
 *             inc(map_it)
 * 
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":249
 * 
 *     @property
 *     def limit_orders(self) -> List[LimitOrder]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrdersIterator map_it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":281
 * 
 *     @property
 *     def on_hold_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_v__on_hold_balances = NULL;
  PyObject *__pyx_v_limit_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":282
 *     @property
 *     def on_hold_balances(self) -> Dict[str, Decimal]:
 *         _on_hold_balances = defaultdict(Decimal)             # <<<<<<<<<<<<<<
 *         for limit_order in self.limit_orders:
 *             if limit_order.is_buy:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__on_hold_balances = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":283
 *     def on_hold_balances(self) -> Dict[str, Decimal]:
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:             # <<<<<<<<<<<<<<
 *             if limit_order.is_buy:
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 283, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 283, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_limit_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":284
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:
 *             if limit_order.is_buy:             # <<<<<<<<<<<<<<
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":285
 *         for limit_order in self.limit_orders:
 *             if limit_order.is_buy:
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price             # <<<<<<<<<<<<<<
 *             else:
 *                 _on_hold_balances[limit_order.base_currency] += limit_order.quantity
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v__on_hold_balances, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyNumber_Multiply(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v__on_hold_balances, __pyx_t_1, __pyx_t_8) < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":284
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:
 *             if limit_order.is_buy:             # <<<<<<<<<<<<<<
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price
 *             else:
 */
      goto __pyx_L5;
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":287
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price
 *             else:
 *                 _on_hold_balances[limit_order.base_currency] += limit_order.quantity             # <<<<<<<<<<<<<<
 *         return _on_hold_balances
 * 
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_base_currency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v__on_hold_balances, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_limit_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v__on_hold_balances, __pyx_t_1, __pyx_t_3) < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":283
 *     def on_hold_balances(self) -> Dict[str, Decimal]:
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:             # <<<<<<<<<<<<<<
 *             if limit_order.is_buy:
 *                 _on_hold_balances[limit_order.quote_currency] += limit_order.quantity * limit_order.price
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":288
 *             else:
 *                 _on_hold_balances[limit_order.base_currency] += limit_order.quantity
 *         return _on_hold_balances             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__on_hold_balances);
  __pyx_r = __pyx_v__on_hold_balances;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":281
 * 
 *     @property
 *     def on_hold_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         _on_hold_balances = defaultdict(Decimal)
 *         for limit_order in self.limit_orders:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.on_hold_balances.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__on_hold_balances);
  __Pyx_XDECREF(__pyx_v_limit_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":291
 * 
 *     @property
 *     def available_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         _available_balances = self._account_balances.copy()
 *         for trading_pair_str, balance in _available_balances.items():
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_v__available_balances = NULL;
  PyObject *__pyx_v_trading_pair_str = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_balance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":292
 *     @property
 *     def available_balances(self) -> Dict[str, Decimal]:
 *         _available_balances = self._account_balances.copy()             # <<<<<<<<<<<<<<
 *         for trading_pair_str, balance in _available_balances.items():
 *             _available_balances[trading_pair_str] -= self.on_hold_balances[trading_pair_str]
 */
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_v_self->__pyx_base.__pyx_base._account_balances); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__available_balances = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":293
 *     def available_balances(self) -> Dict[str, Decimal]:
 *         _available_balances = self._account_balances.copy()
 *         for trading_pair_str, balance in _available_balances.items():             # <<<<<<<<<<<<<<
 *             _available_balances[trading_pair_str] -= self.on_hold_balances[trading_pair_str]
 *         return _available_balances
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v__available_balances == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 293, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v__available_balances, 1, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_trading_pair_str, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_balance, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":294
 *         _available_balances = self._account_balances.copy()
 *         for trading_pair_str, balance in _available_balances.items():
 *             _available_balances[trading_pair_str] -= self.on_hold_balances[trading_pair_str]             # <<<<<<<<<<<<<<
 *         return _available_balances
 * 
 */
    if (unlikely(__pyx_v__available_balances == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 294, __pyx_L1_error)
    }
    __Pyx_INCREF(__pyx_v__available_balances);
    __pyx_t_8 = __pyx_v__available_balances;
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __pyx_t_6 = __pyx_v_trading_pair_str;
    if (unlikely(__pyx_t_8 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 294, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_on_hold_balances); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_InPlaceSubtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__pyx_t_8 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 294, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_t_8, __pyx_t_6, __pyx_t_9) < 0)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":295
 *         for trading_pair_str, balance in _available_balances.items():
 *             _available_balances[trading_pair_str] -= self.on_hold_balances[trading_pair_str]
 *         return _available_balances             # <<<<<<<<<<<<<<
 * 
 *     # </editor-fold>
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__available_balances);
  __pyx_r = __pyx_v__available_balances;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":291
 * 
 *     @property
 *     def available_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         _available_balances = self._account_balances.copy()
 *         for trading_pair_str, balance in _available_balances.items():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.available_balances.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__available_balances);
  __Pyx_XDECREF(__pyx_v_trading_pair_str);
  __Pyx_XDECREF(__pyx_v_balance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":299
 *     # </editor-fold>
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_start(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c_start", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":300
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 *         ExchangeBase.c_start(self, clock, timestamp)             # <<<<<<<<<<<<<<
 * 
 *     async def start_network(self):
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":299
 *     # </editor-fold>
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":302
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         self._order_book_tracker.start()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_9start_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_9start_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8start_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_8start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 302, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_10generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_start_network, __pyx_n_s_PaperTradeExchange_start_network, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 302, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":303
 * 
 *     async def start_network(self):
 *         await self.stop_network()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.start()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 303, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 303, __pyx_L1_error)
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":304
 *     async def start_network(self):
 *         await self.stop_network()
 *         self._order_book_tracker.start()             # <<<<<<<<<<<<<<
 * 
 *     async def stop_network(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":302
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         self._order_book_tracker.start()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":306
 *         self._order_book_tracker.start()
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12stop_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12stop_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 306, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_stop_network, __pyx_n_s_PaperTradeExchange_stop_network, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 306, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":307
 * 
 *     async def stop_network(self):
 *         self._order_book_tracker.stop()             # <<<<<<<<<<<<<<
 * 
 *     async def check_network(self) -> NetworkStatus:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":306
 *         self._order_book_tracker.start()
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":309
 *         self._order_book_tracker.stop()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_15check_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_15check_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14check_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14check_network(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 309, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_check_network, __pyx_n_s_PaperTradeExchange_check_network, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 309, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":310
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         return NetworkStatus.CONNECTED             # <<<<<<<<<<<<<<
 * 
 *     cdef c_set_balance(self, str currency, object balance):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":309
 *         self._order_book_tracker.stop()
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":312
 *         return NetworkStatus.CONNECTED
 * 
 *     cdef c_set_balance(self, str currency, object balance):             # <<<<<<<<<<<<<<
 *         self._account_balances[currency.upper()] = Decimal(balance)
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_set_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency, PyObject *__pyx_v_balance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("c_set_balance", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":313
 * 
 *     cdef c_set_balance(self, str currency, object balance):
 *         self._account_balances[currency.upper()] = Decimal(balance)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_balance(self, str currency):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_balance) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_balance);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 313, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_currency, __pyx_n_s_upper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_t_2, __pyx_t_1) < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":312
 *         return NetworkStatus.CONNECTED
 * 
 *     cdef c_set_balance(self, str currency, object balance):             # <<<<<<<<<<<<<<
 *         self._account_balances[currency.upper()] = Decimal(balance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_set_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":315
 *         self._account_balances[currency.upper()] = Decimal(balance)
 * 
 *     cdef object c_get_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         if currency.upper() not in self._account_balances:
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("c_get_balance", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":316
 * 
 *     cdef object c_get_balance(self, str currency):
 *         if currency.upper() not in self._account_balances:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 *             return Decimal(0.0)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_currency, __pyx_n_s_upper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 316, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_self->__pyx_base.__pyx_base._account_balances, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":317
 *     cdef object c_get_balance(self, str currency):
 *         if currency.upper() not in self._account_balances:
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")             # <<<<<<<<<<<<<<
 *             return Decimal(0.0)
 *         return self._account_balances[currency.upper()]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_Account_balance_does_not_have_as);
    __pyx_t_7 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_Account_balance_does_not_have_as);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Account_balance_does_not_have_as);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_currency, __pyx_n_s_upper); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_6 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u__10);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__10);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__10);
    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":318
 *         if currency.upper() not in self._account_balances:
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 *             return Decimal(0.0)             # <<<<<<<<<<<<<<
 *         return self._account_balances[currency.upper()]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_float_0_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_0_0);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":316
 * 
 *     cdef object c_get_balance(self, str currency):
 *         if currency.upper() not in self._account_balances:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 *             return Decimal(0.0)
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":319
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 *             return Decimal(0.0)
 *         return self._account_balances[currency.upper()]             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 319, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_currency, __pyx_n_s_upper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":315
 *         self._account_balances[currency.upper()] = Decimal(balance)
 * 
 *     cdef object c_get_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         if currency.upper() not in self._account_balances:
 *             self.logger().warning(f"Account balance does not have asset {currency.upper()}.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":321
 *         return self._account_balances[currency.upper()]
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_tick(self, timestamp)
 *         self.c_process_market_orders()
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":322
 * 
 *     cdef c_tick(self, double timestamp):
 *         ExchangeBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         self.c_process_market_orders()
 *         self.c_process_crossed_limit_orders()
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":323
 *     cdef c_tick(self, double timestamp):
 *         ExchangeBase.c_tick(self, timestamp)
 *         self.c_process_market_orders()             # <<<<<<<<<<<<<<
 *         self.c_process_crossed_limit_orders()
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_market_orders(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":324
 *         ExchangeBase.c_tick(self, timestamp)
 *         self.c_process_market_orders()
 *         self.c_process_crossed_limit_orders()             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_buy(self,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_crossed_limit_orders(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":321
 *         return self._account_balances[currency.upper()]
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_tick(self, timestamp)
 *         self.c_process_market_orders()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":326
 *         self.c_process_crossed_limit_orders()
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair_str,
 *                    object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__11;
  PyObject *__pyx_v_price = __pyx_k__12;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_quote_asset = 0;
  std::string __pyx_v_cpp_order_id;
  std::string __pyx_v_cpp_trading_pair_str;
  std::string __pyx_v_cpp_base_asset;
  std::string __pyx_v_cpp_quote_asset;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_limit_orders_collection_ptr;
  std::pair<std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator,bool>  __pyx_v_insert_result;
  PyObject *__pyx_v_quantized_price = NULL;
  PyObject *__pyx_v_quantized_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_t_11;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders __pyx_t_12;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersPair __pyx_t_13;
  std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("c_buy", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":332
 *                    object price=s_decimal_0,
 *                    dict kwargs={}):
 *         if trading_pair_str not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 * 
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair_str, __pyx_v_self->_trading_pairs, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":333
 *                    dict kwargs={}):
 *         if trading_pair_str not in self._trading_pairs:
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Trading_pair);
    __pyx_t_4 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_Trading_pair);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Trading_pair);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_does_not_existing_in_current_da);
    __pyx_t_4 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_does_not_existing_in_current_da);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_does_not_existing_in_current_da);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 333, __pyx_L1_error)

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":332
 *                    object price=s_decimal_0,
 *                    dict kwargs={}):
 *         if trading_pair_str not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 * 
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":336
 * 
 *         cdef:
 *             str order_id = self.random_order_id("buy", trading_pair_str)             # <<<<<<<<<<<<<<
 *             str quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *             string cpp_order_id = order_id.encode("utf8")
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_random_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_buy, __pyx_v_trading_pair_str};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_buy, __pyx_v_trading_pair_str};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_buy);
    __Pyx_GIVEREF(__pyx_n_u_buy);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_n_u_buy);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_trading_pair_str);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 336, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":337
 *         cdef:
 *             str order_id = self.random_order_id("buy", trading_pair_str)
 *             str quote_asset = self._trading_pairs[trading_pair_str].quote_asset             # <<<<<<<<<<<<<<
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 337, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 337, __pyx_L1_error)
  __pyx_v_quote_asset = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":338
 *             str order_id = self.random_order_id("buy", trading_pair_str)
 *             str quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *             string cpp_order_id = order_id.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = self._trading_pairs[trading_pair_str].base_asset.encode("utf8")
 */
  if (unlikely(__pyx_v_order_id == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 338, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_order_id = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":339
 *             str quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_base_asset = self._trading_pairs[trading_pair_str].base_asset.encode("utf8")
 *             string cpp_quote_asset = quote_asset.encode("utf8")
 */
  if (unlikely(__pyx_v_trading_pair_str == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_trading_pair_str = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":340
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = self._trading_pairs[trading_pair_str].base_asset.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_quote_asset = quote_asset.encode("utf8")
 *             LimitOrdersIterator map_it
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_utf8);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_base_asset = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":341
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = self._trading_pairs[trading_pair_str].base_asset.encode("utf8")
 *             string cpp_quote_asset = quote_asset.encode("utf8")             # <<<<<<<<<<<<<<
 *             LimitOrdersIterator map_it
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL
 */
  if (unlikely(__pyx_v_quote_asset == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_quote_asset = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":343
 *             string cpp_quote_asset = quote_asset.encode("utf8")
 *             LimitOrdersIterator map_it
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL             # <<<<<<<<<<<<<<
 *             pair[LimitOrders.iterator, cppbool] insert_result
 * 
 */
  __pyx_v_limit_orders_collection_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":347
 * 
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)
 *                            if order_type is OrderType.LIMIT             # <<<<<<<<<<<<<<
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_v_order_type == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if ((__pyx_t_2 != 0)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":346
 *             pair[LimitOrders.iterator, cppbool] insert_result
 * 
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)             # <<<<<<<<<<<<<<
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair_str, __pyx_v_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __pyx_t_9;
    __pyx_t_9 = 0;
  } else {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":348
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)             # <<<<<<<<<<<<<<
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __pyx_t_9;
    __pyx_t_9 = 0;
  }
  __pyx_v_quantized_price = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":349
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair_str, __pyx_v_amount, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_quantized_amount = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":350
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 *                                                    quantized_amount))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_v_order_type == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":351
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:
 */
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":352
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 *                                                    quantized_amount))             # <<<<<<<<<<<<<<
 *         elif order_type is OrderType.LIMIT:
 * 
 */
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_order_id);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_True);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_trading_pair_str);
    __Pyx_INCREF(__pyx_v_quantized_amount);
    __Pyx_GIVEREF(__pyx_v_quantized_amount);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_quantized_amount);
    __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":351
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:
 */
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder), __pyx_t_6, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_Append(__pyx_v_self->_queued_orders, __pyx_t_9); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":350
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 *                                                    quantized_amount))
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":353
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 * 
 *             map_it = self._bid_limit_orders.find(cpp_trading_pair_str)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_1 = (__pyx_v_order_type == __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":355
 *         elif order_type is OrderType.LIMIT:
 * 
 *             map_it = self._bid_limit_orders.find(cpp_trading_pair_str)             # <<<<<<<<<<<<<<
 * 
 *             if map_it == self._bid_limit_orders.end():
 */
    __pyx_v_map_it = __pyx_v_self->_bid_limit_orders.find(__pyx_v_cpp_trading_pair_str);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":357
 *             map_it = self._bid_limit_orders.find(cpp_trading_pair_str)
 * 
 *             if map_it == self._bid_limit_orders.end():             # <<<<<<<<<<<<<<
 *                 insert_result = self._bid_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 */
    __pyx_t_2 = ((__pyx_v_map_it == __pyx_v_self->_bid_limit_orders.end()) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":359
 *             if map_it == self._bid_limit_orders.end():
 *                 insert_result = self._bid_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))             # <<<<<<<<<<<<<<
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 */
      try {
        __pyx_t_12 = __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 359, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":358
 * 
 *             if map_it == self._bid_limit_orders.end():
 *                 insert_result = self._bid_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first
 */
      try {
        __pyx_t_13 = __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersPair(__pyx_v_cpp_trading_pair_str, __pyx_t_12);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 358, __pyx_L1_error)
      }
      __pyx_v_insert_result = ((std::pair<std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator,bool> )__pyx_v_self->_bid_limit_orders.insert(__pyx_t_13));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":360
 *                 insert_result = self._bid_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first             # <<<<<<<<<<<<<<
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(
 */
      __pyx_t_14 = __pyx_v_insert_result.first;
      __pyx_v_map_it = __pyx_t_14;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":357
 *             map_it = self._bid_limit_orders.find(cpp_trading_pair_str)
 * 
 *             if map_it == self._bid_limit_orders.end():             # <<<<<<<<<<<<<<
 *                 insert_result = self._bid_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 */
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":361
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(
 *                 cpp_order_id,
 */
    __pyx_v_limit_orders_collection_ptr = (&(*__pyx_v_map_it).second);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":362
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(             # <<<<<<<<<<<<<<
 *                 cpp_order_id,
 *                 cpp_trading_pair_str,
 */
    try {
      __pyx_v_limit_orders_collection_ptr->insert(LimitOrder(__pyx_v_cpp_order_id, __pyx_v_cpp_trading_pair_str, 1, __pyx_v_cpp_base_asset, __pyx_v_cpp_quote_asset, ((PyObject *)__pyx_v_quantized_price), ((PyObject *)__pyx_v_quantized_amount)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 362, __pyx_L1_error)
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":353
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, True, trading_pair_str,
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 * 
 *             map_it = self._bid_limit_orders.find(cpp_trading_pair_str)
 */
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":371
 *                 <PyObject *> quantized_amount
 *             ))
 *         safe_ensure_future(self.trigger_event_async(             # <<<<<<<<<<<<<<
 *             self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *             BuyOrderCreatedEvent(self._current_timestamp,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trigger_event_async); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":372
 *             ))
 *         safe_ensure_future(self.trigger_event_async(
 *             self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             BuyOrderCreatedEvent(self._current_timestamp,
 *                                  order_type,
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":373
 *         safe_ensure_future(self.trigger_event_async(
 *             self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *             BuyOrderCreatedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                  order_type,
 *                                  trading_pair_str,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":378
 *                                  quantized_amount,
 *                                  quantized_price,
 *                                  order_id)))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  __pyx_t_19 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_17, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_17)) {
    PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_v_order_type, __pyx_v_trading_pair_str, __pyx_v_quantized_amount, __pyx_v_quantized_price, __pyx_v_order_id};
    __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
    PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_v_order_type, __pyx_v_trading_pair_str, __pyx_v_quantized_amount, __pyx_v_quantized_price, __pyx_v_order_id};
    __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_19) {
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_18);
    __Pyx_INCREF(__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_v_order_type);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_8, __pyx_v_trading_pair_str);
    __Pyx_INCREF(__pyx_v_quantized_amount);
    __Pyx_GIVEREF(__pyx_v_quantized_amount);
    PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_8, __pyx_v_quantized_amount);
    __Pyx_INCREF(__pyx_v_quantized_price);
    __Pyx_GIVEREF(__pyx_v_quantized_price);
    PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_8, __pyx_v_quantized_price);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_8, __pyx_v_order_id);
    __pyx_t_18 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_20, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_17) {
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_17); __pyx_t_17 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_t_16);
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":379
 *                                  quantized_price,
 *                                  order_id)))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_sell(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":326
 *         self.c_process_crossed_limit_orders()
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair_str,
 *                    object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_quantized_price);
  __Pyx_XDECREF(__pyx_v_quantized_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":381
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair_str,
 *                     object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__13;
  PyObject *__pyx_v_price = __pyx_k__14;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_base_asset = 0;
  std::string __pyx_v_cpp_order_id;
  std::string __pyx_v_cpp_trading_pair_str;
  std::string __pyx_v_cpp_base_asset;
  std::string __pyx_v_cpp_quote_asset;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_limit_orders_collection_ptr;
  std::pair<std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator,bool>  __pyx_v_insert_result;
  PyObject *__pyx_v_quantized_price = NULL;
  PyObject *__pyx_v_quantized_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_t_11;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders __pyx_t_12;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersPair __pyx_t_13;
  std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("c_sell", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":388
 *                     dict kwargs={}):
 * 
 *         if trading_pair_str not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 *         cdef:
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 388, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair_str, __pyx_v_self->_trading_pairs, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":389
 * 
 *         if trading_pair_str not in self._trading_pairs:
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = self.random_order_id("sell", trading_pair_str)
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Trading_pair);
    __pyx_t_4 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_Trading_pair);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Trading_pair);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_does_not_existing_in_current_da);
    __pyx_t_4 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_does_not_existing_in_current_da);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_does_not_existing_in_current_da);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 389, __pyx_L1_error)

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":388
 *                     dict kwargs={}):
 * 
 *         if trading_pair_str not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 *         cdef:
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":391
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 *         cdef:
 *             str order_id = self.random_order_id("sell", trading_pair_str)             # <<<<<<<<<<<<<<
 *             str base_asset = self._trading_pairs[trading_pair_str].base_asset
 *             string cpp_order_id = order_id.encode("utf8")
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_random_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_sell, __pyx_v_trading_pair_str};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_sell, __pyx_v_trading_pair_str};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_sell);
    __Pyx_GIVEREF(__pyx_n_u_sell);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_n_u_sell);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_trading_pair_str);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":392
 *         cdef:
 *             str order_id = self.random_order_id("sell", trading_pair_str)
 *             str base_asset = self._trading_pairs[trading_pair_str].base_asset             # <<<<<<<<<<<<<<
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_v_base_asset = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":393
 *             str order_id = self.random_order_id("sell", trading_pair_str)
 *             str base_asset = self._trading_pairs[trading_pair_str].base_asset
 *             string cpp_order_id = order_id.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = base_asset.encode("utf8")
 */
  if (unlikely(__pyx_v_order_id == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 393, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_order_id = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":394
 *             str base_asset = self._trading_pairs[trading_pair_str].base_asset
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_base_asset = base_asset.encode("utf8")
 *             string cpp_quote_asset = self._trading_pairs[trading_pair_str].quote_asset.encode("utf8")
 */
  if (unlikely(__pyx_v_trading_pair_str == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 394, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_trading_pair_str = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":395
 *             string cpp_order_id = order_id.encode("utf8")
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = base_asset.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_quote_asset = self._trading_pairs[trading_pair_str].quote_asset.encode("utf8")
 *             LimitOrdersIterator map_it
 */
  if (unlikely(__pyx_v_base_asset == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __pyx_t_6 = PyUnicode_AsUTF8String(__pyx_v_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_base_asset = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":396
 *             string cpp_trading_pair_str = trading_pair_str.encode("utf8")
 *             string cpp_base_asset = base_asset.encode("utf8")
 *             string cpp_quote_asset = self._trading_pairs[trading_pair_str].quote_asset.encode("utf8")             # <<<<<<<<<<<<<<
 *             LimitOrdersIterator map_it
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_utf8);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cpp_quote_asset = __pyx_t_10;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":398
 *             string cpp_quote_asset = self._trading_pairs[trading_pair_str].quote_asset.encode("utf8")
 *             LimitOrdersIterator map_it
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL             # <<<<<<<<<<<<<<
 *             pair[LimitOrders.iterator, cppbool] insert_result
 * 
 */
  __pyx_v_limit_orders_collection_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":402
 * 
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)
 *                            if order_type is OrderType.LIMIT             # <<<<<<<<<<<<<<
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_v_order_type == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if ((__pyx_t_2 != 0)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":401
 *             pair[LimitOrders.iterator, cppbool] insert_result
 * 
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)             # <<<<<<<<<<<<<<
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair_str, __pyx_v_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __pyx_t_9;
    __pyx_t_9 = 0;
  } else {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":403
 *         quantized_price = (self.c_quantize_order_price(trading_pair_str, price)
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)             # <<<<<<<<<<<<<<
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __pyx_t_9;
    __pyx_t_9 = 0;
  }
  __pyx_v_quantized_price = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":404
 *                            if order_type is OrderType.LIMIT
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair_str, __pyx_v_amount, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_quantized_amount = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":405
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 *                                                    quantized_amount))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_v_order_type == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":406
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:
 */
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":407
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 *                                                    quantized_amount))             # <<<<<<<<<<<<<<
 *         elif order_type is OrderType.LIMIT:
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)
 */
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_order_id);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_False);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_trading_pair_str);
    __Pyx_INCREF(__pyx_v_quantized_amount);
    __Pyx_GIVEREF(__pyx_v_quantized_amount);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_quantized_amount);
    __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":406
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:
 */
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder), __pyx_t_6, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_Append(__pyx_v_self->_queued_orders, __pyx_t_9); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":405
 *                            else s_decimal_0)
 *         quantized_amount = self.c_quantize_order_amount(trading_pair_str, amount)
 *         if order_type is OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 *                                                    quantized_amount))
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":408
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_1 = (__pyx_v_order_type == __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":409
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)             # <<<<<<<<<<<<<<
 * 
 *             if map_it == self._ask_limit_orders.end():
 */
    __pyx_v_map_it = __pyx_v_self->_ask_limit_orders.find(__pyx_v_cpp_trading_pair_str);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":411
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)
 * 
 *             if map_it == self._ask_limit_orders.end():             # <<<<<<<<<<<<<<
 *                 insert_result = self._ask_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 */
    __pyx_t_2 = ((__pyx_v_map_it == __pyx_v_self->_ask_limit_orders.end()) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":413
 *             if map_it == self._ask_limit_orders.end():
 *                 insert_result = self._ask_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))             # <<<<<<<<<<<<<<
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 */
      try {
        __pyx_t_12 = __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 413, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":412
 * 
 *             if map_it == self._ask_limit_orders.end():
 *                 insert_result = self._ask_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,             # <<<<<<<<<<<<<<
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first
 */
      try {
        __pyx_t_13 = __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersPair(__pyx_v_cpp_trading_pair_str, __pyx_t_12);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 412, __pyx_L1_error)
      }
      __pyx_v_insert_result = ((std::pair<std::unordered_map<std::string,__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders> ::iterator,bool> )__pyx_v_self->_ask_limit_orders.insert(__pyx_t_13));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":414
 *                 insert_result = self._ask_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first             # <<<<<<<<<<<<<<
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(
 */
      __pyx_t_14 = __pyx_v_insert_result.first;
      __pyx_v_map_it = __pyx_t_14;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":411
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)
 * 
 *             if map_it == self._ask_limit_orders.end():             # <<<<<<<<<<<<<<
 *                 insert_result = self._ask_limit_orders.insert(LimitOrdersPair(cpp_trading_pair_str,
 *                                                                               SingleTradingPairLimitOrders()))
 */
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":415
 *                                                                               SingleTradingPairLimitOrders()))
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(
 *                 cpp_order_id,
 */
    __pyx_v_limit_orders_collection_ptr = (&(*__pyx_v_map_it).second);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":416
 *                 map_it = insert_result.first
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             limit_orders_collection_ptr.insert(CPPLimitOrder(             # <<<<<<<<<<<<<<
 *                 cpp_order_id,
 *                 cpp_trading_pair_str,
 */
    try {
      __pyx_v_limit_orders_collection_ptr->insert(LimitOrder(__pyx_v_cpp_order_id, __pyx_v_cpp_trading_pair_str, 0, __pyx_v_cpp_base_asset, __pyx_v_cpp_quote_asset, ((PyObject *)__pyx_v_quantized_price), ((PyObject *)__pyx_v_quantized_amount)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 416, __pyx_L1_error)
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":408
 *             self._queued_orders.append(QueuedOrder(self._current_timestamp, order_id, False, trading_pair_str,
 *                                                    quantized_amount))
 *         elif order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *             map_it = self._ask_limit_orders.find(cpp_trading_pair_str)
 * 
 */
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":425
 *                 <PyObject *> quantized_amount
 *             ))
 *         safe_ensure_future(self.trigger_event_async(             # <<<<<<<<<<<<<<
 *             self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *             SellOrderCreatedEvent(self._current_timestamp,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trigger_event_async); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":426
 *             ))
 *         safe_ensure_future(self.trigger_event_async(
 *             self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             SellOrderCreatedEvent(self._current_timestamp,
 *                                   order_type,
 */
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":427
 *         safe_ensure_future(self.trigger_event_async(
 *             self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *             SellOrderCreatedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                   order_type,
 *                                   trading_pair_str,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":432
 *                                   quantized_amount,
 *                                   quantized_price,
 *                                   order_id)))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  __pyx_t_19 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_17, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_17)) {
    PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_v_order_type, __pyx_v_trading_pair_str, __pyx_v_quantized_amount, __pyx_v_quantized_price, __pyx_v_order_id};
    __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
    PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_v_order_type, __pyx_v_trading_pair_str, __pyx_v_quantized_amount, __pyx_v_quantized_price, __pyx_v_order_id};
    __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_19) {
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_18);
    __Pyx_INCREF(__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_v_order_type);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_8, __pyx_v_trading_pair_str);
    __Pyx_INCREF(__pyx_v_quantized_amount);
    __Pyx_GIVEREF(__pyx_v_quantized_amount);
    PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_8, __pyx_v_quantized_amount);
    __Pyx_INCREF(__pyx_v_quantized_price);
    __Pyx_GIVEREF(__pyx_v_quantized_price);
    PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_8, __pyx_v_quantized_price);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_8, __pyx_v_order_id);
    __pyx_t_18 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_20, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_17) {
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_17); __pyx_t_17 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_t_16);
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":433
 *                                   quantized_price,
 *                                   order_id)))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef c_execute_buy(self, str order_id, str trading_pair, object amount):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":381
 *         return order_id
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair_str,
 *                     object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quantized_price);
  __Pyx_XDECREF(__pyx_v_quantized_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":446
 *         buy_entries = order_book.simulate_buy(amount)
 *         # Calculate the quote currency needed, including fees.
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         if total_quote_needed > quote_balance:
 */

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 446, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_2generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_PaperTradeExchange_c_execute_buy, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_execute_buy.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_2generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 446, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) { __Pyx_RaiseClosureNameError("buy_entries"); __PYX_ERR(0, 446, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 446, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_row, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_row, __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_row, __pyx_n_s_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 446, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_5generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":459
 * 
 *         # Calculate the base currency acquired, including fees.
 *         total_base_acquired = Decimal(sum(row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset, quote_balance - total_quote_needed)
 */

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 459, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_5generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_PaperTradeExchange_c_execute_buy, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_execute_buy.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_5generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 459, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) { __Pyx_RaiseClosureNameError("buy_entries"); __PYX_ERR(0, 459, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_buy_entries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 459, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 459, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 459, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_row, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_row, __pyx_n_s_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 459, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":435
 *         return order_id
 * 
 *     cdef c_execute_buy(self, str order_id, str trading_pair, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *__pyx_cur_scope;
  PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_base_asset = 0;
  PyObject *__pyx_v_quote_balance = 0;
  PyObject *__pyx_v_base_balance = 0;
  PyObject *__pyx_v_config = NULL;
  PyObject *__pyx_v_order_book = NULL;
  PyObject *__pyx_v_total_quote_needed = NULL;
  PyObject *__pyx_v_total_base_acquired = NULL;
  PyObject *__pyx_v_fees = NULL;
  PyObject *__pyx_v_order_filled_events = NULL;
  PyObject *__pyx_v_order_filled_event = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("c_execute_buy", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 435, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":437
 *     cdef c_execute_buy(self, str order_id, str trading_pair, object amount):
 *         cdef:
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset             # <<<<<<<<<<<<<<
 *             str base_asset = self._trading_pairs[trading_pair].base_asset
 *             object quote_balance = self.c_get_balance(quote_asset)
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 437, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_v_quote_asset = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":438
 *         cdef:
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset
 *             str base_asset = self._trading_pairs[trading_pair].base_asset             # <<<<<<<<<<<<<<
 *             object quote_balance = self.c_get_balance(quote_asset)
 *             object base_balance = self.c_get_balance(base_asset)
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 438, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 438, __pyx_L1_error)
  __pyx_v_base_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":439
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset
 *             str base_asset = self._trading_pairs[trading_pair].base_asset
 *             object quote_balance = self.c_get_balance(quote_asset)             # <<<<<<<<<<<<<<
 *             object base_balance = self.c_get_balance(base_asset)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":440
 *             str base_asset = self._trading_pairs[trading_pair].base_asset
 *             object quote_balance = self.c_get_balance(quote_asset)
 *             object base_balance = self.c_get_balance(base_asset)             # <<<<<<<<<<<<<<
 * 
 *         config = self._config
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":442
 *             object base_balance = self.c_get_balance(base_asset)
 * 
 *         config = self._config             # <<<<<<<<<<<<<<
 *         order_book = self.order_books[trading_pair]
 *         buy_entries = order_book.simulate_buy(amount)
 */
  __pyx_t_1 = __pyx_v_self->_config;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_config = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":443
 * 
 *         config = self._config
 *         order_book = self.order_books[trading_pair]             # <<<<<<<<<<<<<<
 *         buy_entries = order_book.simulate_buy(amount)
 *         # Calculate the quote currency needed, including fees.
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_order_book = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":444
 *         config = self._config
 *         order_book = self.order_books[trading_pair]
 *         buy_entries = order_book.simulate_buy(amount)             # <<<<<<<<<<<<<<
 *         # Calculate the quote currency needed, including fees.
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book, __pyx_n_s_simulate_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_amount);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_buy_entries = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":446
 *         buy_entries = order_book.simulate_buy(amount)
 *         # Calculate the quote currency needed, including fees.
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         if total_quote_needed > quote_balance:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_total_quote_needed = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":448
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))
 * 
 *         if total_quote_needed > quote_balance:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "
 *                                   f"{quote_balance} {quote_asset} available vs. "
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_total_quote_needed, __pyx_v_quote_balance, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":449
 * 
 *         if total_quote_needed > quote_balance:
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "             # <<<<<<<<<<<<<<
 *                                   f"{quote_balance} {quote_asset} available vs. "
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Insufficient);
    __pyx_t_6 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Insufficient);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Insufficient);
    __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_balance_available_for_buy_order);
    __pyx_t_6 += 34;
    __Pyx_GIVEREF(__pyx_kp_u_balance_available_for_buy_order);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_balance_available_for_buy_order);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":450
 *         if total_quote_needed > quote_balance:
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "
 *                                   f"{quote_balance} {quote_asset} available vs. "             # <<<<<<<<<<<<<<
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")
 *             self.c_trigger_event(
 */
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__15);
    __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_available_vs);
    __pyx_t_6 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_available_vs);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_available_vs);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":451
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "
 *                                   f"{quote_balance} {quote_asset} available vs. "
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_total_quote_needed, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__15);
    __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_required_for_the_order);
    __pyx_t_6 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_required_for_the_order);
    PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u_required_for_the_order);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":449
 * 
 *         if total_quote_needed > quote_balance:
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "             # <<<<<<<<<<<<<<
 *                                   f"{quote_balance} {quote_asset} available vs. "
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")
 */
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":453
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 *             )
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":454
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)             # <<<<<<<<<<<<<<
 *             )
 *             return
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_3, __pyx_v_order_id, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_3, __pyx_v_order_id, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":452
 *                                   f"{quote_balance} {quote_asset} available vs. "
 *                                   f"{total_quote_needed} {quote_asset} required for the order.")
 *             self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":456
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 *             )
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Calculate the base currency acquired, including fees.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":448
 *         total_quote_needed = Decimal(sum(row.price * row.amount for row in buy_entries))
 * 
 *         if total_quote_needed > quote_balance:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Insufficient {quote_asset} balance available for buy order. "
 *                                   f"{quote_balance} {quote_asset} available vs. "
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":459
 * 
 *         # Calculate the base currency acquired, including fees.
 *         total_base_acquired = Decimal(sum(row.amount for row in buy_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset, quote_balance - total_quote_needed)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13c_execute_buy_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_base_acquired = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":461
 *         total_base_acquired = Decimal(sum(row.amount for row in buy_entries))
 * 
 *         self.c_set_balance(quote_asset, quote_balance - total_quote_needed)             # <<<<<<<<<<<<<<
 *         self.c_set_balance(base_asset, base_balance + total_base_acquired)
 * 
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_quote_balance, __pyx_v_total_quote_needed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_quote_asset, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":462
 * 
 *         self.c_set_balance(quote_asset, quote_balance - total_quote_needed)
 *         self.c_set_balance(base_asset, base_balance + total_base_acquired)             # <<<<<<<<<<<<<<
 * 
 *         # add fee
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_base_balance, __pyx_v_total_base_acquired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_base_asset, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":465
 * 
 *         # add fee
 *         fees = estimate_fee(self.name, False)             # <<<<<<<<<<<<<<
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_9, Py_False};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_9, Py_False};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_t_9);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, Py_False);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_fees = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":467
 *         fees = estimate_fee(self.name, False)
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(             # <<<<<<<<<<<<<<
 *             self._current_timestamp, order_id, trading_pair, TradeType.BUY, OrderType.MARKET,
 *             fees, buy_entries
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_order_filled_events_from_order_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":468
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 *             self._current_timestamp, order_id, trading_pair, TradeType.BUY, OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             fees, buy_entries
 *         )
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_BUY); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":469
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 *             self._current_timestamp, order_id, trading_pair, TradeType.BUY, OrderType.MARKET,
 *             fees, buy_entries             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[8] = {__pyx_t_9, __pyx_t_2, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_t_11, __pyx_t_1, __pyx_v_fees, __pyx_cur_scope->__pyx_v_buy_entries};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[8] = {__pyx_t_9, __pyx_t_2, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_t_11, __pyx_t_1, __pyx_v_fees, __pyx_cur_scope->__pyx_v_buy_entries};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(7+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_10, __pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 3+__pyx_t_10, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 4+__pyx_t_10, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_fees);
    __Pyx_GIVEREF(__pyx_v_fees);
    PyTuple_SET_ITEM(__pyx_t_12, 5+__pyx_t_10, __pyx_v_fees);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_buy_entries);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_buy_entries);
    PyTuple_SET_ITEM(__pyx_t_12, 6+__pyx_t_10, __pyx_cur_scope->__pyx_v_buy_entries);
    __pyx_t_2 = 0;
    __pyx_t_11 = 0;
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_filled_events = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":472
 *         )
 * 
 *         for order_filled_event in order_filled_events:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_order_filled_events)) || PyTuple_CheckExact(__pyx_v_order_filled_events)) {
    __pyx_t_4 = __pyx_v_order_filled_events; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_order_filled_events); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 472, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_13)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 472, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_13(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 472, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_order_filled_event, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":473
 * 
 *         for order_filled_event in order_filled_events:
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)             # <<<<<<<<<<<<<<
 * 
 *         self.c_trigger_event(
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_v_order_filled_event); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":472
 *         )
 * 
 *         for order_filled_event in order_filled_events:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":476
 * 
 *         self.c_trigger_event(
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             BuyOrderCompletedEvent(self._current_timestamp,
 *                                    order_id,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_4); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":477
 *         self.c_trigger_event(
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,
 *             BuyOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                    order_id,
 *                                    base_asset,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":481
 *                                    base_asset,
 *                                    quote_asset,
 *                                    base_asset if config.buy_fees_asset is AssetType.BASE_CURRENCY else quote_asset,             # <<<<<<<<<<<<<<
 *                                    total_base_acquired,
 *                                    total_quote_needed,
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_buy_fees_asset); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BASE_CURRENCY); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_11 == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if ((__pyx_t_5 != 0)) {
    __Pyx_INCREF(__pyx_v_base_asset);
    __pyx_t_1 = __pyx_v_base_asset;
  } else {
    __Pyx_INCREF(__pyx_v_quote_asset);
    __pyx_t_1 = __pyx_v_quote_asset;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":484
 *                                    total_base_acquired,
 *                                    total_quote_needed,
 *                                    s_decimal_0,             # <<<<<<<<<<<<<<
 *                                    OrderType.MARKET))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":485
 *                                    total_quote_needed,
 *                                    s_decimal_0,
 *                                    OrderType.MARKET))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_execute_sell(self, str order_id, str trading_pair_str, object amount):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[10] = {__pyx_t_11, __pyx_t_12, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_1, __pyx_v_total_base_acquired, __pyx_v_total_quote_needed, __pyx_t_9, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 9+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[10] = {__pyx_t_11, __pyx_t_12, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_1, __pyx_v_total_base_acquired, __pyx_v_total_quote_needed, __pyx_t_9, __pyx_t_2};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 9+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(9+__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_10, __pyx_t_12);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_10, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_base_asset);
    __Pyx_GIVEREF(__pyx_v_base_asset);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_10, __pyx_v_base_asset);
    __Pyx_INCREF(__pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_v_quote_asset);
    PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_10, __pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_10, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_total_base_acquired);
    __Pyx_GIVEREF(__pyx_v_total_base_acquired);
    PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_10, __pyx_v_total_base_acquired);
    __Pyx_INCREF(__pyx_v_total_quote_needed);
    __Pyx_GIVEREF(__pyx_v_total_quote_needed);
    PyTuple_SET_ITEM(__pyx_t_14, 6+__pyx_t_10, __pyx_v_total_quote_needed);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_14, 7+__pyx_t_10, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_14, 8+__pyx_t_10, __pyx_t_2);
    __pyx_t_12 = 0;
    __pyx_t_1 = 0;
    __pyx_t_9 = 0;
    __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":475
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,
 *             BuyOrderCompletedEvent(self._current_timestamp,
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":435
 *         return order_id
 * 
 *     cdef c_execute_buy(self, str order_id, str trading_pair, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str quote_asset = self._trading_pairs[trading_pair].quote_asset
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_balance);
  __Pyx_XDECREF(__pyx_v_base_balance);
  __Pyx_XDECREF(__pyx_v_config);
  __Pyx_XDECREF(__pyx_v_order_book);
  __Pyx_XDECREF(__pyx_v_total_quote_needed);
  __Pyx_XDECREF(__pyx_v_total_base_acquired);
  __Pyx_XDECREF(__pyx_v_fees);
  __Pyx_XDECREF(__pyx_v_order_filled_events);
  __Pyx_XDECREF(__pyx_v_order_filled_event);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":517
 * 
 *         # Calculate the quote currency acquired, including fees.
 *         acquired_amount = Decimal(sum(row.price * row.amount for row in sell_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset,
 */

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 517, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_2generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_PaperTradeExchange_c_execute_sel, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_execute_sell.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_2generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 517, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sell_entries)) { __Pyx_RaiseClosureNameError("sell_entries"); __PYX_ERR(0, 517, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sell_entries)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sell_entries)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_sell_entries; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sell_entries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 517, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_row);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_row, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_row, __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_row, __pyx_n_s_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":487
 *                                    OrderType.MARKET))
 * 
 *     cdef c_execute_sell(self, str order_id, str trading_pair_str, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object quote_asset_amount
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_amount) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *__pyx_cur_scope;
  PyObject *__pyx_v_quote_asset_amount = 0;
  PyObject *__pyx_v_base_asset_amount = 0;
  PyObject *__pyx_v_config = NULL;
  PyObject *__pyx_v_quote_asset = NULL;
  PyObject *__pyx_v_base_asset = NULL;
  PyObject *__pyx_v_order_book = NULL;
  PyObject *__pyx_v_sold_amount = NULL;
  PyObject *__pyx_v_fee_amount = NULL;
  PyObject *__pyx_v_acquired_amount = NULL;
  PyObject *__pyx_v_fees = NULL;
  PyObject *__pyx_v_order_filled_events = NULL;
  PyObject *__pyx_v_order_filled_event = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  __Pyx_RefNannySetupContext("c_execute_sell", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 487, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":491
 *             object quote_asset_amount
 *             object base_asset_amount
 *         config = self._config             # <<<<<<<<<<<<<<
 *         quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *         quote_asset_amount = self.c_get_balance(quote_asset)
 */
  __pyx_t_1 = __pyx_v_self->_config;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_config = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":492
 *             object base_asset_amount
 *         config = self._config
 *         quote_asset = self._trading_pairs[trading_pair_str].quote_asset             # <<<<<<<<<<<<<<
 *         quote_asset_amount = self.c_get_balance(quote_asset)
 *         base_asset = self._trading_pairs[trading_pair_str].base_asset
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 492, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_quote_asset = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":493
 *         config = self._config
 *         quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *         quote_asset_amount = self.c_get_balance(quote_asset)             # <<<<<<<<<<<<<<
 *         base_asset = self._trading_pairs[trading_pair_str].base_asset
 *         base_asset_amount = self.c_get_balance(base_asset)
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_quote_asset))||((__pyx_v_quote_asset) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_quote_asset)->tp_name), 0))) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), ((PyObject*)__pyx_v_quote_asset)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_quote_asset_amount = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":494
 *         quote_asset = self._trading_pairs[trading_pair_str].quote_asset
 *         quote_asset_amount = self.c_get_balance(quote_asset)
 *         base_asset = self._trading_pairs[trading_pair_str].base_asset             # <<<<<<<<<<<<<<
 *         base_asset_amount = self.c_get_balance(base_asset)
 * 
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 494, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_pairs, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_base_asset = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":495
 *         quote_asset_amount = self.c_get_balance(quote_asset)
 *         base_asset = self._trading_pairs[trading_pair_str].base_asset
 *         base_asset_amount = self.c_get_balance(base_asset)             # <<<<<<<<<<<<<<
 * 
 *         if amount > base_asset_amount:
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_base_asset))||((__pyx_v_base_asset) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_base_asset)->tp_name), 0))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), ((PyObject*)__pyx_v_base_asset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_asset_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":497
 *         base_asset_amount = self.c_get_balance(base_asset)
 * 
 *         if amount > base_asset_amount:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_amount, __pyx_v_base_asset_amount, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":498
 * 
 *         if amount > base_asset_amount:
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "             # <<<<<<<<<<<<<<
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 *                                   f"{amount} {base_asset} required for the order.")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Insufficient);
    __pyx_t_6 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Insufficient);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Insufficient);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_base_asset, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_balance_available_for_sell_orde);
    __pyx_t_6 += 35;
    __Pyx_GIVEREF(__pyx_kp_u_balance_available_for_sell_orde);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_balance_available_for_sell_orde);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":499
 *         if amount > base_asset_amount:
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "
 *                                   f"{base_asset_amount} {base_asset} available vs. "             # <<<<<<<<<<<<<<
 *                                   f"{amount} {base_asset} required for the order.")
 *             self.c_trigger_event(
 */
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_base_asset_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__15);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_base_asset, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_available_vs);
    __pyx_t_6 += 15;
    __Pyx_GIVEREF(__pyx_kp_u_available_vs);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_available_vs);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":500
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 *                                   f"{amount} {base_asset} required for the order.")             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_kp_u__15);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_base_asset, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 9, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_required_for_the_order);
    __pyx_t_6 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_required_for_the_order);
    PyTuple_SET_ITEM(__pyx_t_2, 10, __pyx_kp_u_required_for_the_order);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":498
 * 
 *         if amount > base_asset_amount:
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "             # <<<<<<<<<<<<<<
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 *                                   f"{amount} {base_asset} required for the order.")
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 11, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":502
 *                                   f"{amount} {base_asset} required for the order.")
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 *             )
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":503
 *             self.c_trigger_event(
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)             # <<<<<<<<<<<<<<
 *             )
 *             return
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_5, __pyx_v_order_id, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_t_5, __pyx_v_order_id, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_9);
      __pyx_t_5 = 0;
      __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":501
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 *                                   f"{amount} {base_asset} required for the order.")
 *             self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                 self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":505
 *                 MarketOrderFailureEvent(self._current_timestamp, order_id, OrderType.MARKET)
 *             )
 *             return             # <<<<<<<<<<<<<<
 * 
 *         order_book = self.order_books[trading_pair_str]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":497
 *         base_asset_amount = self.c_get_balance(base_asset)
 * 
 *         if amount > base_asset_amount:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Insufficient {base_asset} balance available for sell order. "
 *                                   f"{base_asset_amount} {base_asset} available vs. "
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":507
 *             return
 * 
 *         order_book = self.order_books[trading_pair_str]             # <<<<<<<<<<<<<<
 * 
 *         # Calculate the base currency used, including fees.
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order_books); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_v_trading_pair_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_order_book = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":510
 * 
 *         # Calculate the base currency used, including fees.
 *         sold_amount = amount             # <<<<<<<<<<<<<<
 *         fee_amount = amount * config.sell_fees_amount
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:
 */
  __Pyx_INCREF(__pyx_v_amount);
  __pyx_v_sold_amount = __pyx_v_amount;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":511
 *         # Calculate the base currency used, including fees.
 *         sold_amount = amount
 *         fee_amount = amount * config.sell_fees_amount             # <<<<<<<<<<<<<<
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:
 *             sold_amount -= fee_amount
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_sell_fees_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_amount, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fee_amount = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":512
 *         sold_amount = amount
 *         fee_amount = amount * config.sell_fees_amount
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:             # <<<<<<<<<<<<<<
 *             sold_amount -= fee_amount
 *         sell_entries = order_book.simulate_sell(sold_amount)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_sell_fees_asset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BASE_CURRENCY); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 == __pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_12 = (__pyx_t_3 != 0);
  if (__pyx_t_12) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":513
 *         fee_amount = amount * config.sell_fees_amount
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:
 *             sold_amount -= fee_amount             # <<<<<<<<<<<<<<
 *         sell_entries = order_book.simulate_sell(sold_amount)
 * 
 */
    __pyx_t_11 = PyNumber_InPlaceSubtract(__pyx_v_sold_amount, __pyx_v_fee_amount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF_SET(__pyx_v_sold_amount, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":512
 *         sold_amount = amount
 *         fee_amount = amount * config.sell_fees_amount
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:             # <<<<<<<<<<<<<<
 *             sold_amount -= fee_amount
 *         sell_entries = order_book.simulate_sell(sold_amount)
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":514
 *         if config.sell_fees_asset is AssetType.BASE_CURRENCY:
 *             sold_amount -= fee_amount
 *         sell_entries = order_book.simulate_sell(sold_amount)             # <<<<<<<<<<<<<<
 * 
 *         # Calculate the quote currency acquired, including fees.
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book, __pyx_n_s_simulate_sell); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_11 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_sold_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_sold_amount);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_cur_scope->__pyx_v_sell_entries = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":517
 * 
 *         # Calculate the quote currency acquired, including fees.
 *         acquired_amount = Decimal(sum(row.price * row.amount for row in sell_entries))             # <<<<<<<<<<<<<<
 * 
 *         self.c_set_balance(quote_asset,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_14c_execute_sell_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_11 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_acquired_amount = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":519
 *         acquired_amount = Decimal(sum(row.price * row.amount for row in sell_entries))
 * 
 *         self.c_set_balance(quote_asset,             # <<<<<<<<<<<<<<
 *                            quote_asset_amount + acquired_amount)
 *         self.c_set_balance(base_asset,
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_quote_asset))||((__pyx_v_quote_asset) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_quote_asset)->tp_name), 0))) __PYX_ERR(0, 519, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":520
 * 
 *         self.c_set_balance(quote_asset,
 *                            quote_asset_amount + acquired_amount)             # <<<<<<<<<<<<<<
 *         self.c_set_balance(base_asset,
 *                            base_asset_amount - amount)
 */
  __pyx_t_11 = PyNumber_Add(__pyx_v_quote_asset_amount, __pyx_v_acquired_amount); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":519
 *         acquired_amount = Decimal(sum(row.price * row.amount for row in sell_entries))
 * 
 *         self.c_set_balance(quote_asset,             # <<<<<<<<<<<<<<
 *                            quote_asset_amount + acquired_amount)
 *         self.c_set_balance(base_asset,
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, ((PyObject*)__pyx_v_quote_asset), __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":521
 *         self.c_set_balance(quote_asset,
 *                            quote_asset_amount + acquired_amount)
 *         self.c_set_balance(base_asset,             # <<<<<<<<<<<<<<
 *                            base_asset_amount - amount)
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_base_asset))||((__pyx_v_base_asset) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_base_asset)->tp_name), 0))) __PYX_ERR(0, 521, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":522
 *                            quote_asset_amount + acquired_amount)
 *         self.c_set_balance(base_asset,
 *                            base_asset_amount - amount)             # <<<<<<<<<<<<<<
 * 
 *         # add fee
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_base_asset_amount, __pyx_v_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":521
 *         self.c_set_balance(quote_asset,
 *                            quote_asset_amount + acquired_amount)
 *         self.c_set_balance(base_asset,             # <<<<<<<<<<<<<<
 *                            base_asset_amount - amount)
 * 
 */
  __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, ((PyObject*)__pyx_v_base_asset), __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":525
 * 
 *         # add fee
 *         fees = estimate_fee(self.name, False)             # <<<<<<<<<<<<<<
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_9, Py_False};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_9, Py_False};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_t_9);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, Py_False);
    __pyx_t_9 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_fees = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":527
 *         fees = estimate_fee(self.name, False)
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(             # <<<<<<<<<<<<<<
 *             self._current_timestamp, order_id, trading_pair_str, TradeType.SELL,
 *             OrderType.MARKET, fees, sell_entries
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_order_filled_events_from_order_b); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":528
 * 
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 *             self._current_timestamp, order_id, trading_pair_str, TradeType.SELL,             # <<<<<<<<<<<<<<
 *             OrderType.MARKET, fees, sell_entries
 *         )
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_SELL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":529
 *         order_filled_events = OrderFilledEvent.order_filled_events_from_order_book_rows(
 *             self._current_timestamp, order_id, trading_pair_str, TradeType.SELL,
 *             OrderType.MARKET, fees, sell_entries             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_9, __pyx_t_4, __pyx_v_order_id, __pyx_v_trading_pair_str, __pyx_t_1, __pyx_t_2, __pyx_v_fees, __pyx_cur_scope->__pyx_v_sell_entries};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[8] = {__pyx_t_9, __pyx_t_4, __pyx_v_order_id, __pyx_v_trading_pair_str, __pyx_t_1, __pyx_t_2, __pyx_v_fees, __pyx_cur_scope->__pyx_v_sell_entries};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 7+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(7+__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_10, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_10, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_10, __pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_10, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_10, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_fees);
    __Pyx_GIVEREF(__pyx_v_fees);
    PyTuple_SET_ITEM(__pyx_t_13, 5+__pyx_t_10, __pyx_v_fees);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sell_entries);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sell_entries);
    PyTuple_SET_ITEM(__pyx_t_13, 6+__pyx_t_10, __pyx_cur_scope->__pyx_v_sell_entries);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_order_filled_events = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":532
 *         )
 * 
 *         for order_filled_event in order_filled_events:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_order_filled_events)) || PyTuple_CheckExact(__pyx_v_order_filled_events)) {
    __pyx_t_11 = __pyx_v_order_filled_events; __Pyx_INCREF(__pyx_t_11); __pyx_t_6 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_order_filled_events); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_14 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 532, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_11, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_11, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_14(__pyx_t_11);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 532, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_order_filled_event, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":533
 * 
 *         for order_filled_event in order_filled_events:
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)             # <<<<<<<<<<<<<<
 * 
 *         self.c_trigger_event(
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_v_order_filled_event); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":532
 *         )
 * 
 *         for order_filled_event in order_filled_events:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":536
 * 
 *         self.c_trigger_event(
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             SellOrderCompletedEvent(self._current_timestamp,
 *                                     order_id,
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_11); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":537
 *         self.c_trigger_event(
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,
 *             SellOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                     order_id,
 *                                     base_asset,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":541
 *                                     base_asset,
 *                                     quote_asset,
 *                                     base_asset if config.sell_fees_asset is AssetType.BASE_CURRENCY else quote_asset,             # <<<<<<<<<<<<<<
 *                                     sold_amount,
 *                                     acquired_amount,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_sell_fees_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_BASE_CURRENCY); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = (__pyx_t_1 == __pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if ((__pyx_t_12 != 0)) {
    __Pyx_INCREF(__pyx_v_base_asset);
    __pyx_t_2 = __pyx_v_base_asset;
  } else {
    __Pyx_INCREF(__pyx_v_quote_asset);
    __pyx_t_2 = __pyx_v_quote_asset;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":545
 *                                     acquired_amount,
 *                                     fee_amount,
 *                                     OrderType.MARKET))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_market_orders(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[10] = {__pyx_t_9, __pyx_t_13, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_2, __pyx_v_sold_amount, __pyx_v_acquired_amount, __pyx_v_fee_amount, __pyx_t_1};
    __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 9+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[10] = {__pyx_t_9, __pyx_t_13, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_2, __pyx_v_sold_amount, __pyx_v_acquired_amount, __pyx_v_fee_amount, __pyx_t_1};
    __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 9+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(9+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_t_13);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_base_asset);
    __Pyx_GIVEREF(__pyx_v_base_asset);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_10, __pyx_v_base_asset);
    __Pyx_INCREF(__pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_v_quote_asset);
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_10, __pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_10, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_sold_amount);
    __Pyx_GIVEREF(__pyx_v_sold_amount);
    PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_10, __pyx_v_sold_amount);
    __Pyx_INCREF(__pyx_v_acquired_amount);
    __Pyx_GIVEREF(__pyx_v_acquired_amount);
    PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_10, __pyx_v_acquired_amount);
    __Pyx_INCREF(__pyx_v_fee_amount);
    __Pyx_GIVEREF(__pyx_v_fee_amount);
    PyTuple_SET_ITEM(__pyx_t_4, 7+__pyx_t_10, __pyx_v_fee_amount);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 8+__pyx_t_10, __pyx_t_1);
    __pyx_t_13 = 0;
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":535
 *             self.c_trigger_event(self.ORDER_FILLED_EVENT_TAG, order_filled_event)
 * 
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,
 *             SellOrderCompletedEvent(self._current_timestamp,
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":487
 *                                    OrderType.MARKET))
 * 
 *     cdef c_execute_sell(self, str order_id, str trading_pair_str, object amount):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object quote_asset_amount
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_asset_amount);
  __Pyx_XDECREF(__pyx_v_base_asset_amount);
  __Pyx_XDECREF(__pyx_v_config);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_order_book);
  __Pyx_XDECREF(__pyx_v_sold_amount);
  __Pyx_XDECREF(__pyx_v_fee_amount);
  __Pyx_XDECREF(__pyx_v_acquired_amount);
  __Pyx_XDECREF(__pyx_v_fees);
  __Pyx_XDECREF(__pyx_v_order_filled_events);
  __Pyx_XDECREF(__pyx_v_order_filled_event);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":547
 *                                     OrderType.MARKET))
 * 
 *     cdef c_process_market_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             QueuedOrder front_order = None
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_market_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v_front_order = 0;
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("c_process_market_orders", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":549
 *     cdef c_process_market_orders(self):
 *         cdef:
 *             QueuedOrder front_order = None             # <<<<<<<<<<<<<<
 *         while len(self._queued_orders) > 0:
 *             front_order = self._queued_orders[0]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_front_order = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)Py_None);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":550
 *         cdef:
 *             QueuedOrder front_order = None
 *         while len(self._queued_orders) > 0:             # <<<<<<<<<<<<<<
 *             front_order = self._queued_orders[0]
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->_queued_orders;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
    if (!__pyx_t_3) break;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":551
 *             QueuedOrder front_order = None
 *         while len(self._queued_orders) > 0:
 *             front_order = self._queued_orders[0]             # <<<<<<<<<<<<<<
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 *                 self._queued_orders.popleft()
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_queued_orders, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder))))) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_front_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":552
 *         while len(self._queued_orders) > 0:
 *             front_order = self._queued_orders[0]
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:             # <<<<<<<<<<<<<<
 *                 self._queued_orders.popleft()
 *                 try:
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_front_order->create_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TRADE_EXECUTION_DELAY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":553
 *             front_order = self._queued_orders[0]
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 *                 self._queued_orders.popleft()             # <<<<<<<<<<<<<<
 *                 try:
 *                     if front_order.is_buy:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_queued_orders, __pyx_n_s_popleft); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":554
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 *                 self._queued_orders.popleft()
 *                 try:             # <<<<<<<<<<<<<<
 *                     if front_order.is_buy:
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":555
 *                 self._queued_orders.popleft()
 *                 try:
 *                     if front_order.is_buy:             # <<<<<<<<<<<<<<
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                     else:
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 555, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__pyx_t_3) {

            /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":556
 *                 try:
 *                     if front_order.is_buy:
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 556, __pyx_L6_error)
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 556, __pyx_L6_error)
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_execute_buy(__pyx_v_self, ((PyObject*)__pyx_t_5), ((PyObject*)__pyx_t_6), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":555
 *                 self._queued_orders.popleft()
 *                 try:
 *                     if front_order.is_buy:             # <<<<<<<<<<<<<<
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                     else:
 */
            goto __pyx_L14;
          }

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":558
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                     else:
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     self.logger().error("Error executing queued order.", exc_info=True)
 */
          /*else*/ {
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 558, __pyx_L6_error)
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 558, __pyx_L6_error)
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_front_order), __pyx_n_s_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 558, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_execute_sell(__pyx_v_self, ((PyObject*)__pyx_t_4), ((PyObject*)__pyx_t_1), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 558, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_L14:;

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":554
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 *                 self._queued_orders.popleft()
 *                 try:             # <<<<<<<<<<<<<<
 *                     if front_order.is_buy:
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":559
 *                     else:
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().error("Error executing queued order.", exc_info=True)
 *             else:
 */
        __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_10) {
          __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_market_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 559, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __pyx_v_e = __pyx_t_6;
          /*try:*/ {

            /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":560
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                 except Exception as e:
 *                     self.logger().error("Error executing queued order.", exc_info=True)             # <<<<<<<<<<<<<<
 *             else:
 *                 return
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 560, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 560, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 560, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 560, __pyx_L20_error)
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__16, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 560, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":559
 *                     else:
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().error("Error executing queued order.", exc_info=True)
 *             else:
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_e);
              __pyx_v_e = NULL;
              goto __pyx_L21;
            }
            __pyx_L20_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_15);
              __Pyx_XGOTREF(__pyx_t_16);
              __Pyx_XGOTREF(__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __pyx_t_10 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_e);
                __pyx_v_e = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
              }
              __Pyx_XGIVEREF(__pyx_t_15);
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
              __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
              __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
              goto __pyx_L8_except_error;
            }
            __pyx_L21:;
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L7_exception_handled;
        }
        goto __pyx_L8_except_error;
        __pyx_L8_except_error:;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":554
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:
 *                 self._queued_orders.popleft()
 *                 try:             # <<<<<<<<<<<<<<
 *                     if front_order.is_buy:
 *                         self.c_execute_buy(front_order.order_id, front_order.trading_pair, front_order.amount)
 */
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L7_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":552
 *         while len(self._queued_orders) > 0:
 *             front_order = self._queued_orders[0]
 *             if front_order.create_timestamp <= self._current_timestamp - self.TRADE_EXECUTION_DELAY:             # <<<<<<<<<<<<<<
 *                 self._queued_orders.popleft()
 *                 try:
 */
      goto __pyx_L5;
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":562
 *                     self.logger().error("Error executing queued order.", exc_info=True)
 *             else:
 *                 return             # <<<<<<<<<<<<<<
 * 
 *     cdef c_delete_limit_order(self,
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }
    __pyx_L5:;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":547
 *                                     OrderType.MARKET))
 * 
 *     cdef c_process_market_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             QueuedOrder front_order = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_market_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_front_order);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":564
 *                 return
 * 
 *     cdef c_delete_limit_order(self,             # <<<<<<<<<<<<<<
 *                               LimitOrders *limit_orders_map_ptr,
 *                               LimitOrdersIterator *map_it_ptr,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_delete_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator const __pyx_v_orders_it) {
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_orders_collection_ptr;
  CYTHON_UNUSED PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("c_delete_limit_order", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":569
 *                               const SingleTradingPairLimitOrdersIterator orders_it):
 *         cdef:
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)             # <<<<<<<<<<<<<<
 *         try:
 *             orders_collection_ptr.erase(orders_it)
 */
  __pyx_v_orders_collection_ptr = (&(*(*__pyx_v_map_it_ptr)).second);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":570
 *         cdef:
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *         try:             # <<<<<<<<<<<<<<
 *             orders_collection_ptr.erase(orders_it)
 *             if orders_collection_ptr.empty():
 */
  {
    (void)__pyx_t_1; (void)__pyx_t_2; (void)__pyx_t_3; /* mark used */
    /*try:*/ {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":571
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *         try:
 *             orders_collection_ptr.erase(orders_it)             # <<<<<<<<<<<<<<
 *             if orders_collection_ptr.empty():
 *                 map_it_ptr[0] = limit_orders_map_ptr.erase(deref(map_it_ptr))
 */
      (void)(__pyx_v_orders_collection_ptr->erase(__pyx_v_orders_it));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":572
 *         try:
 *             orders_collection_ptr.erase(orders_it)
 *             if orders_collection_ptr.empty():             # <<<<<<<<<<<<<<
 *                 map_it_ptr[0] = limit_orders_map_ptr.erase(deref(map_it_ptr))
 *             return True
 */
      __pyx_t_4 = (__pyx_v_orders_collection_ptr->empty() != 0);
      if (__pyx_t_4) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":573
 *             orders_collection_ptr.erase(orders_it)
 *             if orders_collection_ptr.empty():
 *                 map_it_ptr[0] = limit_orders_map_ptr.erase(deref(map_it_ptr))             # <<<<<<<<<<<<<<
 *             return True
 *         except Exception as err:
 */
        (__pyx_v_map_it_ptr[0]) = __pyx_v_limit_orders_map_ptr->erase((*__pyx_v_map_it_ptr));

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":572
 *         try:
 *             orders_collection_ptr.erase(orders_it)
 *             if orders_collection_ptr.empty():             # <<<<<<<<<<<<<<
 *                 map_it_ptr[0] = limit_orders_map_ptr.erase(deref(map_it_ptr))
 *             return True
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":574
 *             if orders_collection_ptr.empty():
 *                 map_it_ptr[0] = limit_orders_map_ptr.erase(deref(map_it_ptr))
 *             return True             # <<<<<<<<<<<<<<
 *         except Exception as err:
 *             self.logger().error("Error deleting limit order.", exc_info=True)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L7_try_return;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":570
 *         cdef:
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *         try:             # <<<<<<<<<<<<<<
 *             orders_collection_ptr.erase(orders_it)
 *             if orders_collection_ptr.empty():
 */
    }
    __pyx_L7_try_return:;
    goto __pyx_L0;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":564
 *                 return
 * 
 *     cdef c_delete_limit_order(self,             # <<<<<<<<<<<<<<
 *                               LimitOrders *limit_orders_map_ptr,
 *                               LimitOrdersIterator *map_it_ptr,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":579
 *             return False
 * 
 *     cdef c_process_limit_bid_order(self,             # <<<<<<<<<<<<<<
 *                                    LimitOrders *limit_orders_map_ptr,
 *                                    LimitOrdersIterator *map_it_ptr,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_bid_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it) {
  LimitOrder const *__pyx_v_cpp_limit_order_ptr;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_base_asset = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_quote_asset_balance = 0;
  PyObject *__pyx_v_quote_asset_traded = 0;
  PyObject *__pyx_v_base_asset_traded = 0;
  PyObject *__pyx_v_fees = NULL;
  PyObject *__pyx_v_config = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  int64_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("c_process_limit_bid_order", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":584
 *                                    SingleTradingPairLimitOrdersIterator orders_it):
 *         cdef:
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *             str trading_pair = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 */
  __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_it));

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":585
 *         cdef:
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))
 *             str trading_pair = cpp_limit_order_ptr.getTradingPair().decode("utf8")             # <<<<<<<<<<<<<<
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getTradingPair(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":586
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))
 *             str trading_pair = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")             # <<<<<<<<<<<<<<
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getQuoteCurrency(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":587
 *             str trading_pair = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")             # <<<<<<<<<<<<<<
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object quote_asset_balance = self.c_get_balance(quote_asset)
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getBaseCurrency(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":588
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")             # <<<<<<<<<<<<<<
 *             object quote_asset_balance = self.c_get_balance(quote_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getClientOrderID(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":589
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object quote_asset_balance = self.c_get_balance(quote_asset)             # <<<<<<<<<<<<<<
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_asset_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":590
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object quote_asset_balance = self.c_get_balance(quote_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \             # <<<<<<<<<<<<<<
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_2 = __pyx_v_cpp_limit_order_ptr->getPrice();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":591
 *             object quote_asset_balance = self.c_get_balance(quote_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()             # <<<<<<<<<<<<<<
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 * 
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getQuantity();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":590
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object quote_asset_balance = self.c_get_balance(quote_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \             # <<<<<<<<<<<<<<
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_asset_traded = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":592
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()             # <<<<<<<<<<<<<<
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getQuantity();
  __pyx_t_1 = ((PyObject *)__pyx_t_3);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_base_asset_traded = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":595
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if quote_asset_balance < quote_asset_traded:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_quote_asset_balance, __pyx_v_quote_asset_traded, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":596
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if quote_asset_balance < quote_asset_traded:
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "             # <<<<<<<<<<<<<<
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "
 *                                   f"{quote_asset_balance:.8g} {quote_asset} available.")
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Not_enough);
    __pyx_t_8 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_Not_enough);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Not_enough);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_balance_to_fill_limit_buy_order);
    __pyx_t_8 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_balance_to_fill_limit_buy_order);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_balance_to_fill_limit_buy_order);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__17);
    __pyx_t_8 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__17);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__17);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":597
 *         if quote_asset_balance < quote_asset_traded:
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "             # <<<<<<<<<<<<<<
 *                                   f"{quote_asset_balance:.8g} {quote_asset} available.")
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_Format(__pyx_v_quote_asset_traded, __pyx_kp_u_8g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u__15);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_needed_vs);
    __pyx_t_8 += 12;
    __Pyx_GIVEREF(__pyx_kp_u_needed_vs);
    PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_kp_u_needed_vs);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":598
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "
 *                                   f"{quote_asset_balance:.8g} {quote_asset} available.")             # <<<<<<<<<<<<<<
 * 
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
    __pyx_t_7 = __Pyx_PyObject_Format(__pyx_v_quote_asset_balance, __pyx_kp_u_8g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_5, 10, __pyx_kp_u__15);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 11, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_available);
    __pyx_t_8 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_available);
    PyTuple_SET_ITEM(__pyx_t_5, 12, __pyx_kp_u_available);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":596
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if quote_asset_balance < quote_asset_traded:
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "             # <<<<<<<<<<<<<<
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "
 *                                   f"{quote_asset_balance:.8g} {quote_asset} available.")
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_5, 13, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":600
 *                                   f"{quote_asset_balance:.8g} {quote_asset} available.")
 * 
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_delete_limit_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":601
 * 
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":602
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                      order_id)
 *                                  )
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":603
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)             # <<<<<<<<<<<<<<
 *                                  )
 *             return
 */
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_7, __pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_7, __pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_order_id);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":601
 * 
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":605
 *                                                      order_id)
 *                                  )
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Adjust the market balances according to the trade done.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":595
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if quote_asset_balance < quote_asset_traded:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Not enough {quote_asset} balance to fill limit buy order on {trading_pair}. "
 *                                   f"{quote_asset_traded:.8g} {quote_asset} needed vs. "
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":608
 * 
 *         # Adjust the market balances according to the trade done.
 *         self.c_set_balance(quote_asset, self.c_get_balance(quote_asset) - quote_asset_traded)             # <<<<<<<<<<<<<<
 *         self.c_set_balance(base_asset, self.c_get_balance(base_asset) + base_asset_traded)
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_6, __pyx_v_quote_asset_traded); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_quote_asset, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":609
 *         # Adjust the market balances according to the trade done.
 *         self.c_set_balance(quote_asset, self.c_get_balance(quote_asset) - quote_asset_traded)
 *         self.c_set_balance(base_asset, self.c_get_balance(base_asset) + base_asset_traded)             # <<<<<<<<<<<<<<
 * 
 *         # add fee
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_v_base_asset_traded); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_base_asset, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":612
 * 
 *         # add fee
 *         fees = estimate_fee(self.name, True)             # <<<<<<<<<<<<<<
 * 
 *         # Emit the trade and order completed events.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, Py_True};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, Py_True};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_11, __pyx_t_12);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_11, Py_True);
    __pyx_t_12 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fees = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":615
 * 
 *         # Emit the trade and order completed events.
 *         config = self._config             # <<<<<<<<<<<<<<
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,
 */
  __pyx_t_6 = __pyx_v_self->_config;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_config = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":617
 *         config = self._config
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             OrderFilledEvent(
 *                 self._current_timestamp,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_6); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":618
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                 self._current_timestamp,
 *                 order_id,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":619
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(
 *                 self._current_timestamp,             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 trading_pair,
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":622
 *                 order_id,
 *                 trading_pair,
 *                 TradeType.BUY,             # <<<<<<<<<<<<<<
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_BUY); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":623
 *                 trading_pair,
 *                 TradeType.BUY,
 *                 OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":624
 *                 TradeType.BUY,
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),             # <<<<<<<<<<<<<<
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 *                 fees
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getPrice();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":625
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),             # <<<<<<<<<<<<<<
 *                 fees
 *             ))
 */
  __pyx_t_2 = __pyx_v_cpp_limit_order_ptr->getQuantity();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":626
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 *                 fees             # <<<<<<<<<<<<<<
 *             ))
 * 
 */
  __pyx_t_12 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[9] = {__pyx_t_12, __pyx_t_5, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_t_7, __pyx_t_13, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2), __pyx_v_fees};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 8+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[9] = {__pyx_t_12, __pyx_t_5, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_t_7, __pyx_t_13, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2), __pyx_v_fees};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 8+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(8+__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_11, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_11, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_11, __pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_11, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_11, __pyx_t_13);
    __Pyx_INCREF(((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_11, ((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_14, 6+__pyx_t_11, ((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_fees);
    __Pyx_GIVEREF(__pyx_v_fees);
    PyTuple_SET_ITEM(__pyx_t_14, 7+__pyx_t_11, __pyx_v_fees);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_13 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":616
 *         # Emit the trade and order completed events.
 *         config = self._config
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":630
 * 
 *         self.c_trigger_event(
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             BuyOrderCompletedEvent(
 *                 self._current_timestamp,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":631
 *         self.c_trigger_event(
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,
 *             BuyOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                 self._current_timestamp,
 *                 order_id,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":632
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,
 *             BuyOrderCompletedEvent(
 *                 self._current_timestamp,             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 base_asset,
 */
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":636
 *                 base_asset,
 *                 quote_asset,
 *                 base_asset if config.buy_fees_asset is AssetType.BASE_CURRENCY else quote_asset,             # <<<<<<<<<<<<<<
 *                 base_asset_traded,
 *                 quote_asset_traded,
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_buy_fees_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BASE_CURRENCY); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = (__pyx_t_7 == __pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if ((__pyx_t_4 != 0)) {
    __Pyx_INCREF(__pyx_v_base_asset);
    __pyx_t_13 = __pyx_v_base_asset;
  } else {
    __Pyx_INCREF(__pyx_v_quote_asset);
    __pyx_t_13 = __pyx_v_quote_asset;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":639
 *                 base_asset_traded,
 *                 quote_asset_traded,
 *                 s_decimal_0,             # <<<<<<<<<<<<<<
 *                 OrderType.LIMIT
 *             ))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":640
 *                 quote_asset_traded,
 *                 s_decimal_0,
 *                 OrderType.LIMIT             # <<<<<<<<<<<<<<
 *             ))
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_7, __pyx_t_14, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_13, __pyx_v_base_asset_traded, __pyx_v_quote_asset_traded, __pyx_t_12, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 9+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_7, __pyx_t_14, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_13, __pyx_v_base_asset_traded, __pyx_v_quote_asset_traded, __pyx_t_12, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 9+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(9+__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_11, __pyx_t_14);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_11, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_base_asset);
    __Pyx_GIVEREF(__pyx_v_base_asset);
    PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_11, __pyx_v_base_asset);
    __Pyx_INCREF(__pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_v_quote_asset);
    PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_11, __pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_15, 4+__pyx_t_11, __pyx_t_13);
    __Pyx_INCREF(__pyx_v_base_asset_traded);
    __Pyx_GIVEREF(__pyx_v_base_asset_traded);
    PyTuple_SET_ITEM(__pyx_t_15, 5+__pyx_t_11, __pyx_v_base_asset_traded);
    __Pyx_INCREF(__pyx_v_quote_asset_traded);
    __Pyx_GIVEREF(__pyx_v_quote_asset_traded);
    PyTuple_SET_ITEM(__pyx_t_15, 6+__pyx_t_11, __pyx_v_quote_asset_traded);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_15, 7+__pyx_t_11, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_15, 8+__pyx_t_11, __pyx_t_5);
    __pyx_t_14 = 0;
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":629
 *             ))
 * 
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.BUY_ORDER_COMPLETED_EVENT_TAG,
 *             BuyOrderCompletedEvent(
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":642
 *                 OrderType.LIMIT
 *             ))
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_limit_ask_order(self,
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_delete_limit_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":579
 *             return False
 * 
 *     cdef c_process_limit_bid_order(self,             # <<<<<<<<<<<<<<
 *                                    LimitOrders *limit_orders_map_ptr,
 *                                    LimitOrdersIterator *map_it_ptr,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_limit_bid_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_quote_asset_balance);
  __Pyx_XDECREF(__pyx_v_quote_asset_traded);
  __Pyx_XDECREF(__pyx_v_base_asset_traded);
  __Pyx_XDECREF(__pyx_v_fees);
  __Pyx_XDECREF(__pyx_v_config);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":644
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_limit_ask_order(self,             # <<<<<<<<<<<<<<
 *                                    LimitOrders *limit_orders_map_ptr,
 *                                    LimitOrdersIterator *map_it_ptr,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_ask_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it) {
  LimitOrder const *__pyx_v_cpp_limit_order_ptr;
  PyObject *__pyx_v_trading_pair_str = 0;
  PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_base_asset = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_base_asset_balance = 0;
  PyObject *__pyx_v_quote_asset_traded = 0;
  PyObject *__pyx_v_base_asset_traded = 0;
  PyObject *__pyx_v_fees = NULL;
  PyObject *__pyx_v_config = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  int64_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("c_process_limit_ask_order", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":649
 *                                    SingleTradingPairLimitOrdersIterator orders_it):
 *         cdef:
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *             str trading_pair_str = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 */
  __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_it));

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":650
 *         cdef:
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))
 *             str trading_pair_str = cpp_limit_order_ptr.getTradingPair().decode("utf8")             # <<<<<<<<<<<<<<
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getTradingPair(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_trading_pair_str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":651
 *             const CPPLimitOrder *cpp_limit_order_ptr = address(deref(orders_it))
 *             str trading_pair_str = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")             # <<<<<<<<<<<<<<
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getQuoteCurrency(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":652
 *             str trading_pair_str = cpp_limit_order_ptr.getTradingPair().decode("utf8")
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")             # <<<<<<<<<<<<<<
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object base_asset_balance = self.c_get_balance(base_asset)
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getBaseCurrency(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":653
 *             str quote_asset = cpp_limit_order_ptr.getQuoteCurrency().decode("utf8")
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")             # <<<<<<<<<<<<<<
 *             object base_asset_balance = self.c_get_balance(base_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 */
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_cpp_limit_order_ptr->getClientOrderID(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":654
 *             str base_asset = cpp_limit_order_ptr.getBaseCurrency().decode("utf8")
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object base_asset_balance = self.c_get_balance(base_asset)             # <<<<<<<<<<<<<<
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_asset_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":655
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object base_asset_balance = self.c_get_balance(base_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \             # <<<<<<<<<<<<<<
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_2 = __pyx_v_cpp_limit_order_ptr->getPrice();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":656
 *             object base_asset_balance = self.c_get_balance(base_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()             # <<<<<<<<<<<<<<
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 * 
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getQuantity();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":655
 *             str order_id = cpp_limit_order_ptr.getClientOrderID().decode("utf8")
 *             object base_asset_balance = self.c_get_balance(base_asset)
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \             # <<<<<<<<<<<<<<
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()
 */
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quote_asset_traded = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":657
 *             object quote_asset_traded = <object> cpp_limit_order_ptr.getPrice() * \
 *                                         <object> cpp_limit_order_ptr.getQuantity()
 *             object base_asset_traded = <object> cpp_limit_order_ptr.getQuantity()             # <<<<<<<<<<<<<<
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getQuantity();
  __pyx_t_1 = ((PyObject *)__pyx_t_3);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_base_asset_traded = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":660
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if base_asset_balance < base_asset_traded:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_base_asset_balance, __pyx_v_base_asset_traded, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":661
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if base_asset_balance < base_asset_traded:
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "             # <<<<<<<<<<<<<<
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Not_enough);
    __pyx_t_8 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_Not_enough);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Not_enough);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_balance_to_fill_limit_sell_orde);
    __pyx_t_8 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_balance_to_fill_limit_sell_orde);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_balance_to_fill_limit_sell_orde);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__17);
    __pyx_t_8 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__17);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__17);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":662
 *         if base_asset_balance < base_asset_traded:
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "             # <<<<<<<<<<<<<<
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
    __pyx_t_7 = __Pyx_PyObject_Format(__pyx_v_base_asset_traded, __pyx_kp_u_8g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u__15);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_needed_vs);
    __pyx_t_8 += 12;
    __Pyx_GIVEREF(__pyx_kp_u_needed_vs);
    PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_kp_u_needed_vs);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":663
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")             # <<<<<<<<<<<<<<
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
    __pyx_t_7 = __Pyx_PyObject_Format(__pyx_v_base_asset_balance, __pyx_kp_u_8g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__15);
    __pyx_t_8 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyTuple_SET_ITEM(__pyx_t_5, 10, __pyx_kp_u__15);
    __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 11, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_available);
    __pyx_t_8 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_available);
    PyTuple_SET_ITEM(__pyx_t_5, 12, __pyx_kp_u_available);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":661
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if base_asset_balance < base_asset_traded:
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "             # <<<<<<<<<<<<<<
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_5, 13, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":664
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_delete_limit_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":665
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":666
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                      order_id)
 *                                  )
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":667
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)             # <<<<<<<<<<<<<<
 *                                  )
 *             return
 */
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_7, __pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_7, __pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_order_id);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":665
 *                                   f"{base_asset_balance:.8g} {base_asset} available.")
 *             self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(self._current_timestamp,
 *                                                      order_id)
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":669
 *                                                      order_id)
 *                                  )
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Adjust the market balances according to the trade done.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":660
 * 
 *         # Check if there's enough balance to satisfy the order. If not, remove the limit order without doing anything.
 *         if base_asset_balance < base_asset_traded:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Not enough {base_asset} balance to fill limit sell order on {trading_pair_str}. "
 *                                   f"{base_asset_traded:.8g} {base_asset} needed vs. "
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":672
 * 
 *         # Adjust the market balances according to the trade done.
 *         self.c_set_balance(quote_asset, self.c_get_balance(quote_asset) + quote_asset_traded)             # <<<<<<<<<<<<<<
 *         self.c_set_balance(base_asset, self.c_get_balance(base_asset) - base_asset_traded)
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_v_quote_asset_traded); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_quote_asset, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":673
 *         # Adjust the market balances according to the trade done.
 *         self.c_set_balance(quote_asset, self.c_get_balance(quote_asset) + quote_asset_traded)
 *         self.c_set_balance(base_asset, self.c_get_balance(base_asset) - base_asset_traded)             # <<<<<<<<<<<<<<
 * 
 *         # add fee
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_6, __pyx_v_base_asset_traded); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_base_asset, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":676
 * 
 *         # add fee
 *         fees = estimate_fee(self.name, True)             # <<<<<<<<<<<<<<
 * 
 *         # Emit the trade and order completed events.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, Py_True};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, Py_True};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_11, __pyx_t_12);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_11, Py_True);
    __pyx_t_12 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fees = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":679
 * 
 *         # Emit the trade and order completed events.
 *         config = self._config             # <<<<<<<<<<<<<<
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,
 */
  __pyx_t_6 = __pyx_v_self->_config;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_config = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":681
 *         config = self._config
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             OrderFilledEvent(
 *                 self._current_timestamp,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_6); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":682
 *         self.c_trigger_event(
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                 self._current_timestamp,
 *                 order_id,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":683
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(
 *                 self._current_timestamp,             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 trading_pair_str,
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":686
 *                 order_id,
 *                 trading_pair_str,
 *                 TradeType.SELL,             # <<<<<<<<<<<<<<
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_SELL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":687
 *                 trading_pair_str,
 *                 TradeType.SELL,
 *                 OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":688
 *                 TradeType.SELL,
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),             # <<<<<<<<<<<<<<
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 *                 fees
 */
  __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getPrice();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":689
 *                 OrderType.LIMIT,
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),             # <<<<<<<<<<<<<<
 *                 fees
 *             ))
 */
  __pyx_t_2 = __pyx_v_cpp_limit_order_ptr->getQuantity();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":690
 *                 <object> cpp_limit_order_ptr.getPrice(),
 *                 <object> cpp_limit_order_ptr.getQuantity(),
 *                 fees             # <<<<<<<<<<<<<<
 *             ))
 * 
 */
  __pyx_t_12 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[9] = {__pyx_t_12, __pyx_t_5, __pyx_v_order_id, __pyx_v_trading_pair_str, __pyx_t_7, __pyx_t_13, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2), __pyx_v_fees};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 8+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[9] = {__pyx_t_12, __pyx_t_5, __pyx_v_order_id, __pyx_v_trading_pair_str, __pyx_t_7, __pyx_t_13, ((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_2), __pyx_v_fees};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_11, 8+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(8+__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_11, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_11, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_v_trading_pair_str);
    PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_11, __pyx_v_trading_pair_str);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_11, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_11, __pyx_t_13);
    __Pyx_INCREF(((PyObject *)__pyx_t_3));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_11, ((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_14, 6+__pyx_t_11, ((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_fees);
    __Pyx_GIVEREF(__pyx_v_fees);
    PyTuple_SET_ITEM(__pyx_t_14, 7+__pyx_t_11, __pyx_v_fees);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_13 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":680
 *         # Emit the trade and order completed events.
 *         config = self._config
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.ORDER_FILLED_EVENT_TAG,
 *             OrderFilledEvent(
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":694
 * 
 *         self.c_trigger_event(
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *             SellOrderCompletedEvent(
 *                 self._current_timestamp,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":695
 *         self.c_trigger_event(
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,
 *             SellOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                 self._current_timestamp,
 *                 order_id,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":696
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,
 *             SellOrderCompletedEvent(
 *                 self._current_timestamp,             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 base_asset,
 */
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":700
 *                 base_asset,
 *                 quote_asset,
 *                 base_asset if config.sell_fees_asset is AssetType.BASE_CURRENCY else quote_asset,             # <<<<<<<<<<<<<<
 *                 base_asset_traded,
 *                 quote_asset_traded,
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_config, __pyx_n_s_sell_fees_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BASE_CURRENCY); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = (__pyx_t_7 == __pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if ((__pyx_t_4 != 0)) {
    __Pyx_INCREF(__pyx_v_base_asset);
    __pyx_t_13 = __pyx_v_base_asset;
  } else {
    __Pyx_INCREF(__pyx_v_quote_asset);
    __pyx_t_13 = __pyx_v_quote_asset;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":703
 *                 base_asset_traded,
 *                 quote_asset_traded,
 *                 s_decimal_0,             # <<<<<<<<<<<<<<
 *                 OrderType.LIMIT
 *             ))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":704
 *                 quote_asset_traded,
 *                 s_decimal_0,
 *                 OrderType.LIMIT             # <<<<<<<<<<<<<<
 *             ))
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_7, __pyx_t_14, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_13, __pyx_v_base_asset_traded, __pyx_v_quote_asset_traded, __pyx_t_12, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 9+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[10] = {__pyx_t_7, __pyx_t_14, __pyx_v_order_id, __pyx_v_base_asset, __pyx_v_quote_asset, __pyx_t_13, __pyx_v_base_asset_traded, __pyx_v_quote_asset_traded, __pyx_t_12, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 9+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(9+__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_11, __pyx_t_14);
    __Pyx_INCREF(__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_11, __pyx_v_order_id);
    __Pyx_INCREF(__pyx_v_base_asset);
    __Pyx_GIVEREF(__pyx_v_base_asset);
    PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_11, __pyx_v_base_asset);
    __Pyx_INCREF(__pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_v_quote_asset);
    PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_11, __pyx_v_quote_asset);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_15, 4+__pyx_t_11, __pyx_t_13);
    __Pyx_INCREF(__pyx_v_base_asset_traded);
    __Pyx_GIVEREF(__pyx_v_base_asset_traded);
    PyTuple_SET_ITEM(__pyx_t_15, 5+__pyx_t_11, __pyx_v_base_asset_traded);
    __Pyx_INCREF(__pyx_v_quote_asset_traded);
    __Pyx_GIVEREF(__pyx_v_quote_asset_traded);
    PyTuple_SET_ITEM(__pyx_t_15, 6+__pyx_t_11, __pyx_v_quote_asset_traded);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_15, 7+__pyx_t_11, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_15, 8+__pyx_t_11, __pyx_t_5);
    __pyx_t_14 = 0;
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":693
 *             ))
 * 
 *         self.c_trigger_event(             # <<<<<<<<<<<<<<
 *             self.SELL_ORDER_COMPLETED_EVENT_TAG,
 *             SellOrderCompletedEvent(
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":706
 *                 OrderType.LIMIT
 *             ))
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_limit_order(self,
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_delete_limit_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":644
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_limit_ask_order(self,             # <<<<<<<<<<<<<<
 *                                    LimitOrders *limit_orders_map_ptr,
 *                                    LimitOrdersIterator *map_it_ptr,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_limit_ask_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair_str);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_base_asset_balance);
  __Pyx_XDECREF(__pyx_v_quote_asset_traded);
  __Pyx_XDECREF(__pyx_v_base_asset_traded);
  __Pyx_XDECREF(__pyx_v_fees);
  __Pyx_XDECREF(__pyx_v_config);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":708
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_limit_order(self,             # <<<<<<<<<<<<<<
 *                                bint is_buy,
 *                                LimitOrders *limit_orders_map_ptr,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_order(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, int __pyx_v_is_buy, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it) {
  CYTHON_UNUSED PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("c_process_limit_order", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":713
 *                                LimitOrdersIterator *map_it_ptr,
 *                                SingleTradingPairLimitOrdersIterator orders_it):
 *         try:             # <<<<<<<<<<<<<<
 *             if is_buy:
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":714
 *                                SingleTradingPairLimitOrdersIterator orders_it):
 *         try:
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             else:
 */
      __pyx_t_4 = (__pyx_v_is_buy != 0);
      if (__pyx_t_4) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":715
 *         try:
 *             if is_buy:
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
        __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_limit_bid_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":714
 *                                SingleTradingPairLimitOrdersIterator orders_it):
 *         try:
 *             if is_buy:             # <<<<<<<<<<<<<<
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             else:
 */
        goto __pyx_L9;
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":717
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *             else:
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 *         except Exception as e:
 *             self.logger().error(f"Error processing limit order.", exc_info=True)
 */
      /*else*/ {
        __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_limit_ask_order(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 717, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L9:;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":713
 *                                LimitOrdersIterator *map_it_ptr,
 *                                SingleTradingPairLimitOrdersIterator orders_it):
 *         try:             # <<<<<<<<<<<<<<
 *             if is_buy:
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":718
 *             else:
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Error processing limit order.", exc_info=True)
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 718, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":719
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *         except Exception as e:
 *             self.logger().error(f"Error processing limit order.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_crossed_limit_orders_for_trading_pair(self,
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 719, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 719, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 719, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 719, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 719, __pyx_L15_error)
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__18, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 719, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":718
 *             else:
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Error processing limit order.", exc_info=True)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e);
          __pyx_v_e = NULL;
          goto __pyx_L16;
        }
        __pyx_L15_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_6 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
        __pyx_L16:;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":713
 *                                LimitOrdersIterator *map_it_ptr,
 *                                SingleTradingPairLimitOrdersIterator orders_it):
 *         try:             # <<<<<<<<<<<<<<
 *             if is_buy:
 *                 self.c_process_limit_bid_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":708
 *         self.c_delete_limit_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_limit_order(self,             # <<<<<<<<<<<<<<
 *                                bint is_buy,
 *                                LimitOrders *limit_orders_map_ptr,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":721
 *             self.logger().error(f"Error processing limit order.", exc_info=True)
 * 
 *     cdef c_process_crossed_limit_orders_for_trading_pair(self,             # <<<<<<<<<<<<<<
 *                                                          bint is_buy,
 *                                                          LimitOrders *limit_orders_map_ptr,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders_for_trading_pair(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, int __pyx_v_is_buy, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *__pyx_v_map_it_ptr) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_opposite_order_book_price = 0;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_orders_collection_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersRIterator __pyx_v_orders_rit;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator>  __pyx_v_process_order_its;
  LimitOrder const *__pyx_v_cpp_limit_order_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator> ::iterator __pyx_t_4;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_t_5;
  __Pyx_RefNannySetupContext("c_process_crossed_limit_orders_for_trading_pair", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":734
 *         """
 *         cdef:
 *             str trading_pair = deref(deref(map_it_ptr)).first.decode("utf8")             # <<<<<<<<<<<<<<
 *             object opposite_order_book_price = self.c_get_price(trading_pair, is_buy)
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 */
  __pyx_t_1 = __Pyx_decode_cpp_string((*(*__pyx_v_map_it_ptr)).first, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":735
 *         cdef:
 *             str trading_pair = deref(deref(map_it_ptr)).first.decode("utf8")
 *             object opposite_order_book_price = self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *             SingleTradingPairLimitOrdersIterator orders_it = orders_collection_ptr.begin()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_opposite_order_book_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":736
 *             str trading_pair = deref(deref(map_it_ptr)).first.decode("utf8")
 *             object opposite_order_book_price = self.c_get_price(trading_pair, is_buy)
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrdersIterator orders_it = orders_collection_ptr.begin()
 *             SingleTradingPairLimitOrdersRIterator orders_rit = orders_collection_ptr.rbegin()
 */
  __pyx_v_orders_collection_ptr = (&(*(*__pyx_v_map_it_ptr)).second);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":737
 *             object opposite_order_book_price = self.c_get_price(trading_pair, is_buy)
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *             SingleTradingPairLimitOrdersIterator orders_it = orders_collection_ptr.begin()             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrdersRIterator orders_rit = orders_collection_ptr.rbegin()
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 */
  __pyx_v_orders_it = __pyx_v_orders_collection_ptr->begin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":738
 *             SingleTradingPairLimitOrders *orders_collection_ptr = address(deref(deref(map_it_ptr)).second)
 *             SingleTradingPairLimitOrdersIterator orders_it = orders_collection_ptr.begin()
 *             SingleTradingPairLimitOrdersRIterator orders_rit = orders_collection_ptr.rbegin()             # <<<<<<<<<<<<<<
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL
 */
  __pyx_v_orders_rit = __pyx_v_orders_collection_ptr->rbegin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":740
 *             SingleTradingPairLimitOrdersRIterator orders_rit = orders_collection_ptr.rbegin()
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         if is_buy:
 */
  __pyx_v_cpp_limit_order_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":742
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL
 * 
 *         if is_buy:             # <<<<<<<<<<<<<<
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 */
  __pyx_t_2 = (__pyx_v_is_buy != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":743
 * 
 *         if is_buy:
 *             while orders_rit != orders_collection_ptr.rend():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_orders_rit != __pyx_v_orders_collection_ptr->rend()) != 0);
      if (!__pyx_t_2) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":744
 *         if is_buy:
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))             # <<<<<<<<<<<<<<
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():
 *                     break
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_rit));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":745
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 */
      __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getPrice();
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_opposite_order_book_price, ((PyObject *)__pyx_t_3), Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":746
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():
 *                     break             # <<<<<<<<<<<<<<
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 */
        goto __pyx_L5_break;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":745
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":747
 *                 if opposite_order_book_price > <object>cpp_limit_order_ptr.getPrice():
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(             # <<<<<<<<<<<<<<
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 *                 inc(orders_rit)
 */
      try {
        __pyx_v_process_order_its.push_back(getIteratorFromReverseIterator<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator>(((std::reverse_iterator<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator> )__pyx_v_orders_rit)));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 747, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":749
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 *                 inc(orders_rit)             # <<<<<<<<<<<<<<
 *         else:
 *             while orders_it != orders_collection_ptr.end():
 */
      (void)((__pyx_v_orders_rit++));
    }
    __pyx_L5_break:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":742
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL
 * 
 *         if is_buy:             # <<<<<<<<<<<<<<
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":751
 *                 inc(orders_rit)
 *         else:
 *             while orders_it != orders_collection_ptr.end():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():
 */
  /*else*/ {
    while (1) {
      __pyx_t_2 = ((__pyx_v_orders_it != __pyx_v_orders_collection_ptr->end()) != 0);
      if (!__pyx_t_2) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":752
 *         else:
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():
 *                     break
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_it));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":753
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(orders_it)
 */
      __pyx_t_3 = __pyx_v_cpp_limit_order_ptr->getPrice();
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_opposite_order_book_price, ((PyObject *)__pyx_t_3), Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":754
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():
 *                     break             # <<<<<<<<<<<<<<
 *                 process_order_its.push_back(orders_it)
 *                 inc(orders_it)
 */
        goto __pyx_L8_break;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":753
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(orders_it)
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":755
 *                 if opposite_order_book_price < <object>cpp_limit_order_ptr.getPrice():
 *                     break
 *                 process_order_its.push_back(orders_it)             # <<<<<<<<<<<<<<
 *                 inc(orders_it)
 * 
 */
      try {
        __pyx_v_process_order_its.push_back(__pyx_v_orders_it);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 755, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":756
 *                     break
 *                 process_order_its.push_back(orders_it)
 *                 inc(orders_it)             # <<<<<<<<<<<<<<
 * 
 *         for orders_it in process_order_its:
 */
      (void)((__pyx_v_orders_it++));
    }
    __pyx_L8_break:;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":758
 *                 inc(orders_it)
 * 
 *         for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *             self.c_process_limit_order(is_buy, limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 */
  __pyx_t_4 = __pyx_v_process_order_its.begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_v_process_order_its.end())) break;
    __pyx_t_5 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_orders_it = __pyx_t_5;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":759
 * 
 *         for orders_it in process_order_its:
 *             self.c_process_limit_order(is_buy, limit_orders_map_ptr, map_it_ptr, orders_it)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_crossed_limit_orders(self):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_limit_order(__pyx_v_self, __pyx_v_is_buy, __pyx_v_limit_orders_map_ptr, __pyx_v_map_it_ptr, __pyx_v_orders_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":758
 *                 inc(orders_it)
 * 
 *         for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *             self.c_process_limit_order(is_buy, limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":721
 *             self.logger().error(f"Error processing limit order.", exc_info=True)
 * 
 *     cdef c_process_crossed_limit_orders_for_trading_pair(self,             # <<<<<<<<<<<<<<
 *                                                          bint is_buy,
 *                                                          LimitOrders *limit_orders_map_ptr,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_crossed_limit_orders_for_trading_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_opposite_order_book_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":761
 *             self.c_process_limit_order(is_buy, limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_crossed_limit_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrders *limit_orders_ptr = address(self._bid_limit_orders)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_process_crossed_limit_orders", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":763
 *     cdef c_process_crossed_limit_orders(self):
 *         cdef:
 *             LimitOrders *limit_orders_ptr = address(self._bid_limit_orders)             # <<<<<<<<<<<<<<
 *             LimitOrdersIterator map_it = limit_orders_ptr.begin()
 * 
 */
  __pyx_v_limit_orders_ptr = (&__pyx_v_self->_bid_limit_orders);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":764
 *         cdef:
 *             LimitOrders *limit_orders_ptr = address(self._bid_limit_orders)
 *             LimitOrdersIterator map_it = limit_orders_ptr.begin()             # <<<<<<<<<<<<<<
 * 
 *         while map_it != limit_orders_ptr.end():
 */
  __pyx_v_map_it = __pyx_v_limit_orders_ptr->begin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":766
 *             LimitOrdersIterator map_it = limit_orders_ptr.begin()
 * 
 *         while map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *             self.c_process_crossed_limit_orders_for_trading_pair(True, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_map_it != __pyx_v_limit_orders_ptr->end()) != 0);
    if (!__pyx_t_1) break;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":767
 * 
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(True, limit_orders_ptr, address(map_it))             # <<<<<<<<<<<<<<
 *             if map_it != limit_orders_ptr.end():
 *                 inc(map_it)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_crossed_limit_orders_for_trading_pair(__pyx_v_self, 1, __pyx_v_limit_orders_ptr, (&__pyx_v_map_it)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":768
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(True, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *                 inc(map_it)
 * 
 */
    __pyx_t_1 = ((__pyx_v_map_it != __pyx_v_limit_orders_ptr->end()) != 0);
    if (__pyx_t_1) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":769
 *             self.c_process_crossed_limit_orders_for_trading_pair(True, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():
 *                 inc(map_it)             # <<<<<<<<<<<<<<
 * 
 *         limit_orders_ptr = address(self._ask_limit_orders)
 */
      (void)((__pyx_v_map_it++));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":768
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(True, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *                 inc(map_it)
 * 
 */
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":771
 *                 inc(map_it)
 * 
 *         limit_orders_ptr = address(self._ask_limit_orders)             # <<<<<<<<<<<<<<
 *         map_it = limit_orders_ptr.begin()
 * 
 */
  __pyx_v_limit_orders_ptr = (&__pyx_v_self->_ask_limit_orders);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":772
 * 
 *         limit_orders_ptr = address(self._ask_limit_orders)
 *         map_it = limit_orders_ptr.begin()             # <<<<<<<<<<<<<<
 * 
 *         while map_it != limit_orders_ptr.end():
 */
  __pyx_v_map_it = __pyx_v_limit_orders_ptr->begin();

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":774
 *         map_it = limit_orders_ptr.begin()
 * 
 *         while map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *             self.c_process_crossed_limit_orders_for_trading_pair(False, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_map_it != __pyx_v_limit_orders_ptr->end()) != 0);
    if (!__pyx_t_1) break;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":775
 * 
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(False, limit_orders_ptr, address(map_it))             # <<<<<<<<<<<<<<
 *             if map_it != limit_orders_ptr.end():
 *                 inc(map_it)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_crossed_limit_orders_for_trading_pair(__pyx_v_self, 0, __pyx_v_limit_orders_ptr, (&__pyx_v_map_it)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":776
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(False, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *                 inc(map_it)
 * 
 */
    __pyx_t_1 = ((__pyx_v_map_it != __pyx_v_limit_orders_ptr->end()) != 0);
    if (__pyx_t_1) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":777
 *             self.c_process_crossed_limit_orders_for_trading_pair(False, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():
 *                 inc(map_it)             # <<<<<<<<<<<<<<
 * 
 *     # <editor-fold desc="Event listener functions">
 */
      (void)((__pyx_v_map_it++));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":776
 *         while map_it != limit_orders_ptr.end():
 *             self.c_process_crossed_limit_orders_for_trading_pair(False, limit_orders_ptr, address(map_it))
 *             if map_it != limit_orders_ptr.end():             # <<<<<<<<<<<<<<
 *                 inc(map_it)
 * 
 */
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":761
 *             self.c_process_limit_order(is_buy, limit_orders_map_ptr, map_it_ptr, orders_it)
 * 
 *     cdef c_process_crossed_limit_orders(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrders *limit_orders_ptr = address(self._bid_limit_orders)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_process_crossed_limit_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":780
 * 
 *     # <editor-fold desc="Event listener functions">
 *     cdef c_match_trade_to_limit_orders(self, object order_book_trade_event):             # <<<<<<<<<<<<<<
 *         """
 *         Trigger limit orders when incoming market orders have crossed the limit order's price.
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_match_trade_to_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_order_book_trade_event) {
  std::string __pyx_v_cpp_trading_pair;
  int __pyx_v_is_maker_buy;
  PyObject *__pyx_v_trade_price = 0;
  CYTHON_UNUSED PyObject *__pyx_v_trade_quantity = 0;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_orders_collection_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersRIterator __pyx_v_orders_rit;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator>  __pyx_v_process_order_its;
  LimitOrder const *__pyx_v_cpp_limit_order_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_t_6;
  PyObject *__pyx_t_7;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator> ::iterator __pyx_t_8;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_t_9;
  __Pyx_RefNannySetupContext("c_match_trade_to_limit_orders", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":787
 *         """
 *         cdef:
 *             string cpp_trading_pair = order_book_trade_event.trading_pair.encode("utf8")             # <<<<<<<<<<<<<<
 *             bint is_maker_buy = order_book_trade_event.type is TradeType.SELL
 *             object trade_price = order_book_trade_event.price
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book_trade_event, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_utf8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_trading_pair = __pyx_t_4;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":788
 *         cdef:
 *             string cpp_trading_pair = order_book_trade_event.trading_pair.encode("utf8")
 *             bint is_maker_buy = order_book_trade_event.type is TradeType.SELL             # <<<<<<<<<<<<<<
 *             object trade_price = order_book_trade_event.price
 *             object trade_quantity = order_book_trade_event.amount
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book_trade_event, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SELL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_1 == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_is_maker_buy = __pyx_t_5;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":789
 *             string cpp_trading_pair = order_book_trade_event.trading_pair.encode("utf8")
 *             bint is_maker_buy = order_book_trade_event.type is TradeType.SELL
 *             object trade_price = order_book_trade_event.price             # <<<<<<<<<<<<<<
 *             object trade_quantity = order_book_trade_event.amount
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book_trade_event, __pyx_n_s_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trade_price = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":790
 *             bint is_maker_buy = order_book_trade_event.type is TradeType.SELL
 *             object trade_price = order_book_trade_event.price
 *             object trade_quantity = order_book_trade_event.amount             # <<<<<<<<<<<<<<
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_book_trade_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trade_quantity = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":792
 *             object trade_quantity = order_book_trade_event.amount
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy             # <<<<<<<<<<<<<<
 *                                                  else address(self._ask_limit_orders))
 *             LimitOrdersIterator map_it = limit_orders_map_ptr.find(cpp_trading_pair)
 */
  if ((__pyx_v_is_maker_buy != 0)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":791
 *             object trade_price = order_book_trade_event.price
 *             object trade_quantity = order_book_trade_event.amount
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)             # <<<<<<<<<<<<<<
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))
 */
    __pyx_t_6 = (&__pyx_v_self->_bid_limit_orders);
  } else {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":793
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))             # <<<<<<<<<<<<<<
 *             LimitOrdersIterator map_it = limit_orders_map_ptr.find(cpp_trading_pair)
 *             SingleTradingPairLimitOrders *orders_collection_ptr = NULL
 */
    __pyx_t_6 = (&__pyx_v_self->_ask_limit_orders);
  }
  __pyx_v_limit_orders_map_ptr = __pyx_t_6;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":794
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))
 *             LimitOrdersIterator map_it = limit_orders_map_ptr.find(cpp_trading_pair)             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrders *orders_collection_ptr = NULL
 *             SingleTradingPairLimitOrdersIterator orders_it
 */
  __pyx_v_map_it = __pyx_v_limit_orders_map_ptr->find(__pyx_v_cpp_trading_pair);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":795
 *                                                  else address(self._ask_limit_orders))
 *             LimitOrdersIterator map_it = limit_orders_map_ptr.find(cpp_trading_pair)
 *             SingleTradingPairLimitOrders *orders_collection_ptr = NULL             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrdersIterator orders_it
 *             SingleTradingPairLimitOrdersRIterator orders_rit
 */
  __pyx_v_orders_collection_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":799
 *             SingleTradingPairLimitOrdersRIterator orders_rit
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         if map_it == limit_orders_map_ptr.end():
 */
  __pyx_v_cpp_limit_order_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":801
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL
 * 
 *         if map_it == limit_orders_map_ptr.end():             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_5 = ((__pyx_v_map_it == __pyx_v_limit_orders_map_ptr->end()) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":802
 * 
 *         if map_it == limit_orders_map_ptr.end():
 *             return             # <<<<<<<<<<<<<<
 * 
 *         orders_collection_ptr = address(deref(map_it).second)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":801
 *             const CPPLimitOrder *cpp_limit_order_ptr = NULL
 * 
 *         if map_it == limit_orders_map_ptr.end():             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":804
 *             return
 * 
 *         orders_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *         if is_maker_buy:
 *             orders_rit = orders_collection_ptr.rbegin()
 */
  __pyx_v_orders_collection_ptr = (&(*__pyx_v_map_it).second);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":805
 * 
 *         orders_collection_ptr = address(deref(map_it).second)
 *         if is_maker_buy:             # <<<<<<<<<<<<<<
 *             orders_rit = orders_collection_ptr.rbegin()
 *             while orders_rit != orders_collection_ptr.rend():
 */
  __pyx_t_5 = (__pyx_v_is_maker_buy != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":806
 *         orders_collection_ptr = address(deref(map_it).second)
 *         if is_maker_buy:
 *             orders_rit = orders_collection_ptr.rbegin()             # <<<<<<<<<<<<<<
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 */
    __pyx_v_orders_rit = __pyx_v_orders_collection_ptr->rbegin();

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":807
 *         if is_maker_buy:
 *             orders_rit = orders_collection_ptr.rbegin()
 *             while orders_rit != orders_collection_ptr.rend():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:
 */
    while (1) {
      __pyx_t_5 = ((__pyx_v_orders_rit != __pyx_v_orders_collection_ptr->rend()) != 0);
      if (!__pyx_t_5) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":808
 *             orders_rit = orders_collection_ptr.rbegin()
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))             # <<<<<<<<<<<<<<
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:
 *                     break
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_rit));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":809
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 */
      __pyx_t_7 = __pyx_v_cpp_limit_order_ptr->getPrice();
      __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_t_7), __pyx_v_trade_price, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 809, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":810
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:
 *                     break             # <<<<<<<<<<<<<<
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 */
        goto __pyx_L6_break;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":809
 *             while orders_rit != orders_collection_ptr.rend():
 *                 cpp_limit_order_ptr = address(deref(orders_rit))
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":811
 *                 if <object>cpp_limit_order_ptr.getPrice() <= trade_price:
 *                     break
 *                 process_order_its.push_back(getIteratorFromReverseIterator(             # <<<<<<<<<<<<<<
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 *                 inc(orders_rit)
 */
      try {
        __pyx_v_process_order_its.push_back(getIteratorFromReverseIterator<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator>(((std::reverse_iterator<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator> )__pyx_v_orders_rit)));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 811, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":813
 *                 process_order_its.push_back(getIteratorFromReverseIterator(
 *                     <reverse_iterator[SingleTradingPairLimitOrdersIterator]>orders_rit))
 *                 inc(orders_rit)             # <<<<<<<<<<<<<<
 *         else:
 *             orders_it = orders_collection_ptr.begin()
 */
      (void)((__pyx_v_orders_rit++));
    }
    __pyx_L6_break:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":805
 * 
 *         orders_collection_ptr = address(deref(map_it).second)
 *         if is_maker_buy:             # <<<<<<<<<<<<<<
 *             orders_rit = orders_collection_ptr.rbegin()
 *             while orders_rit != orders_collection_ptr.rend():
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":815
 *                 inc(orders_rit)
 *         else:
 *             orders_it = orders_collection_ptr.begin()             # <<<<<<<<<<<<<<
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 */
  /*else*/ {
    __pyx_v_orders_it = __pyx_v_orders_collection_ptr->begin();

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":816
 *         else:
 *             orders_it = orders_collection_ptr.begin()
 *             while orders_it != orders_collection_ptr.end():             # <<<<<<<<<<<<<<
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:
 */
    while (1) {
      __pyx_t_5 = ((__pyx_v_orders_it != __pyx_v_orders_collection_ptr->end()) != 0);
      if (!__pyx_t_5) break;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":817
 *             orders_it = orders_collection_ptr.begin()
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:
 *                     break
 */
      __pyx_v_cpp_limit_order_ptr = (&(*__pyx_v_orders_it));

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":818
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(orders_it)
 */
      __pyx_t_7 = __pyx_v_cpp_limit_order_ptr->getPrice();
      __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_t_7), __pyx_v_trade_price, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 818, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":819
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:
 *                     break             # <<<<<<<<<<<<<<
 *                 process_order_its.push_back(orders_it)
 *                 inc(orders_it)
 */
        goto __pyx_L9_break;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":818
 *             while orders_it != orders_collection_ptr.end():
 *                 cpp_limit_order_ptr = address(deref(orders_it))
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:             # <<<<<<<<<<<<<<
 *                     break
 *                 process_order_its.push_back(orders_it)
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":820
 *                 if <object>cpp_limit_order_ptr.getPrice() >= trade_price:
 *                     break
 *                 process_order_its.push_back(orders_it)             # <<<<<<<<<<<<<<
 *                 inc(orders_it)
 * 
 */
      try {
        __pyx_v_process_order_its.push_back(__pyx_v_orders_it);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 820, __pyx_L1_error)
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":821
 *                     break
 *                 process_order_its.push_back(orders_it)
 *                 inc(orders_it)             # <<<<<<<<<<<<<<
 * 
 *         for orders_it in process_order_its:
 */
      (void)((__pyx_v_orders_it++));
    }
    __pyx_L9_break:;
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":823
 *                 inc(orders_it)
 * 
 *         for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *             self.c_process_limit_order(is_maker_buy, limit_orders_map_ptr, address(map_it), orders_it)
 * 
 */
  __pyx_t_8 = __pyx_v_process_order_its.begin();
  for (;;) {
    if (!(__pyx_t_8 != __pyx_v_process_order_its.end())) break;
    __pyx_t_9 = *__pyx_t_8;
    ++__pyx_t_8;
    __pyx_v_orders_it = __pyx_t_9;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":824
 * 
 *         for orders_it in process_order_its:
 *             self.c_process_limit_order(is_maker_buy, limit_orders_map_ptr, address(map_it), orders_it)             # <<<<<<<<<<<<<<
 * 
 *     # </editor-fold>
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_limit_order(__pyx_v_self, __pyx_v_is_maker_buy, __pyx_v_limit_orders_map_ptr, (&__pyx_v_map_it), __pyx_v_orders_it); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":823
 *                 inc(orders_it)
 * 
 *         for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *             self.c_process_limit_order(is_maker_buy, limit_orders_map_ptr, address(map_it), orders_it)
 * 
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":780
 * 
 *     # <editor-fold desc="Event listener functions">
 *     cdef c_match_trade_to_limit_orders(self, object order_book_trade_event):             # <<<<<<<<<<<<<<
 *         """
 *         Trigger limit orders when incoming market orders have crossed the limit order's price.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_match_trade_to_limit_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trade_price);
  __Pyx_XDECREF(__pyx_v_trade_quantity);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":828
 *     # </editor-fold>
 * 
 *     cdef object c_get_available_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self.available_balances.get(currency.upper(), s_decimal_0)
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("c_get_available_balance", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":829
 * 
 *     cdef object c_get_available_balance(self, str currency):
 *         return self.available_balances.get(currency.upper(), s_decimal_0)             # <<<<<<<<<<<<<<
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_available_balances); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_currency, __pyx_n_s_upper); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":828
 *     # </editor-fold>
 * 
 *     cdef object c_get_available_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self.available_balances.get(currency.upper(), s_decimal_0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_19generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":831
 *         return self.available_balances.get(currency.upper(), s_decimal_0)
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18get_active_exchange_markets(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18get_active_exchange_markets(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_17get_active_exchange_markets(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_17get_active_exchange_markets(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 831, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_19generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_active_exchange_markets, __pyx_n_s_PaperTradeExchange_get_active_ex, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_19generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 831, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":832
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()             # <<<<<<<<<<<<<<
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_data_source); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_active_exchange_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 832, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":831
 *         return self.available_balances.get(currency.upper(), s_decimal_0)
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_22generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":834
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrders *limit_orders_map_ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_21cancel_all(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeout_seconds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_21cancel_all(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeout_seconds) {
  CYTHON_UNUSED double __pyx_v_timeout_seconds;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all (wrapper)", 0);
  assert(__pyx_arg_timeout_seconds); {
    __pyx_v_timeout_seconds = __pyx_PyFloat_AsDouble(__pyx_arg_timeout_seconds); if (unlikely((__pyx_v_timeout_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_20cancel_all(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((double)__pyx_v_timeout_seconds));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_20cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED double __pyx_v_timeout_seconds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 834, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_timeout_seconds = __pyx_v_timeout_seconds;
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_22generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_all, __pyx_n_s_PaperTradeExchange_cancel_all, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_22generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 834, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":837
 *         cdef:
 *             LimitOrders *limit_orders_map_ptr
 *             list cancellation_results = []             # <<<<<<<<<<<<<<
 *         limit_orders_map_ptr = address(self._bid_limit_orders)
 *         for trading_pair_str in self._trading_pairs.keys():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_cancellation_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":838
 *             LimitOrders *limit_orders_map_ptr
 *             list cancellation_results = []
 *         limit_orders_map_ptr = address(self._bid_limit_orders)             # <<<<<<<<<<<<<<
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 */
  __pyx_cur_scope->__pyx_v_limit_orders_map_ptr = (&__pyx_cur_scope->__pyx_v_self->_bid_limit_orders);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":839
 *             list cancellation_results = []
 *         limit_orders_map_ptr = address(self._bid_limit_orders)
 *         for trading_pair_str in self._trading_pairs.keys():             # <<<<<<<<<<<<<<
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 *             cancellation_results.extend(results)
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 839, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_self->_trading_pairs, 1, __pyx_n_s_keys, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_trading_pair_str);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_trading_pair_str, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":840
 *         limit_orders_map_ptr = address(self._bid_limit_orders)
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)             # <<<<<<<<<<<<<<
 *             cancellation_results.extend(results)
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_trading_pair_str))||((__pyx_cur_scope->__pyx_v_trading_pair_str) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_cur_scope->__pyx_v_trading_pair_str)->tp_name), 0))) __PYX_ERR(0, 840, __pyx_L1_error)
    __pyx_t_7.__pyx_n = 1;
    __pyx_t_7.cancel_all = 1;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_order_from_orders_map(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_limit_orders_map_ptr, ((PyObject*)__pyx_cur_scope->__pyx_v_trading_pair_str), &__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_results);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_results, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":841
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 *             cancellation_results.extend(results)             # <<<<<<<<<<<<<<
 * 
 *         limit_orders_map_ptr = address(self._ask_limit_orders)
 */
    __pyx_t_8 = __Pyx_PyList_Extend(__pyx_cur_scope->__pyx_v_cancellation_results, __pyx_cur_scope->__pyx_v_results); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 841, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":843
 *             cancellation_results.extend(results)
 * 
 *         limit_orders_map_ptr = address(self._ask_limit_orders)             # <<<<<<<<<<<<<<
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 */
  __pyx_cur_scope->__pyx_v_limit_orders_map_ptr = (&__pyx_cur_scope->__pyx_v_self->_ask_limit_orders);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":844
 * 
 *         limit_orders_map_ptr = address(self._ask_limit_orders)
 *         for trading_pair_str in self._trading_pairs.keys():             # <<<<<<<<<<<<<<
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 *             cancellation_results.extend(results)
 */
  __pyx_t_3 = 0;
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 844, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_self->_trading_pairs, 1, __pyx_n_s_keys, (&__pyx_t_2), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_3, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_trading_pair_str);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_trading_pair_str, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":845
 *         limit_orders_map_ptr = address(self._ask_limit_orders)
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)             # <<<<<<<<<<<<<<
 *             cancellation_results.extend(results)
 *         return cancellation_results
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_trading_pair_str))||((__pyx_cur_scope->__pyx_v_trading_pair_str) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_cur_scope->__pyx_v_trading_pair_str)->tp_name), 0))) __PYX_ERR(0, 845, __pyx_L1_error)
    __pyx_t_7.__pyx_n = 1;
    __pyx_t_7.cancel_all = 1;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_order_from_orders_map(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_limit_orders_map_ptr, ((PyObject*)__pyx_cur_scope->__pyx_v_trading_pair_str), &__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_results);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_results, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":846
 *         for trading_pair_str in self._trading_pairs.keys():
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 *             cancellation_results.extend(results)             # <<<<<<<<<<<<<<
 *         return cancellation_results
 * 
 */
    __pyx_t_8 = __Pyx_PyList_Extend(__pyx_cur_scope->__pyx_v_cancellation_results, __pyx_cur_scope->__pyx_v_results); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 846, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":847
 *             results = self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, cancel_all=True)
 *             cancellation_results.extend(results)
 *         return cancellation_results             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_cancel_order_from_orders_map(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_cancellation_results);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":834
 *         return await self._order_book_tracker.data_source.get_active_exchange_markets()
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             LimitOrders *limit_orders_map_ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":849
 *         return cancellation_results
 * 
 *     cdef object c_cancel_order_from_orders_map(self,             # <<<<<<<<<<<<<<
 *                                                LimitOrders *orders_map,
 *                                                str trading_pair_str,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_orders_map, PyObject *__pyx_v_trading_pair_str, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map *__pyx_optional_args) {

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":852
 *                                                LimitOrders *orders_map,
 *                                                str trading_pair_str,
 *                                                bint cancel_all=False,             # <<<<<<<<<<<<<<
 *                                                str client_order_id=None):
 *         cdef:
 */
  int __pyx_v_cancel_all = ((int)0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":853
 *                                                str trading_pair_str,
 *                                                bint cancel_all=False,
 *                                                str client_order_id=None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 */
  PyObject *__pyx_v_client_order_id = ((PyObject*)Py_None);
  std::string __pyx_v_cpp_trading_pair;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator __pyx_v_map_it;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrders *__pyx_v_limit_orders_collection_ptr;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_v_orders_it;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator>  __pyx_v_process_order_its;
  LimitOrder const *__pyx_v_limit_order_ptr;
  PyObject *__pyx_v_limit_order_cid = 0;
  PyObject *__pyx_v_cancellation_results = 0;
  PyObject *__pyx_v_delete_success = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_err = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::vector<__pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator> ::iterator __pyx_t_9;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int64_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  char const *__pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("c_cancel_order_from_orders_map", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_cancel_all = __pyx_optional_args->cancel_all;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_client_order_id = __pyx_optional_args->client_order_id;
      }
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":855
 *                                                str client_order_id=None):
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")             # <<<<<<<<<<<<<<
 *             LimitOrdersIterator map_it = orders_map.find(cpp_trading_pair)
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL
 */
  if (unlikely(__pyx_v_trading_pair_str == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 855, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_trading_pair = __pyx_t_2;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":856
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 *             LimitOrdersIterator map_it = orders_map.find(cpp_trading_pair)             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL
 *             SingleTradingPairLimitOrdersIterator orders_it
 */
  __pyx_v_map_it = __pyx_v_orders_map->find(__pyx_v_cpp_trading_pair);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":857
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 *             LimitOrdersIterator map_it = orders_map.find(cpp_trading_pair)
 *             SingleTradingPairLimitOrders *limit_orders_collection_ptr = NULL             # <<<<<<<<<<<<<<
 *             SingleTradingPairLimitOrdersIterator orders_it
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 */
  __pyx_v_limit_orders_collection_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":860
 *             SingleTradingPairLimitOrdersIterator orders_it
 *             vector[SingleTradingPairLimitOrdersIterator] process_order_its
 *             const CPPLimitOrder *limit_order_ptr = NULL             # <<<<<<<<<<<<<<
 *             str limit_order_cid
 *             list cancellation_results = []
 */
  __pyx_v_limit_order_ptr = NULL;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":862
 *             const CPPLimitOrder *limit_order_ptr = NULL
 *             str limit_order_cid
 *             list cancellation_results = []             # <<<<<<<<<<<<<<
 *         try:
 *             if map_it == orders_map.end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cancellation_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":863
 *             str limit_order_cid
 *             list cancellation_results = []
 *         try:             # <<<<<<<<<<<<<<
 *             if map_it == orders_map.end():
 *                 return []
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":864
 *             list cancellation_results = []
 *         try:
 *             if map_it == orders_map.end():             # <<<<<<<<<<<<<<
 *                 return []
 * 
 */
      __pyx_t_6 = ((__pyx_v_map_it == __pyx_v_orders_map->end()) != 0);
      if (__pyx_t_6) {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":865
 *         try:
 *             if map_it == orders_map.end():
 *                 return []             # <<<<<<<<<<<<<<
 * 
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L7_try_return;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":864
 *             list cancellation_results = []
 *         try:
 *             if map_it == orders_map.end():             # <<<<<<<<<<<<<<
 *                 return []
 * 
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":867
 *                 return []
 * 
 *             limit_orders_collection_ptr = address(deref(map_it).second)             # <<<<<<<<<<<<<<
 *             orders_it = limit_orders_collection_ptr.begin()
 *             while orders_it != limit_orders_collection_ptr.end():
 */
      __pyx_v_limit_orders_collection_ptr = (&(*__pyx_v_map_it).second);

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":868
 * 
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             orders_it = limit_orders_collection_ptr.begin()             # <<<<<<<<<<<<<<
 *             while orders_it != limit_orders_collection_ptr.end():
 *                 limit_order_ptr = address(deref(orders_it))
 */
      __pyx_v_orders_it = __pyx_v_limit_orders_collection_ptr->begin();

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":869
 *             limit_orders_collection_ptr = address(deref(map_it).second)
 *             orders_it = limit_orders_collection_ptr.begin()
 *             while orders_it != limit_orders_collection_ptr.end():             # <<<<<<<<<<<<<<
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 */
      while (1) {
        __pyx_t_6 = ((__pyx_v_orders_it != __pyx_v_limit_orders_collection_ptr->end()) != 0);
        if (!__pyx_t_6) break;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":870
 *             orders_it = limit_orders_collection_ptr.begin()
 *             while orders_it != limit_orders_collection_ptr.end():
 *                 limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:
 */
        __pyx_v_limit_order_ptr = (&(*__pyx_v_orders_it));

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":871
 *             while orders_it != limit_orders_collection_ptr.end():
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")             # <<<<<<<<<<<<<<
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:
 *                     process_order_its.push_back(orders_it)
 */
        __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_limit_order_ptr->getClientOrderID(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_limit_order_cid, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":872
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:             # <<<<<<<<<<<<<<
 *                     process_order_its.push_back(orders_it)
 *                 inc(orders_it)
 */
        __pyx_t_7 = ((!(__pyx_v_cancel_all != 0)) != 0);
        if (!__pyx_t_7) {
          goto __pyx_L14_next_or;
        } else {
        }
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_limit_order_cid, __pyx_v_client_order_id, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 872, __pyx_L3_error)
        __pyx_t_8 = (__pyx_t_7 != 0);
        if (!__pyx_t_8) {
        } else {
          __pyx_t_6 = __pyx_t_8;
          goto __pyx_L13_bool_binop_done;
        }
        __pyx_L14_next_or:;
        __pyx_t_8 = (__pyx_v_cancel_all != 0);
        __pyx_t_6 = __pyx_t_8;
        __pyx_L13_bool_binop_done:;
        if (__pyx_t_6) {

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":873
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:
 *                     process_order_its.push_back(orders_it)             # <<<<<<<<<<<<<<
 *                 inc(orders_it)
 * 
 */
          try {
            __pyx_v_process_order_its.push_back(__pyx_v_orders_it);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 873, __pyx_L3_error)
          }

          /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":872
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:             # <<<<<<<<<<<<<<
 *                     process_order_its.push_back(orders_it)
 *                 inc(orders_it)
 */
        }

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":874
 *                 if (not cancel_all and limit_order_cid == client_order_id) or cancel_all:
 *                     process_order_its.push_back(orders_it)
 *                 inc(orders_it)             # <<<<<<<<<<<<<<
 * 
 *             for orders_it in process_order_its:
 */
        (void)((__pyx_v_orders_it++));
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":876
 *                 inc(orders_it)
 * 
 *             for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 */
      __pyx_t_9 = __pyx_v_process_order_its.begin();
      for (;;) {
        if (!(__pyx_t_9 != __pyx_v_process_order_its.end())) break;
        __pyx_t_10 = *__pyx_t_9;
        ++__pyx_t_9;
        __pyx_v_orders_it = __pyx_t_10;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":877
 * 
 *             for orders_it in process_order_its:
 *                 limit_order_ptr = address(deref(orders_it))             # <<<<<<<<<<<<<<
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)
 */
        __pyx_v_limit_order_ptr = (&(*__pyx_v_orders_it));

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":878
 *             for orders_it in process_order_its:
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")             # <<<<<<<<<<<<<<
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)
 *                 cancellation_results.append(CancellationResult(limit_order_cid,
 */
        __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_limit_order_ptr->getClientOrderID(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_limit_order_cid, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":879
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)             # <<<<<<<<<<<<<<
 *                 cancellation_results.append(CancellationResult(limit_order_cid,
 *                                                                delete_success))
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_delete_limit_order(__pyx_v_self, __pyx_v_orders_map, (&__pyx_v_map_it), __pyx_v_orders_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_delete_success, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":880
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)
 *                 cancellation_results.append(CancellationResult(limit_order_cid,             # <<<<<<<<<<<<<<
 *                                                                delete_success))
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 880, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":881
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)
 *                 cancellation_results.append(CancellationResult(limit_order_cid,
 *                                                                delete_success))             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp,
 */
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_limit_order_cid, __pyx_v_delete_success};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_limit_order_cid, __pyx_v_delete_success};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 880, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (__pyx_t_12) {
            __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
          }
          __Pyx_INCREF(__pyx_v_limit_order_cid);
          __Pyx_GIVEREF(__pyx_v_limit_order_cid);
          PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_v_limit_order_cid);
          __Pyx_INCREF(__pyx_v_delete_success);
          __Pyx_GIVEREF(__pyx_v_delete_success);
          PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_v_delete_success);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":880
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 *                 delete_success = self.c_delete_limit_order(orders_map, address(map_it), orders_it)
 *                 cancellation_results.append(CancellationResult(limit_order_cid,             # <<<<<<<<<<<<<<
 *                                                                delete_success))
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_cancellation_results, __pyx_t_1); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 880, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":882
 *                 cancellation_results.append(CancellationResult(limit_order_cid,
 *                                                                delete_success))
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          limit_order_cid)
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_16 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_16 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":883
 *                                                                delete_success))
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                          limit_order_cid)
 *                                      )
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 883, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 883, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":884
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          limit_order_cid)             # <<<<<<<<<<<<<<
 *                                      )
 *             return cancellation_results
 */
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_14, __pyx_v_limit_order_cid};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
          PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_14, __pyx_v_limit_order_cid};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 883, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_17);
          if (__pyx_t_12) {
            __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_12); __pyx_t_12 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_13, __pyx_t_14);
          __Pyx_INCREF(__pyx_v_limit_order_cid);
          __Pyx_GIVEREF(__pyx_v_limit_order_cid);
          PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_13, __pyx_v_limit_order_cid);
          __pyx_t_14 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":882
 *                 cancellation_results.append(CancellationResult(limit_order_cid,
 *                                                                delete_success))
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          limit_order_cid)
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_16, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 882, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":876
 *                 inc(orders_it)
 * 
 *             for orders_it in process_order_its:             # <<<<<<<<<<<<<<
 *                 limit_order_ptr = address(deref(orders_it))
 *                 limit_order_cid = limit_order_ptr.getClientOrderID().decode("utf8")
 */
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":886
 *                                                          limit_order_cid)
 *                                      )
 *             return cancellation_results             # <<<<<<<<<<<<<<
 *         except Exception as err:
 *             self.logger().error(f"Error canceling order.", exc_info=True)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_cancellation_results);
      __pyx_r = __pyx_v_cancellation_results;
      goto __pyx_L7_try_return;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":863
 *             str limit_order_cid
 *             list cancellation_results = []
 *         try:             # <<<<<<<<<<<<<<
 *             if map_it == orders_map.end():
 *                 return []
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":887
 *                                      )
 *             return cancellation_results
 *         except Exception as err:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Error canceling order.", exc_info=True)
 * 
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_cancel_order_from_orders_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_1, &__pyx_t_17) < 0) __PYX_ERR(0, 887, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_err = __pyx_t_1;
      /*try:*/ {

        /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":888
 *             return cancellation_results
 *         except Exception as err:
 *             self.logger().error(f"Error canceling order.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel(self, str trading_pair_str, str client_order_id):
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 888, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_18 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_18)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_18);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_14 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 888, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_error); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 888, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 888, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 888, __pyx_L23_error)
        __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__19, __pyx_t_14); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 888, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      }

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":887
 *                                      )
 *             return cancellation_results
 *         except Exception as err:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Error canceling order.", exc_info=True)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_err);
          __pyx_v_err = NULL;
          goto __pyx_L24;
        }
        __pyx_L23_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23) < 0)) __Pyx_ErrFetch(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_26);
          __pyx_t_13 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_err);
            __pyx_v_err = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_XGIVEREF(__pyx_t_25);
            __Pyx_XGIVEREF(__pyx_t_26);
            __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);
          }
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_XGIVEREF(__pyx_t_22);
          __Pyx_XGIVEREF(__pyx_t_23);
          __Pyx_ErrRestore(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;
          goto __pyx_L5_except_error;
        }
        __pyx_L24:;
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":863
 *             str limit_order_cid
 *             list cancellation_results = []
 *         try:             # <<<<<<<<<<<<<<
 *             if map_it == orders_map.end():
 *                 return []
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":849
 *         return cancellation_results
 * 
 *     cdef object c_cancel_order_from_orders_map(self,             # <<<<<<<<<<<<<<
 *                                                LimitOrders *orders_map,
 *                                                str trading_pair_str,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_cancel_order_from_orders_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_limit_order_cid);
  __Pyx_XDECREF(__pyx_v_cancellation_results);
  __Pyx_XDECREF(__pyx_v_delete_success);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":890
 *             self.logger().error(f"Error canceling order.", exc_info=True)
 * 
 *     cdef c_cancel(self, str trading_pair_str, str client_order_id):             # <<<<<<<<<<<<<<
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair_str, PyObject *__pyx_v_client_order_id) {
  CYTHON_UNUSED std::string __pyx_v_cpp_trading_pair;
  CYTHON_UNUSED std::string __pyx_v_cpp_client_order_id;
  PyObject *__pyx_v_trade_type = 0;
  int __pyx_v_is_maker_buy;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_v_limit_orders_map_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *__pyx_t_6;
  struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map __pyx_t_7;
  __Pyx_RefNannySetupContext("c_cancel", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":892
 *     cdef c_cancel(self, str trading_pair_str, str client_order_id):
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")             # <<<<<<<<<<<<<<
 *             string cpp_client_order_id = client_order_id.encode("utf8")
 *             str trade_type = client_order_id.split("://")[0]
 */
  if (unlikely(__pyx_v_trading_pair_str == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 892, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_trading_pair_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_trading_pair = __pyx_t_2;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":893
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 *             string cpp_client_order_id = client_order_id.encode("utf8")             # <<<<<<<<<<<<<<
 *             str trade_type = client_order_id.split("://")[0]
 *             bint is_maker_buy = trade_type.upper() == "BUY"
 */
  if (unlikely(__pyx_v_client_order_id == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_client_order_id = __pyx_t_2;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":894
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 *             string cpp_client_order_id = client_order_id.encode("utf8")
 *             str trade_type = client_order_id.split("://")[0]             # <<<<<<<<<<<<<<
 *             bint is_maker_buy = trade_type.upper() == "BUY"
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 */
  if (unlikely(__pyx_v_client_order_id == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
    __PYX_ERR(0, 894, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_Split(__pyx_v_client_order_id, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 894, __pyx_L1_error)
  __pyx_v_trade_type = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":895
 *             string cpp_client_order_id = client_order_id.encode("utf8")
 *             str trade_type = client_order_id.split("://")[0]
 *             bint is_maker_buy = trade_type.upper() == "BUY"             # <<<<<<<<<<<<<<
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_trade_type, __pyx_n_s_upper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_n_u_BUY, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_is_maker_buy = __pyx_t_5;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":897
 *             bint is_maker_buy = trade_type.upper() == "BUY"
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy             # <<<<<<<<<<<<<<
 *                                                  else address(self._ask_limit_orders))
 *         self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, False, client_order_id)
 */
  if ((__pyx_v_is_maker_buy != 0)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":896
 *             str trade_type = client_order_id.split("://")[0]
 *             bint is_maker_buy = trade_type.upper() == "BUY"
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)             # <<<<<<<<<<<<<<
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))
 */
    __pyx_t_6 = (&__pyx_v_self->_bid_limit_orders);
  } else {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":898
 *             LimitOrders *limit_orders_map_ptr = (address(self._bid_limit_orders)
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))             # <<<<<<<<<<<<<<
 *         self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, False, client_order_id)
 * 
 */
    __pyx_t_6 = (&__pyx_v_self->_ask_limit_orders);
  }
  __pyx_v_limit_orders_map_ptr = __pyx_t_6;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":899
 *                                                  if is_maker_buy
 *                                                  else address(self._ask_limit_orders))
 *         self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, False, client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_fee(self,
 */
  __pyx_t_7.__pyx_n = 2;
  __pyx_t_7.cancel_all = 0;
  __pyx_t_7.client_order_id = __pyx_v_client_order_id;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_order_from_orders_map(__pyx_v_self, __pyx_v_limit_orders_map_ptr, __pyx_v_trading_pair_str, &__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":890
 *             self.logger().error(f"Error canceling order.", exc_info=True)
 * 
 *     cdef c_cancel(self, str trading_pair_str, str client_order_id):             # <<<<<<<<<<<<<<
 *         cdef:
 *             string cpp_trading_pair = trading_pair_str.encode("utf8")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trade_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":901
 *         self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, False, client_order_id)
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_asset,
 *                           str quote_asset,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_asset, CYTHON_UNUSED PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("c_get_fee", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":908
 *                           object amount,
 *                           object price):
 *         return estimate_fee(self.name, order_type is OrderType.LIMIT)             # <<<<<<<<<<<<<<
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_v_order_type == __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":901
 *         self.c_cancel_order_from_orders_map(limit_orders_map_ptr, trading_pair_str, False, client_order_id)
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_asset,
 *                           str quote_asset,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":910
 *         return estimate_fee(self.name, order_type is OrderType.LIMIT)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         if trading_pair not in self._trading_pairs:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 */

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_book", 0);
  __Pyx_INCREF(__pyx_v_trading_pair);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":911
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         if trading_pair not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         trading_pair = self._target_market.convert_to_exchange_trading_pair(trading_pair)
 */
  if (unlikely(__pyx_v_self->_trading_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 911, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_self->_trading_pairs, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 911, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":912
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         if trading_pair not in self._trading_pairs:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")             # <<<<<<<<<<<<<<
 *         trading_pair = self._target_market.convert_to_exchange_trading_pair(trading_pair)
 *         return self._order_book_tracker.order_books[trading_pair]
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_order_book_exists_for);
    __pyx_t_4 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_No_order_book_exists_for);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_No_order_book_exists_for);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__20);
    __pyx_t_4 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__20);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__20);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 912, __pyx_L1_error)

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":911
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         if trading_pair not in self._trading_pairs:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         trading_pair = self._target_market.convert_to_exchange_trading_pair(trading_pair)
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":913
 *         if trading_pair not in self._trading_pairs:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         trading_pair = self._target_market.convert_to_exchange_trading_pair(trading_pair)             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.order_books[trading_pair]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_target_market, __pyx_n_s_convert_to_exchange_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_trading_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_trading_pair, ((PyObject*)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":914
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         trading_pair = self._target_market.convert_to_exchange_trading_pair(trading_pair)
 *         return self._order_book_tracker.order_books[trading_pair]             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_v_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":910
 *         return estimate_fee(self.name, order_type is OrderType.LIMIT)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         if trading_pair not in self._trading_pairs:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":916
 *         return self._order_book_tracker.order_books[trading_pair]
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             QuantizationParams q_params
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_q_params = 0;
  PyObject *__pyx_v_decimals_quantum = NULL;
  PyObject *__pyx_v_precision_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_price_quantum", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":919
 *         cdef:
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:             # <<<<<<<<<<<<<<
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 */
  if (unlikely(__pyx_v_self->_quantization_params == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 919, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_self->_quantization_params, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 919, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":920
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:
 *             q_params = self._quantization_params[trading_pair]             # <<<<<<<<<<<<<<
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 *             if price.is_finite() and price > s_decimal_0:
 */
    if (unlikely(__pyx_v_self->_quantization_params == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 920, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_quantization_params, __pyx_v_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams))))) __PYX_ERR(0, 920, __pyx_L1_error)
    __pyx_v_q_params = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":921
 *         if trading_pair in self._quantization_params:
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")             # <<<<<<<<<<<<<<
 *             if price.is_finite() and price > s_decimal_0:
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - q_params.price_precision}")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_q_params->price_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_decimals_quantum = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":922
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 *             if price.is_finite() and price > s_decimal_0:             # <<<<<<<<<<<<<<
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - q_params.price_precision}")
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_price, __pyx_n_s_is_finite); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L5_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_price, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":923
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 *             if price.is_finite() and price > s_decimal_0:
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - q_params.price_precision}")             # <<<<<<<<<<<<<<
 *             else:
 *                 precision_quantum = Decimal(0)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_math); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_log10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_v_price) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_price);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_q_params->price_precision); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyNumber_Subtract(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_precision_quantum = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":922
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 *             if price.is_finite() and price > s_decimal_0:             # <<<<<<<<<<<<<<
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - q_params.price_precision}")
 *             else:
 */
      goto __pyx_L4;
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":925
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(price)) - q_params.price_precision}")
 *             else:
 *                 precision_quantum = Decimal(0)             # <<<<<<<<<<<<<<
 *             return max(precision_quantum, decimals_quantum)
 *         else:
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_0);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_precision_quantum = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":926
 *             else:
 *                 precision_quantum = Decimal(0)
 *             return max(precision_quantum, decimals_quantum)             # <<<<<<<<<<<<<<
 *         else:
 *             return Decimal(f"1e-10")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_decimals_quantum);
    __pyx_t_4 = __pyx_v_decimals_quantum;
    __Pyx_INCREF(__pyx_v_precision_quantum);
    __pyx_t_3 = __pyx_v_precision_quantum;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 926, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 926, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_2) {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_5 = __pyx_t_4;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = __pyx_t_3;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":919
 *         cdef:
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:             # <<<<<<<<<<<<<<
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.price_decimals}")
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":928
 *             return max(precision_quantum, decimals_quantum)
 *         else:
 *             return Decimal(f"1e-10")             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_size_quantum(self,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_u_1e_10) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_1e_10);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":916
 *         return self._order_book_tracker.order_books[trading_pair]
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             QuantizationParams q_params
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_order_price_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_q_params);
  __Pyx_XDECREF(__pyx_v_decimals_quantum);
  __Pyx_XDECREF(__pyx_v_precision_quantum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":930
 *             return Decimal(f"1e-10")
 * 
 *     cdef object c_get_order_size_quantum(self,             # <<<<<<<<<<<<<<
 *                                          str trading_pair,
 *                                          object order_size):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_size) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v_q_params = 0;
  PyObject *__pyx_v_decimals_quantum = NULL;
  PyObject *__pyx_v_precision_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_size_quantum", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":935
 *         cdef:
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:             # <<<<<<<<<<<<<<
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 */
  if (unlikely(__pyx_v_self->_quantization_params == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 935, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_self->_quantization_params, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 935, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":936
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:
 *             q_params = self._quantization_params[trading_pair]             # <<<<<<<<<<<<<<
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 *             if order_size.is_finite() and order_size > s_decimal_0:
 */
    if (unlikely(__pyx_v_self->_quantization_params == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 936, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->_quantization_params, __pyx_v_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams))))) __PYX_ERR(0, 936, __pyx_L1_error)
    __pyx_v_q_params = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":937
 *         if trading_pair in self._quantization_params:
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")             # <<<<<<<<<<<<<<
 *             if order_size.is_finite() and order_size > s_decimal_0:
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(order_size)) - q_params.order_size_precision}")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_q_params->order_size_decimals, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_decimals_quantum = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":938
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 *             if order_size.is_finite() and order_size > s_decimal_0:             # <<<<<<<<<<<<<<
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(order_size)) - q_params.order_size_precision}")
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_size, __pyx_n_s_is_finite); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L5_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_order_size, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":939
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 *             if order_size.is_finite() and order_size > s_decimal_0:
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(order_size)) - q_params.order_size_precision}")             # <<<<<<<<<<<<<<
 *             else:
 *                 precision_quantum = Decimal(0)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ceil); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_math); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_log10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_v_order_size) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_order_size);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_q_params->order_size_precision); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyNumber_Subtract(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e_2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_precision_quantum = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":938
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 *             if order_size.is_finite() and order_size > s_decimal_0:             # <<<<<<<<<<<<<<
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(order_size)) - q_params.order_size_precision}")
 *             else:
 */
      goto __pyx_L4;
    }

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":941
 *                 precision_quantum = Decimal(f"1e{math.ceil(math.log10(order_size)) - q_params.order_size_precision}")
 *             else:
 *                 precision_quantum = Decimal(0)             # <<<<<<<<<<<<<<
 *             return max(precision_quantum, decimals_quantum)
 *         else:
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_0);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_precision_quantum = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __pyx_L4:;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":942
 *             else:
 *                 precision_quantum = Decimal(0)
 *             return max(precision_quantum, decimals_quantum)             # <<<<<<<<<<<<<<
 *         else:
 *             return Decimal(f"1e-7")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_decimals_quantum);
    __pyx_t_4 = __pyx_v_decimals_quantum;
    __Pyx_INCREF(__pyx_v_precision_quantum);
    __pyx_t_3 = __pyx_v_precision_quantum;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 942, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_2) {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_5 = __pyx_t_4;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = __pyx_t_3;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":935
 *         cdef:
 *             QuantizationParams q_params
 *         if trading_pair in self._quantization_params:             # <<<<<<<<<<<<<<
 *             q_params = self._quantization_params[trading_pair]
 *             decimals_quantum = Decimal(f"1e-{q_params.order_size_decimals}")
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":944
 *             return max(precision_quantum, decimals_quantum)
 *         else:
 *             return Decimal(f"1e-7")             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_price(self,
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_u_1e_7) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_1e_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":930
 *             return Decimal(f"1e-10")
 * 
 *     cdef object c_get_order_size_quantum(self,             # <<<<<<<<<<<<<<
 *                                          str trading_pair,
 *                                          object order_size):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_get_order_size_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_q_params);
  __Pyx_XDECREF(__pyx_v_decimals_quantum);
  __Pyx_XDECREF(__pyx_v_precision_quantum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":946
 *             return Decimal(f"1e-7")
 * 
 *     cdef object c_quantize_order_price(self,             # <<<<<<<<<<<<<<
 *                                        str trading_pair,
 *                                        object price):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_price(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price) {
  PyObject *__pyx_v_price_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("c_quantize_order_price", 0);
  __Pyx_INCREF(__pyx_v_price);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":949
 *                                        str trading_pair,
 *                                        object price):
 *         price = Decimal('%.7g' % price)  # hard code to round to 8 significant digits             # <<<<<<<<<<<<<<
 *         price_quantum = self.c_get_order_price_quantum(trading_pair, price)
 *         return (price // price_quantum) * price_quantum
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7g, __pyx_v_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_price, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":950
 *                                        object price):
 *         price = Decimal('%.7g' % price)  # hard code to round to 8 significant digits
 *         price_quantum = self.c_get_order_price_quantum(trading_pair, price)             # <<<<<<<<<<<<<<
 *         return (price // price_quantum) * price_quantum
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_price_quantum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":951
 *         price = Decimal('%.7g' % price)  # hard code to round to 8 significant digits
 *         price_quantum = self.c_get_order_price_quantum(trading_pair, price)
 *         return (price // price_quantum) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_amount(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":946
 *             return Decimal(f"1e-7")
 * 
 *     cdef object c_quantize_order_price(self,             # <<<<<<<<<<<<<<
 *                                        str trading_pair,
 *                                        object price):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_quantize_order_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_price_quantum);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":953
 *         return (price // price_quantum) * price_quantum
 * 
 *     cdef object c_quantize_order_amount(self,             # <<<<<<<<<<<<<<
 *                                         str trading_pair,
 *                                         object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount *__pyx_optional_args) {
  PyObject *__pyx_v_order_size_quantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("c_quantize_order_amount", 0);
  if (__pyx_optional_args) {
  }
  __Pyx_INCREF(__pyx_v_amount);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":957
 *                                         object amount,
 *                                         object price=s_decimal_0):
 *         amount = Decimal('%.7g' % amount)  # hard code to round to 8 significant digits             # <<<<<<<<<<<<<<
 *         if amount <= 1e-7:
 *             amount = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7g, __pyx_v_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_amount, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":958
 *                                         object price=s_decimal_0):
 *         amount = Decimal('%.7g' % amount)  # hard code to round to 8 significant digits
 *         if amount <= 1e-7:             # <<<<<<<<<<<<<<
 *             amount = 0
 *         order_size_quantum = self.c_get_order_size_quantum(trading_pair, amount)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_amount, __pyx_float_1eneg_7, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":959
 *         amount = Decimal('%.7g' % amount)  # hard code to round to 8 significant digits
 *         if amount <= 1e-7:
 *             amount = 0             # <<<<<<<<<<<<<<
 *         order_size_quantum = self.c_get_order_size_quantum(trading_pair, amount)
 *         return (amount // order_size_quantum) * order_size_quantum
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_amount, __pyx_int_0);

    /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":958
 *                                         object price=s_decimal_0):
 *         amount = Decimal('%.7g' % amount)  # hard code to round to 8 significant digits
 *         if amount <= 1e-7:             # <<<<<<<<<<<<<<
 *             amount = 0
 *         order_size_quantum = self.c_get_order_size_quantum(trading_pair, amount)
 */
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":960
 *         if amount <= 1e-7:
 *             amount = 0
 *         order_size_quantum = self.c_get_order_size_quantum(trading_pair, amount)             # <<<<<<<<<<<<<<
 *         return (amount // order_size_quantum) * order_size_quantum
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_order_size_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_size_quantum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":961
 *             amount = 0
 *         order_size_quantum = self.c_get_order_size_quantum(trading_pair, amount)
 *         return (amount // order_size_quantum) * order_size_quantum             # <<<<<<<<<<<<<<
 * 
 *     def get_available_balance(self, currency: str) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_amount, __pyx_v_order_size_quantum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_order_size_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":953
 *         return (price // price_quantum) * price_quantum
 * 
 *     cdef object c_quantize_order_amount(self,             # <<<<<<<<<<<<<<
 *                                         str trading_pair,
 *                                         object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.c_quantize_order_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_size_quantum);
  __Pyx_XDECREF(__pyx_v_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":963
 *         return (amount // order_size_quantum) * order_size_quantum
 * 
 *     def get_available_balance(self, currency: str) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_available_balance(currency)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_24get_available_balance(PyObject *__pyx_v_self, PyObject *__pyx_v_currency); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_24get_available_balance(PyObject *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_available_balance (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_currency), (&PyUnicode_Type), 1, "currency", 1))) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_23get_available_balance(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((PyObject*)__pyx_v_currency));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_23get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_available_balance", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":964
 * 
 *     def get_available_balance(self, currency: str) -> Decimal:
 *         return self.c_get_available_balance(currency)             # <<<<<<<<<<<<<<
 * 
 *     def get_all_balances(self) -> Dict[str, Decimal]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_currency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":963
 *         return (amount // order_size_quantum) * order_size_quantum
 * 
 *     def get_available_balance(self, currency: str) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_available_balance(currency)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":966
 *         return self.c_get_available_balance(currency)
 * 
 *     def get_all_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         return self._account_balances.copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_26get_all_balances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_26get_all_balances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_all_balances (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_25get_all_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_25get_all_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_all_balances", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":967
 * 
 *     def get_all_balances(self) -> Dict[str, Decimal]:
 *         return self._account_balances.copy()             # <<<<<<<<<<<<<<
 * 
 *     # <editor-fold desc="Python wrapper for cdef functions">
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 967, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_v_self->__pyx_base.__pyx_base._account_balances); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":966
 *         return self.c_get_available_balance(currency)
 * 
 *     def get_all_balances(self) -> Dict[str, Decimal]:             # <<<<<<<<<<<<<<
 *         return self._account_balances.copy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_all_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":970
 * 
 *     # <editor-fold desc="Python wrapper for cdef functions">
 *     def match_trade_to_limit_orders(self, event_object: OrderBookTradeEvent):             # <<<<<<<<<<<<<<
 *         self.c_match_trade_to_limit_orders(event_object)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_28match_trade_to_limit_orders(PyObject *__pyx_v_self, PyObject *__pyx_v_event_object); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_28match_trade_to_limit_orders(PyObject *__pyx_v_self, PyObject *__pyx_v_event_object) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_trade_to_limit_orders (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_27match_trade_to_limit_orders(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((PyObject *)__pyx_v_event_object));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_27match_trade_to_limit_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_event_object) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("match_trade_to_limit_orders", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":971
 *     # <editor-fold desc="Python wrapper for cdef functions">
 *     def match_trade_to_limit_orders(self, event_object: OrderBookTradeEvent):
 *         self.c_match_trade_to_limit_orders(event_object)             # <<<<<<<<<<<<<<
 * 
 *     def set_balance(self, currency: str, balance: Decimal):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_match_trade_to_limit_orders(__pyx_v_self, __pyx_v_event_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":970
 * 
 *     # <editor-fold desc="Python wrapper for cdef functions">
 *     def match_trade_to_limit_orders(self, event_object: OrderBookTradeEvent):             # <<<<<<<<<<<<<<
 *         self.c_match_trade_to_limit_orders(event_object)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.match_trade_to_limit_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":973
 *         self.c_match_trade_to_limit_orders(event_object)
 * 
 *     def set_balance(self, currency: str, balance: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_set_balance(currency, balance)
 *     # </editor-fold>
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_30set_balance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_30set_balance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_currency = 0;
  PyObject *__pyx_v_balance = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_balance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_currency,&__pyx_n_s_balance,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_currency)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_balance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_balance", 1, 2, 2, 1); __PYX_ERR(0, 973, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_balance") < 0)) __PYX_ERR(0, 973, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_currency = ((PyObject*)values[0]);
    __pyx_v_balance = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_balance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 973, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.set_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_currency), (&PyUnicode_Type), 1, "currency", 1))) __PYX_ERR(0, 973, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_29set_balance(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_currency, __pyx_v_balance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_29set_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_currency, PyObject *__pyx_v_balance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_balance", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":974
 * 
 *     def set_balance(self, currency: str, balance: Decimal):
 *         self.c_set_balance(currency, balance)             # <<<<<<<<<<<<<<
 *     # </editor-fold>
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_balance(__pyx_v_self, __pyx_v_currency, __pyx_v_balance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":973
 *         self.c_match_trade_to_limit_orders(event_object)
 * 
 *     def set_balance(self, currency: str, balance: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_set_balance(currency, balance)
 *     # </editor-fold>
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.set_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":977
 *     # </editor-fold>
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_32get_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_32get_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, 1); __PYX_ERR(0, 977, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_price") < 0)) __PYX_ERR(0, 977, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_is_buy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 977, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_31get_price(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_31get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":978
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 *         return self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":977
 *     # </editor-fold>
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":980
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_34buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_34buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buy (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__21;
    values[3] = __pyx_k__22;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, 1); __PYX_ERR(0, 980, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "buy") < 0)) __PYX_ERR(0, 980, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 980, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_33buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_33buy(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy __pyx_t_2;
  __Pyx_RefNannySetupContext("buy", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":982
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_buy(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":980
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":984
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_36sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_36sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sell (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__23;
    values[3] = __pyx_k__24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, 1); __PYX_ERR(0, 984, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "sell") < 0)) __PYX_ERR(0, 984, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 984, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 984, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_35sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_35sell(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell __pyx_t_2;
  __Pyx_RefNannySetupContext("sell", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":986
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_sell(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":984
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":988
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_38cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_38cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, 1); __PYX_ERR(0, 988, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cancel") < 0)) __PYX_ERR(0, 988, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_client_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 988, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 988, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_37cancel(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_37cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cancel", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":989
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 *         return self.c_cancel(trading_pair, client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     def get_fee(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":988
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":991
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_40get_fee(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_40get_fee(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_base_currency = 0;
  PyObject *__pyx_v_quote_currency = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fee (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__25;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_base_currency)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quote_currency)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 1); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 2); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 3); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 4); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_fee") < 0)) __PYX_ERR(0, 991, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_base_currency = ((PyObject*)values[0]);
    __pyx_v_quote_currency = ((PyObject*)values[1]);
    __pyx_v_order_type = values[2];
    __pyx_v_order_side = values[3];
    __pyx_v_amount = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 991, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_currency), (&PyUnicode_Type), 1, "base_currency", 1))) __PYX_ERR(0, 992, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quote_currency), (&PyUnicode_Type), 1, "quote_currency", 1))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_39get_fee(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_39get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_fee", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":998
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_0):
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)             # <<<<<<<<<<<<<<
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":991
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1000
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_42get_order_book(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair); /*proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_42get_order_book(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_book (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1000, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_41get_order_book(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((PyObject*)__pyx_v_trading_pair));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_41get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_order_book", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1001
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 *         return self.c_get_order_book(trading_pair)             # <<<<<<<<<<<<<<
 * 
 *     def get_maker_order_type(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_book(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_trading_pair)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1000
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1003
 *         return self.c_get_order_book(trading_pair)
 * 
 *     def get_maker_order_type(self):             # <<<<<<<<<<<<<<
 *         return OrderType.LIMIT
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_44get_maker_order_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_44get_maker_order_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_maker_order_type (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_43get_maker_order_type(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_43get_maker_order_type(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_maker_order_type", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1004
 * 
 *     def get_maker_order_type(self):
 *         return OrderType.LIMIT             # <<<<<<<<<<<<<<
 * 
 *     def get_taker_order_type(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1003
 *         return self.c_get_order_book(trading_pair)
 * 
 *     def get_maker_order_type(self):             # <<<<<<<<<<<<<<
 *         return OrderType.LIMIT
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_maker_order_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1006
 *         return OrderType.LIMIT
 * 
 *     def get_taker_order_type(self):             # <<<<<<<<<<<<<<
 *         return OrderType.LIMIT
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_46get_taker_order_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_46get_taker_order_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_taker_order_type (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_45get_taker_order_type(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_45get_taker_order_type(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_taker_order_type", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1007
 * 
 *     def get_taker_order_type(self):
 *         return OrderType.LIMIT             # <<<<<<<<<<<<<<
 * 
 *     async def trigger_event_async(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1006
 *         return OrderType.LIMIT
 * 
 *     def get_taker_order_type(self):             # <<<<<<<<<<<<<<
 *         return OrderType.LIMIT
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.get_taker_order_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_49generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1009
 *         return OrderType.LIMIT
 * 
 *     async def trigger_event_async(self,             # <<<<<<<<<<<<<<
 *                                   event_tag,
 *                                   event):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_48trigger_event_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_48trigger_event_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_event_tag = 0;
  PyObject *__pyx_v_event = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trigger_event_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_event_tag,&__pyx_n_s_event,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event_tag)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trigger_event_async", 1, 2, 2, 1); __PYX_ERR(0, 1009, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trigger_event_async") < 0)) __PYX_ERR(0, 1009, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_event_tag = values[0];
    __pyx_v_event = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trigger_event_async", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1009, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.trigger_event_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_47trigger_event_async(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), __pyx_v_event_tag, __pyx_v_event);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_47trigger_event_async(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, PyObject *__pyx_v_event_tag, PyObject *__pyx_v_event) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trigger_event_async", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1009, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_event_tag = __pyx_v_event_tag;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_event_tag);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_event_tag);
  __pyx_cur_scope->__pyx_v_event = __pyx_v_event;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_event);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_event);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_49generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_trigger_event_async, __pyx_n_s_PaperTradeExchange_trigger_event, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!gen)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.trigger_event_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_49generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trigger_event_async", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1009, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1012
 *                                   event_tag,
 *                                   event):
 *         await asyncio.sleep(0.01)             # <<<<<<<<<<<<<<
 *         self.c_trigger_event(event_tag, event)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sleep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_float_0_01) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_0_01);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1012, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 1012, __pyx_L1_error)
    }
  }

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1013
 *                                   event):
 *         await asyncio.sleep(0.01)
 *         self.c_trigger_event(event_tag, event)             # <<<<<<<<<<<<<<
 */
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_cur_scope->__pyx_v_event_tag); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_4, __pyx_cur_scope->__pyx_v_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1009
 *         return OrderType.LIMIT
 * 
 *     async def trigger_event_async(self,             # <<<<<<<<<<<<<<
 *                                   event_tag,
 *                                   event):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("trigger_event_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_50__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_52__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_QuantizationParams(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_1__pyx_unpickle_QuantizationParams(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_1__pyx_unpickle_QuantizationParams = {"__pyx_unpickle_QuantizationParams", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_1__pyx_unpickle_QuantizationParams, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_1__pyx_unpickle_QuantizationParams(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_QuantizationParams (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QuantizationParams", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QuantizationParams", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_QuantizationParams") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QuantizationParams", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QuantizationParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_QuantizationParams", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7857e48:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x7857e48) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7857e48:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x7857e48:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7857e48:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams__set_state(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7857e48 = (order_size_decimals, order_size_precision, price_decimals, price_precision, trading_pair))" % __pyx_checksum)
 *     __pyx_result = QuantizationParams.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_QuantizationParams(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QuantizationParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QuantizationParams__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_QuantizationParams__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->order_size_decimals = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->order_size_precision = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->price_decimals = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->price_precision = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->trading_pair);
  __Pyx_DECREF(__pyx_v___pyx_result->trading_pair);
  __pyx_v___pyx_result->trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QuantizationParams__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_QueuedOrder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_3__pyx_unpickle_QueuedOrder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_3__pyx_unpickle_QueuedOrder = {"__pyx_unpickle_QueuedOrder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_3__pyx_unpickle_QueuedOrder, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_3__pyx_unpickle_QueuedOrder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_QueuedOrder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QueuedOrder", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QueuedOrder", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_QueuedOrder") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_QueuedOrder", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QueuedOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_2__pyx_unpickle_QueuedOrder(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_2__pyx_unpickle_QueuedOrder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_QueuedOrder", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5aefc6c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x5aefc6c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5aefc6c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x5aefc6c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x5a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x5aefc6c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QueuedOrder__set_state(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x5aefc6c = (_amount, _is_buy, _order_id, _trading_pair, create_timestamp))" % __pyx_checksum)
 *     __pyx_result = QueuedOrder.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_QueuedOrder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QueuedOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_QueuedOrder__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_QueuedOrder__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_amount);
  __Pyx_DECREF(__pyx_v___pyx_result->_amount);
  __pyx_v___pyx_result->_amount = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_is_buy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_order_id);
  __Pyx_DECREF(__pyx_v___pyx_result->_order_id);
  __pyx_v___pyx_result->_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_trading_pair);
  __Pyx_DECREF(__pyx_v___pyx_result->_trading_pair);
  __pyx_v___pyx_result->_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->create_timestamp = __pyx_t_3;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 5) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_QueuedOrder__set_state(<QueuedOrder> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_QueuedOrder__set_state(QueuedOrder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._amount = __pyx_state[0]; __pyx_result._is_buy = __pyx_state[1]; __pyx_result._order_id = __pyx_state[2]; __pyx_result._trading_pair = __pyx_state[3]; __pyx_result.create_timestamp = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_QueuedOrder__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderBookTradeListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_5__pyx_unpickle_OrderBookTradeListener(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_5__pyx_unpickle_OrderBookTradeListener = {"__pyx_unpickle_OrderBookTradeListener", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_5__pyx_unpickle_OrderBookTradeListener, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_5__pyx_unpickle_OrderBookTradeListener(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookTradeListener (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookTradeListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookTradeListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_OrderBookTradeListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookTradeListener", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookTradeListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_4__pyx_unpickle_OrderBookTradeListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_4__pyx_unpickle_OrderBookTradeListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookTradeListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x37d9abe) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x37d9abe:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x37, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookTradeListener__set_state(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookTradeListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderBookTradeListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookTradeListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookTradeListener__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookTradeListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._current_event_caller);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base._current_event_caller));
  __pyx_v___pyx_result->__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_market);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->_market));
  __pyx_v___pyx_result->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookTradeListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderBookMarketOrderFillListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_7__pyx_unpickle_OrderBookMarketOrderFillListener(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_7__pyx_unpickle_OrderBookMarketOrderFillListener = {"__pyx_unpickle_OrderBookMarketOrderFillListener", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_7__pyx_unpickle_OrderBookMarketOrderFillListener, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_7__pyx_unpickle_OrderBookMarketOrderFillListener(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookMarketOrderFillListener (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookMarketOrderFillListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookMarketOrderFillListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_OrderBookMarketOrderFillListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderBookMarketOrderFillListener", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookMarketOrderFillListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_6__pyx_unpickle_OrderBookMarketOrderFillListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_6__pyx_unpickle_OrderBookMarketOrderFillListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookMarketOrderFillListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x37d9abe) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x37d9abe:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x37, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x37d9abe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookMarketOrderFillListener__set_state(((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x37d9abe = (_current_event_caller, _current_event_tag, _market))" % __pyx_checksum)
 *     __pyx_result = OrderBookMarketOrderFillListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderBookMarketOrderFillListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookMarketOrderFillListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_unpickle_OrderBookMarketOrderFillListener__set_state(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderBookMarketOrderFillListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base._current_event_caller);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base._current_event_caller));
  __pyx_v___pyx_result->__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_market);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->_market));
  __pyx_v___pyx_result->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(<OrderBookMarketOrderFillListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookMarketOrderFillListener__set_state(OrderBookMarketOrderFillListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_unpickle_OrderBookMarketOrderFillListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 951, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *p;
  PyObject *o = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;
  new((void*)&(p->_bid_limit_orders)) __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders();
  new((void*)&(p->_ask_limit_orders)) __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders();
  new((void*)&(p->_limit_order_expiration_set)) __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrderExpirationSet();
  p->_trading_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_config = Py_None; Py_INCREF(Py_None);
  p->_queued_orders = Py_None; Py_INCREF(Py_None);
  p->_quantization_params = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_book_trade_listener = Py_None; Py_INCREF(Py_None);
  p->_market_order_filled_listener = Py_None; Py_INCREF(Py_None);
  p->_target_market = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_bid_limit_orders);
  __Pyx_call_destructor(p->_ask_limit_orders);
  __Pyx_call_destructor(p->_limit_order_expiration_set);
  Py_CLEAR(p->_trading_pairs);
  Py_CLEAR(p->_config);
  Py_CLEAR(p->_queued_orders);
  Py_CLEAR(p->_quantization_params);
  Py_CLEAR(p->_order_book_trade_listener);
  Py_CLEAR(p->_market_order_filled_listener);
  Py_CLEAR(p->_target_market);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)o;
  e = ((likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) ? ((__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse) ? __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange)); if (e) return e;
  if (p->_trading_pairs) {
    e = (*v)(p->_trading_pairs, a); if (e) return e;
  }
  if (p->_config) {
    e = (*v)(p->_config, a); if (e) return e;
  }
  if (p->_queued_orders) {
    e = (*v)(p->_queued_orders, a); if (e) return e;
  }
  if (p->_quantization_params) {
    e = (*v)(p->_quantization_params, a); if (e) return e;
  }
  if (p->_order_book_trade_listener) {
    e = (*v)(p->_order_book_trade_listener, a); if (e) return e;
  }
  if (p->_market_order_filled_listener) {
    e = (*v)(p->_market_order_filled_listener, a); if (e) return e;
  }
  if (p->_target_market) {
    e = (*v)(p->_target_market, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *)o;
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) { if (__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);
  tmp = ((PyObject*)p->_trading_pairs);
  p->_trading_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_config);
  p->_config = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_queued_orders);
  p->_queued_orders = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_quantization_params);
  p->_quantization_params = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_book_trade_listener);
  p->_order_book_trade_listener = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_market_order_filled_listener);
  p->_market_order_filled_listener = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_target_market);
  p->_target_market = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_trading_pair(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12trading_pair_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_4name_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_display_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12display_name_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_order_books(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11order_books_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_status_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_11status_dict_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_ready(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5ready_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_queued_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_13queued_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_on_hold_balances(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_16on_hold_balances_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_available_balances(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18available_balances_1__get__(o);
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange[] = {
  {"random_order_id", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_3random_order_id, METH_VARARGS|METH_KEYWORDS, 0},
  {"init_paper_trade_market", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_5init_paper_trade_market, METH_NOARGS, 0},
  {"split_trading_pair", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_7split_trading_pair, METH_O, 0},
  {"start_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_9start_network, METH_NOARGS, 0},
  {"stop_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_12stop_network, METH_NOARGS, 0},
  {"check_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_15check_network, METH_NOARGS, 0},
  {"get_active_exchange_markets", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_18get_active_exchange_markets, METH_NOARGS, 0},
  {"cancel_all", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_21cancel_all, METH_O, 0},
  {"get_available_balance", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_24get_available_balance, METH_O, 0},
  {"get_all_balances", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_26get_all_balances, METH_NOARGS, 0},
  {"match_trade_to_limit_orders", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_28match_trade_to_limit_orders, METH_O, 0},
  {"set_balance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_30set_balance, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_price", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_32get_price, METH_VARARGS|METH_KEYWORDS, 0},
  {"buy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_34buy, METH_VARARGS|METH_KEYWORDS, 0},
  {"sell", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_36sell, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_38cancel, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_fee", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_40get_fee, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_order_book", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_42get_order_book, METH_O, 0},
  {"get_maker_order_type", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_44get_maker_order_type, METH_NOARGS, 0},
  {"get_taker_order_type", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_46get_taker_order_type, METH_NOARGS, 0},
  {"trigger_event_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_48trigger_event_async, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange[] = {
  {(char *)"trading_pair", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_trading_pair, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_name, 0, (char *)0, 0},
  {(char *)"display_name", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_display_name, 0, (char *)0, 0},
  {(char *)"order_books", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_order_books, 0, (char *)0, 0},
  {(char *)"status_dict", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_status_dict, 0, (char *)0, 0},
  {(char *)"ready", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_ready, 0, (char *)0, 0},
  {(char *)"queued_orders", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_queued_orders, 0, (char *)0, 0},
  {(char *)"limit_orders", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_limit_orders, 0, (char *)0, 0},
  {(char *)"on_hold_balances", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_on_hold_balances, 0, (char *)0, 0},
  {(char *)"available_balances", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_available_balances, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.PaperTradeExchange", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)o);
  p->trading_pair = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  Py_CLEAR(p->trading_pair);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QuantizationParams", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18QuantizationParams_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)o);
  p->_order_id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_trading_pair = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_amount = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_order_id);
  Py_CLEAR(p->_trading_pair);
  Py_CLEAR(p->_amount);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)o;
  if (p->_amount) {
    e = (*v)(p->_amount, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder *)o;
  tmp = ((PyObject*)p->_amount);
  p->_amount = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_timestamp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_9timestamp_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_order_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_8order_id_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_is_buy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6is_buy_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_trading_pair(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_12trading_pair_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_amount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_6amount_1__get__(o);
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder[] = {
  {(char *)"timestamp", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_timestamp, 0, (char *)0, 0},
  {(char *)"order_id", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_order_id, 0, (char *)0, 0},
  {(char *)"is_buy", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_is_buy, 0, (char *)0, 0},
  {(char *)"trading_pair", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_trading_pair, 0, (char *)0, 0},
  {(char *)"amount", __pyx_getprop_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_amount, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.QueuedOrder", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_11QueuedOrder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *p;
  PyObject *o = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;
  p->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_market);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) ? ((__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse) ? __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener)); if (e) return e;
  if (p->_market) {
    e = (*v)(((PyObject *)p->_market), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) { if (__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener);
  tmp = ((PyObject*)p->_market);
  p->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookTradeListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *p;
  PyObject *o = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;
  p->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_market);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) ? ((__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse) ? __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener)); if (e) return e;
  if (p->_market) {
    e = (*v)(((PyObject *)p->_market), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) { if (__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener);
  tmp = ((PyObject*)p->_market);
  p->_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.OrderBookMarketOrderFillListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct__start_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_1_stop_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_2_check_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_buy_entries);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)o;
  if (p->__pyx_v_buy_entries) {
    e = (*v)(p->__pyx_v_buy_entries, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy *)o;
  tmp = ((PyObject*)p->__pyx_v_buy_entries);
  p->__pyx_v_buy_entries = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_3_c_execute_buy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_row);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_row);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_sell_entries);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)o;
  if (p->__pyx_v_sell_entries) {
    e = (*v)(p->__pyx_v_sell_entries, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell *)o;
  tmp = ((PyObject*)p->__pyx_v_sell_entries);
  p->__pyx_v_sell_entries = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_6_c_execute_sell", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_row);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_row) {
    e = (*v)(p->__pyx_v_row, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_8_get_active_exchange_markets", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cancellation_results);
  Py_CLEAR(p->__pyx_v_results);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trading_pair_str);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all *)o;
  if (p->__pyx_v_cancellation_results) {
    e = (*v)(p->__pyx_v_cancellation_results, a); if (e) return e;
  }
  if (p->__pyx_v_results) {
    e = (*v)(p->__pyx_v_results, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_trading_pair_str) {
    e = (*v)(p->__pyx_v_trading_pair_str, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_9_cancel_all", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async[--__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_event);
  Py_CLEAR(p->__pyx_v_event_tag);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async[__pyx_freecount_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async *)o;
  if (p->__pyx_v_event) {
    e = (*v)(p->__pyx_v_event, a); if (e) return e;
  }
  if (p->__pyx_v_event_tag) {
    e = (*v)(p->__pyx_v_event_tag, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.paper_trade.paper_trade_exchange.__pyx_scope_struct_10_trigger_event_async", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_paper_trade_exchange(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_paper_trade_exchange},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "paper_trade_exchange",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_02x, __pyx_k_02x, sizeof(__pyx_k_02x), 0, 1, 0, 0},
  {&__pyx_kp_u_1e, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {&__pyx_kp_u_1e_10, __pyx_k_1e_10, sizeof(__pyx_k_1e_10), 0, 1, 0, 0},
  {&__pyx_kp_u_1e_2, __pyx_k_1e_2, sizeof(__pyx_k_1e_2), 0, 1, 0, 0},
  {&__pyx_kp_u_1e_7, __pyx_k_1e_7, sizeof(__pyx_k_1e_7), 0, 1, 0, 0},
  {&__pyx_kp_u_7g, __pyx_k_7g, sizeof(__pyx_k_7g), 0, 1, 0, 0},
  {&__pyx_kp_u_8g, __pyx_k_8g, sizeof(__pyx_k_8g), 0, 1, 0, 0},
  {&__pyx_kp_u_Account_balance_does_not_have_as, __pyx_k_Account_balance_does_not_have_as, sizeof(__pyx_k_Account_balance_does_not_have_as), 0, 1, 0, 0},
  {&__pyx_n_s_AssetType, __pyx_k_AssetType, sizeof(__pyx_k_AssetType), 0, 0, 1, 1},
  {&__pyx_n_s_BASE_CURRENCY, __pyx_k_BASE_CURRENCY, sizeof(__pyx_k_BASE_CURRENCY), 0, 0, 1, 1},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_n_u_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 1, 0, 1},
  {&__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG, __pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompleted, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedEvent, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreated, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedEvent, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s_CancellationResult, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {&__pyx_n_s_Clock, __pyx_k_Clock, sizeof(__pyx_k_Clock), 0, 0, 1, 1},
  {&__pyx_n_s_CompositeOrderBook, __pyx_k_CompositeOrderBook, sizeof(__pyx_k_CompositeOrderBook), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_call_trade_listener, __pyx_k_Error_call_trade_listener, sizeof(__pyx_k_Error_call_trade_listener), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_canceling_order, __pyx_k_Error_canceling_order, sizeof(__pyx_k_Error_canceling_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_executing_queued_order, __pyx_k_Error_executing_queued_order, sizeof(__pyx_k_Error_executing_queued_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_processing_limit_order, __pyx_k_Error_processing_limit_order, sizeof(__pyx_k_Error_processing_limit_order), 0, 1, 0, 0},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x37, __pyx_k_Incompatible_checksums_s_vs_0x37, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x37), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x5a, __pyx_k_Incompatible_checksums_s_vs_0x5a, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x5a), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_k_Incompatible_checksums_s_vs_0x78, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x78), 0, 0, 1, 0},
  {&__pyx_kp_u_Insufficient, __pyx_k_Insufficient, sizeof(__pyx_k_Insufficient), 0, 1, 0, 0},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T, sizeof(__pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_MARKET_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MarketConfig, __pyx_k_MarketConfig, sizeof(__pyx_k_MarketConfig), 0, 0, 1, 1},
  {&__pyx_n_s_MarketEvent, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketOrderFailureEvent, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_order_book_exists_for, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_enough, __pyx_k_Not_enough, sizeof(__pyx_k_Not_enough), 0, 1, 0, 0},
  {&__pyx_n_s_ORDER_BOOK_TRADE_EVENT_TAG, __pyx_k_ORDER_BOOK_TRADE_EVENT_TAG, sizeof(__pyx_k_ORDER_BOOK_TRADE_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_FILLED_EVENT_TAG, __pyx_k_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBookEvent, __pyx_k_OrderBookEvent, sizeof(__pyx_k_OrderBookEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBookMarketOrderFillListener, __pyx_k_OrderBookMarketOrderFillListener, sizeof(__pyx_k_OrderBookMarketOrderFillListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBookTracker, __pyx_k_OrderBookTracker, sizeof(__pyx_k_OrderBookTracker), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBookTradeEvent, __pyx_k_OrderBookTradeEvent, sizeof(__pyx_k_OrderBookTradeEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBookTradeListener, __pyx_k_OrderBookTradeListener, sizeof(__pyx_k_OrderBookTradeListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelled, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledEvent, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailure, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilled, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledEvent, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_n_u_PaperTrade, __pyx_k_PaperTrade, sizeof(__pyx_k_PaperTrade), 0, 1, 0, 1},
  {&__pyx_n_s_PaperTradeExchange, __pyx_k_PaperTradeExchange, sizeof(__pyx_k_PaperTradeExchange), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_c_execute_buy, __pyx_k_PaperTradeExchange_c_execute_buy, sizeof(__pyx_k_PaperTradeExchange_c_execute_buy), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_c_execute_sel, __pyx_k_PaperTradeExchange_c_execute_sel, sizeof(__pyx_k_PaperTradeExchange_c_execute_sel), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_cancel_all, __pyx_k_PaperTradeExchange_cancel_all, sizeof(__pyx_k_PaperTradeExchange_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_check_network, __pyx_k_PaperTradeExchange_check_network, sizeof(__pyx_k_PaperTradeExchange_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_get_active_ex, __pyx_k_PaperTradeExchange_get_active_ex, sizeof(__pyx_k_PaperTradeExchange_get_active_ex), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_start_network, __pyx_k_PaperTradeExchange_start_network, sizeof(__pyx_k_PaperTradeExchange_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_stop_network, __pyx_k_PaperTradeExchange_stop_network, sizeof(__pyx_k_PaperTradeExchange_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_PaperTradeExchange_trigger_event, __pyx_k_PaperTradeExchange_trigger_event, sizeof(__pyx_k_PaperTradeExchange_trigger_event), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_u_QuantizationParams, __pyx_k_QuantizationParams, sizeof(__pyx_k_QuantizationParams), 0, 1, 0, 0},
  {&__pyx_n_s_QuantizationParams_2, __pyx_k_QuantizationParams_2, sizeof(__pyx_k_QuantizationParams_2), 0, 0, 1, 1},
  {&__pyx_kp_u_QueuedOrder, __pyx_k_QueuedOrder, sizeof(__pyx_k_QueuedOrder), 0, 1, 0, 0},
  {&__pyx_n_s_QueuedOrder_2, __pyx_k_QueuedOrder_2, sizeof(__pyx_k_QueuedOrder_2), 0, 0, 1, 1},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG, __pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompleted, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedEvent, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreated, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedEvent, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_TRADE_EXECUTION_DELAY, __pyx_k_TRADE_EXECUTION_DELAY, sizeof(__pyx_k_TRADE_EXECUTION_DELAY), 0, 0, 1, 1},
  {&__pyx_n_s_TradeEvent, __pyx_k_TradeEvent, sizeof(__pyx_k_TradeEvent), 0, 0, 1, 1},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_TradingPair, __pyx_k_TradingPair, sizeof(__pyx_k_TradingPair), 0, 0, 1, 1},
  {&__pyx_kp_u_Trading_pair, __pyx_k_Trading_pair, sizeof(__pyx_k_Trading_pair), 0, 1, 0, 0},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_tasks, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {&__pyx_kp_u_available, __pyx_k_available, sizeof(__pyx_k_available), 0, 1, 0, 0},
  {&__pyx_n_s_available_balances, __pyx_k_available_balances, sizeof(__pyx_k_available_balances), 0, 0, 1, 1},
  {&__pyx_kp_u_available_vs, __pyx_k_available_vs, sizeof(__pyx_k_available_vs), 0, 1, 0, 0},
  {&__pyx_n_s_await, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {&__pyx_n_s_balance, __pyx_k_balance, sizeof(__pyx_k_balance), 0, 0, 1, 1},
  {&__pyx_kp_u_balance_available_for_buy_order, __pyx_k_balance_available_for_buy_order, sizeof(__pyx_k_balance_available_for_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_balance_available_for_sell_orde, __pyx_k_balance_available_for_sell_orde, sizeof(__pyx_k_balance_available_for_sell_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_balance_to_fill_limit_buy_order, __pyx_k_balance_to_fill_limit_buy_order, sizeof(__pyx_k_balance_to_fill_limit_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_balance_to_fill_limit_sell_orde, __pyx_k_balance_to_fill_limit_sell_orde, sizeof(__pyx_k_balance_to_fill_limit_sell_orde), 0, 1, 0, 0},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_u_buy, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 1},
  {&__pyx_n_s_buy_fees_asset, __pyx_k_buy_fees_asset, sizeof(__pyx_k_buy_fees_asset), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_all, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_check_network, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
  {&__pyx_n_s_convert_from_exchange_trading_pa, __pyx_k_convert_from_exchange_trading_pa, sizeof(__pyx_k_convert_from_exchange_trading_pa), 0, 0, 1, 1},
  {&__pyx_n_s_convert_to_exchange_trading_pair, __pyx_k_convert_to_exchange_trading_pair, sizeof(__pyx_k_convert_to_exchange_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_create_timestamp, __pyx_k_create_timestamp, sizeof(__pyx_k_create_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_currency, __pyx_k_currency, sizeof(__pyx_k_currency), 0, 0, 1, 1},
  {&__pyx_n_s_data_source, __pyx_k_data_source, sizeof(__pyx_k_data_source), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_does_not_existing_in_current_da, __pyx_k_does_not_existing_in_current_da, sizeof(__pyx_k_does_not_existing_in_current_da), 0, 1, 0, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_estimate_fee, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_event_tag, __pyx_k_event_tag, sizeof(__pyx_k_event_tag), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_name, __pyx_k_exchange_name, sizeof(__pyx_k_exchange_name), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_exchange_markets, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_pa, __pyx_k_hummingbot_connector_exchange_pa, sizeof(__pyx_k_hummingbot_connector_exchange_pa), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_pa_2, __pyx_k_hummingbot_connector_exchange_pa_2, sizeof(__pyx_k_hummingbot_connector_exchange_pa_2), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_clock, __pyx_k_hummingbot_core_clock, sizeof(__pyx_k_hummingbot_core_clock), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_compos, __pyx_k_hummingbot_core_data_type_compos, sizeof(__pyx_k_hummingbot_core_data_type_compos), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_order, __pyx_k_hummingbot_core_data_type_order, sizeof(__pyx_k_hummingbot_core_data_type_order), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_async_util, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init___locals_lambda, __pyx_k_init___locals_lambda, sizeof(__pyx_k_init___locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_init_paper_trade_market, __pyx_k_init_paper_trade_market, sizeof(__pyx_k_init_paper_trade_market), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_finite, __pyx_k_is_finite, sizeof(__pyx_k_is_finite), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_limit_orders, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_log10, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_s_market_config, __pyx_k_market_config, sizeof(__pyx_k_market_config), 0, 0, 1, 1},
  {&__pyx_n_s_match_trade_to_limit_orders, __pyx_k_match_trade_to_limit_orders, sizeof(__pyx_k_match_trade_to_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_needed_vs, __pyx_k_needed_vs, sizeof(__pyx_k_needed_vs), 0, 1, 0, 0},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_on_hold_balances, __pyx_k_on_hold_balances, sizeof(__pyx_k_on_hold_balances), 0, 0, 1, 1},
  {&__pyx_n_s_order_book_create_function, __pyx_k_order_book_create_function, sizeof(__pyx_k_order_book_create_function), 0, 0, 1, 1},
  {&__pyx_n_s_order_book_tracker, __pyx_k_order_book_tracker, sizeof(__pyx_k_order_book_tracker), 0, 0, 1, 1},
  {&__pyx_n_s_order_books, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {&__pyx_n_u_order_books_initialized, __pyx_k_order_books_initialized, sizeof(__pyx_k_order_books_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_order_filled_events_from_order_b, __pyx_k_order_filled_events_from_order_b, sizeof(__pyx_k_order_filled_events_from_order_b), 0, 0, 1, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_side, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {&__pyx_n_s_order_size_decimals, __pyx_k_order_size_decimals, sizeof(__pyx_k_order_size_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_order_size_precision, __pyx_k_order_size_precision, sizeof(__pyx_k_order_size_precision), 0, 0, 1, 1},
  {&__pyx_n_s_order_type, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_price_decimals, __pyx_k_price_decimals, sizeof(__pyx_k_price_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_price_precision, __pyx_k_price_precision, sizeof(__pyx_k_price_precision), 0, 0, 1, 1},
  {&__pyx_n_s_ptm_logger, __pyx_k_ptm_logger, sizeof(__pyx_k_ptm_logger), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderBookMarketOr, __pyx_k_pyx_unpickle_OrderBookMarketOr, sizeof(__pyx_k_pyx_unpickle_OrderBookMarketOr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderBookTradeLis, __pyx_k_pyx_unpickle_OrderBookTradeLis, sizeof(__pyx_k_pyx_unpickle_OrderBookTradeLis), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_QuantizationParam, __pyx_k_pyx_unpickle_QuantizationParam, sizeof(__pyx_k_pyx_unpickle_QuantizationParam), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_QueuedOrder, __pyx_k_pyx_unpickle_QueuedOrder, sizeof(__pyx_k_pyx_unpickle_QueuedOrder), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_random_order_id, __pyx_k_random_order_id, sizeof(__pyx_k_random_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_record_filled_order, __pyx_k_record_filled_order, sizeof(__pyx_k_record_filled_order), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_u_required_for_the_order, __pyx_k_required_for_the_order, sizeof(__pyx_k_required_for_the_order), 0, 1, 0, 0},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_safe_ensure_future, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {&__pyx_kp_s_self__ask_limit_orders_self__bid, __pyx_k_self__ask_limit_orders_self__bid, sizeof(__pyx_k_self__ask_limit_orders_self__bid), 0, 0, 1, 0},
  {&__pyx_n_u_sell, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 1},
  {&__pyx_n_s_sell_fees_amount, __pyx_k_sell_fees_amount, sizeof(__pyx_k_sell_fees_amount), 0, 0, 1, 1},
  {&__pyx_n_s_sell_fees_asset, __pyx_k_sell_fees_asset, sizeof(__pyx_k_sell_fees_asset), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_simulate_buy, __pyx_k_simulate_buy, sizeof(__pyx_k_simulate_buy), 0, 0, 1, 1},
  {&__pyx_n_s_simulate_sell, __pyx_k_simulate_sell, sizeof(__pyx_k_simulate_sell), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_split_trading_pair, __pyx_k_split_trading_pair, sizeof(__pyx_k_split_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_network, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_status_dict, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_target_market, __pyx_k_target_market, sizeof(__pyx_k_target_market), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_trigger_event_async, __pyx_k_trigger_event_async, sizeof(__pyx_k_trigger_event_async), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 947, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":146
 *             self._market.match_trade_to_limit_orders(event_object)
 *         except Exception as e:
 *             self.logger().error("Error call trade listener.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 * cdef class OrderBookMarketOrderFillListener(EventListener):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Error_call_trade_listener); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":193
 *     @classmethod
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]             # <<<<<<<<<<<<<<
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_256); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":560
 *                         self.c_execute_sell(front_order.order_id, front_order.trading_pair, front_order.amount)
 *                 except Exception as e:
 *                     self.logger().error("Error executing queued order.", exc_info=True)             # <<<<<<<<<<<<<<
 *             else:
 *                 return
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Error_executing_queued_order); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":719
 *                 self.c_process_limit_ask_order(limit_orders_map_ptr, map_it_ptr, orders_it)
 *         except Exception as e:
 *             self.logger().error(f"Error processing limit order.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_crossed_limit_orders_for_trading_pair(self,
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Error_processing_limit_order); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":888
 *             return cancellation_results
 *         except Exception as err:
 *             self.logger().error(f"Error canceling order.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel(self, str trading_pair_str, str client_order_id):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Error_canceling_order); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self__ask_limit_orders_self__bid); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ask_limit_orders,self._bid_limit_orders,self._events,self._limit_order_expiration_set cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self__ask_limit_orders_self__bid); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":66
 * )
 * ptm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":1
 * def __pyx_unpickle_QuantizationParams(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_QuantizationParam, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_QueuedOrder, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__38 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderBookTradeLis, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderBookMarketOr, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_0 = PyFloat_FromDouble(5.0); if (unlikely(!__pyx_float_5_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_7 = PyFloat_FromDouble(1e-7); if (unlikely(!__pyx_float_1eneg_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_58563262 = PyInt_FromLong(58563262L); if (unlikely(!__pyx_int_58563262)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_95353964 = PyInt_FromLong(95353964L); if (unlikely(!__pyx_int_95353964)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126189128 = PyInt_FromLong(126189128L); if (unlikely(!__pyx_int_126189128)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange = &__pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base = *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_start = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_start;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_tick;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_buy = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_buy;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_sell = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_sell;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_cancel = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_get_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_balance;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_get_available_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_available_balance;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_get_order_price_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_price_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_get_order_size_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_size_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_quantize_order_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_price;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.__pyx_base.c_quantize_order_amount = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_quantize_order_amount;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.c_get_order_book = (struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_order_book;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.__pyx_base.c_get_fee = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_get_fee;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_execute_buy = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_buy;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_execute_sell = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_execute_sell;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_market_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_market_orders;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_set_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_set_balance;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_delete_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator const ))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_delete_limit_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, int, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_limit_bid_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_bid_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_limit_ask_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_SingleTradingPairLimitOrdersIterator))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_limit_ask_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_crossed_limit_orders_for_trading_pair = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, int, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrdersIterator *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders_for_trading_pair;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_process_crossed_limit_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_process_crossed_limit_orders;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_match_trade_to_limit_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_match_trade_to_limit_orders;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.c_cancel_order_from_orders_map = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange *, __pyx_t_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_LimitOrders *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_18PaperTradeExchange_c_cancel_order_from_orders_map;
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_base = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PaperTradeExchange, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  if (__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, __pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QuantizationParams_2, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QuantizationParams;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QueuedOrder_2, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_QueuedOrder;
  __pyx_t_2 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_2, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener = &__pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_22OrderBookTradeListener_c_call;
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_base = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderBookTradeListener, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  if (__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookTradeListener;
  __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener = &__pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;
  __pyx_vtable_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_32OrderBookMarketOrderFillListener_c_call;
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_base = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderBookMarketOrderFillListener, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  if (__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_OrderBookMarketOrderFillListener;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct__start_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_1_stop_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_2_check_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_3_c_execute_buy;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 446, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_6_c_execute_sell;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets) < 0) __PYX_ERR(0, 831, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_8_get_active_exchange_markets;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all) < 0) __PYX_ERR(0, 834, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_9_cancel_all;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async = &__pyx_type_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange___pyx_scope_struct_10_trigger_event_async;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(6, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(6, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(10, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(10, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(11, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(12, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(12, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(13, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(13, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(14, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(14, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.composite_order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.composite_order_book", "CompositeOrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook) __PYX_ERR(15, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_20composite_order_book_CompositeOrderBook)) __PYX_ERR(15, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.limit_order", "LimitOrder", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder) __PYX_ERR(16, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "c_create_limit_order_from_cpp_limit_order", (void (**)(void))&__pyx_f_10hummingbot_4core_9data_type_11limit_order_c_create_limit_order_from_cpp_limit_order, "struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(LimitOrder const )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpaper_trade_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpaper_trade_exchange(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_paper_trade_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_paper_trade_exchange(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_paper_trade_exchange(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'paper_trade_exchange' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_paper_trade_exchange(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("paper_trade_exchange", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__connector__exchange__paper_trade__paper_trade_exchange) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.connector.exchange.paper_trade.paper_trade_exchange")) {
      if (unlikely(PyDict_SetItemString(modules, "hummingbot.connector.exchange.paper_trade.paper_trade_exchange", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":3
 * # distutils: sources=['hummingbot/core/cpp/Utils.cpp', 'hummingbot/core/cpp/LimitOrder.cpp', 'hummingbot/core/cpp/OrderExpirationEntry.cpp']
 * 
 * import asyncio             # <<<<<<<<<<<<<<
 * from collections import (
 *     deque, defaultdict
 */
  __pyx_t_1 = __Pyx_patch_asyncio(__Pyx_Import(__pyx_n_s_asyncio, 0, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asyncio, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":5
 * import asyncio
 * from collections import (
 *     deque, defaultdict             # <<<<<<<<<<<<<<
 * )
 * from cpython cimport PyObject
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_deque);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_defaultdict);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":4
 * 
 * import asyncio
 * from collections import (             # <<<<<<<<<<<<<<
 *     deque, defaultdict
 * )
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":8
 * )
 * from cpython cimport PyObject
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * from libcpp cimport bool as cppbool
 * from libcpp.vector cimport vector
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Decimal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":11
 * from libcpp cimport bool as cppbool
 * from libcpp.vector cimport vector
 * import math             # <<<<<<<<<<<<<<
 * import pandas as pd
 * import random
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":12
 * from libcpp.vector cimport vector
 * import math
 * import pandas as pd             # <<<<<<<<<<<<<<
 * import random
 * from typing import (
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pandas, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":13
 * import math
 * import pandas as pd
 * import random             # <<<<<<<<<<<<<<
 * from typing import (
 *     Dict,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":15
 * import random
 * from typing import (
 *     Dict,             # <<<<<<<<<<<<<<
 *     List,
 *     Tuple)
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_Tuple);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":14
 * import pandas as pd
 * import random
 * from typing import (             # <<<<<<<<<<<<<<
 *     Dict,
 *     List,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":28
 * )
 * from hummingbot.core.utils.async_utils import (
 *     safe_ensure_future,             # <<<<<<<<<<<<<<
 * )
 * from hummingbot.core.clock cimport Clock
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_safe_ensure_future);
  __Pyx_GIVEREF(__pyx_n_s_safe_ensure_future);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_safe_ensure_future);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":27
 *     reverse_iterator
 * )
 * from hummingbot.core.utils.async_utils import (             # <<<<<<<<<<<<<<
 *     safe_ensure_future,
 * )
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_async_util, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_ensure_future, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":32
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.clock import (
 *     Clock             # <<<<<<<<<<<<<<
 * )
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Clock);
  __Pyx_GIVEREF(__pyx_n_s_Clock);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Clock);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":31
 * )
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.clock import (             # <<<<<<<<<<<<<<
 *     Clock
 * )
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_clock, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":34
 *     Clock
 * )
 * from hummingbot.core.data_type.cancellation_result import CancellationResult             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.composite_order_book import CompositeOrderBook
 * from hummingbot.core.data_type.composite_order_book cimport CompositeOrderBook
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CancellationResult);
  __Pyx_GIVEREF(__pyx_n_s_CancellationResult);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CancellationResult);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancellationResult, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":35
 * )
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 * from hummingbot.core.data_type.composite_order_book import CompositeOrderBook             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.composite_order_book cimport CompositeOrderBook
 * from hummingbot.core.data_type.limit_order cimport c_create_limit_order_from_cpp_limit_order
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_CompositeOrderBook);
  __Pyx_GIVEREF(__pyx_n_s_CompositeOrderBook);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_CompositeOrderBook);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_compos, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":38
 * from hummingbot.core.data_type.composite_order_book cimport CompositeOrderBook
 * from hummingbot.core.data_type.limit_order cimport c_create_limit_order_from_cpp_limit_order
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.data_type.order_book_tracker import OrderBookTracker
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LimitOrder);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LimitOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LimitOrder, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":40
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.data_type.order_book_tracker import OrderBookTracker             # <<<<<<<<<<<<<<
 * from hummingbot.core.event.events import (
 *     MarketEvent,
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderBookTracker);
  __Pyx_GIVEREF(__pyx_n_s_OrderBookTracker);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderBookTracker);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_order, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderBookTracker, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":42
 * from hummingbot.core.data_type.order_book_tracker import OrderBookTracker
 * from hummingbot.core.event.events import (
 *     MarketEvent,             # <<<<<<<<<<<<<<
 *     OrderType,
 *     TradeType,
 */
  __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketEvent);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketEvent);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_OrderType);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_TradeType);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_OrderFilledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderFilledEvent);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_OrderFilledEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_SellOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_MarketOrderFailureEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketOrderFailureEvent);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_MarketOrderFailureEvent);
  __Pyx_INCREF(__pyx_n_s_OrderBookEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderBookEvent);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_OrderBookEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_SellOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_OrderBookTradeEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderBookTradeEvent);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_OrderBookTradeEvent);
  __Pyx_INCREF(__pyx_n_s_OrderCancelledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderCancelledEvent);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_OrderCancelledEvent);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":41
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.data_type.order_book_tracker import OrderBookTracker
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     MarketEvent,
 *     OrderType,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketEvent, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_2) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderFilledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketOrderFailureEvent, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderBookEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderBookEvent, __pyx_t_2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderBookTradeEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderBookTradeEvent, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderCancelledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":56
 * )
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange.paper_trade.trading_pair import TradingPair
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":57
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.paper_trade.trading_pair import TradingPair
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":58
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange.paper_trade.trading_pair import TradingPair             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TradingPair);
  __Pyx_GIVEREF(__pyx_n_s_TradingPair);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TradingPair);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_pa_2, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TradingPair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradingPair, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":59
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange.paper_trade.trading_pair import TradingPair
 * from hummingbot.core.utils.estimate_fee import estimate_fee             # <<<<<<<<<<<<<<
 * 
 * from .market_config import (
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_estimate_fee);
  __Pyx_GIVEREF(__pyx_n_s_estimate_fee);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_estimate_fee);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_estimate_fee, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":62
 * 
 * from .market_config import (
 *     MarketConfig,             # <<<<<<<<<<<<<<
 *     AssetType
 * )
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MarketConfig);
  __Pyx_GIVEREF(__pyx_n_s_MarketConfig);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MarketConfig);
  __Pyx_INCREF(__pyx_n_s_AssetType);
  __Pyx_GIVEREF(__pyx_n_s_AssetType);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_AssetType);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":61
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * 
 * from .market_config import (             # <<<<<<<<<<<<<<
 *     MarketConfig,
 *     AssetType
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_market_config, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MarketConfig); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketConfig, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AssetType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AssetType, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":65
 *     AssetType
 * )
 * ptm_logger = None             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal(0)
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ptm_logger, Py_None) < 0) __PYX_ERR(0, 65, __pyx_L1_error)

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":66
 * )
 * ptm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":165
 * 
 * cdef class PaperTradeExchange(ExchangeBase):
 *     TRADE_EXECUTION_DELAY = 5.0             # <<<<<<<<<<<<<<
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_TRADE_EXECUTION_DELAY, __pyx_float_5_0) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":166
 * cdef class PaperTradeExchange(ExchangeBase):
 *     TRADE_EXECUTION_DELAY = 5.0
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value             # <<<<<<<<<<<<<<
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_ORDER_FILLED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":167
 *     TRADE_EXECUTION_DELAY = 5.0
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value             # <<<<<<<<<<<<<<
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":168
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":169
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     ORDER_BOOK_TRADE_EVENT_TAG = OrderBookEvent.TradeEvent.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":170
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value             # <<<<<<<<<<<<<<
 *     ORDER_BOOK_TRADE_EVENT_TAG = OrderBookEvent.TradeEvent.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":171
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     ORDER_BOOK_TRADE_EVENT_TAG = OrderBookEvent.TradeEvent.value             # <<<<<<<<<<<<<<
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderBookEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TradeEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_ORDER_BOOK_TRADE_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":172
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     ORDER_BOOK_TRADE_EVENT_TAG = OrderBookEvent.TradeEvent.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value             # <<<<<<<<<<<<<<
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":173
 *     ORDER_BOOK_TRADE_EVENT_TAG = OrderBookEvent.TradeEvent.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, order_book_tracker: OrderBookTracker, config: MarketConfig, target_market: type):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_t_1) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":192
 * 
 *     @classmethod
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:             # <<<<<<<<<<<<<<
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]
 *         return f"{order_side}://" + trading_pair + "/" + "".join([f"{val:02x}" for val in vals])
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange, __pyx_n_s_random_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":191
 *         self.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._market_order_filled_listener)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def random_order_id(cls, order_side: str, trading_pair: str) -> str:
 *         vals = [random.choice(range(0, 256)) for i in range(0, 13)]
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange->tp_dict, __pyx_n_s_random_order_id, __pyx_t_2) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_PaperTradeExchange);

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":329
 *                    str trading_pair_str,
 *                    object amount,
 *                    object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                    object price=s_decimal_0,
 *                    dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__11 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":330
 *                    object amount,
 *                    object order_type=OrderType.MARKET,
 *                    object price=s_decimal_0,             # <<<<<<<<<<<<<<
 *                    dict kwargs={}):
 *         if trading_pair_str not in self._trading_pairs:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__12 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":331
 *                    object order_type=OrderType.MARKET,
 *                    object price=s_decimal_0,
 *                    dict kwargs={}):             # <<<<<<<<<<<<<<
 *         if trading_pair_str not in self._trading_pairs:
 *             raise ValueError(f"Trading pair '{trading_pair_str}' does not existing in current data set.")
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__31 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":384
 *                     str trading_pair_str,
 *                     object amount,
 *                     object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                     object price=s_decimal_0,
 *                     dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":385
 *                     object amount,
 *                     object order_type=OrderType.MARKET,
 *                     object price=s_decimal_0,             # <<<<<<<<<<<<<<
 *                     dict kwargs={}):
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__14 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":386
 *                     object order_type=OrderType.MARKET,
 *                     object price=s_decimal_0,
 *                     dict kwargs={}):             # <<<<<<<<<<<<<<
 * 
 *         if trading_pair_str not in self._trading_pairs:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__32 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":956
 *                                         str trading_pair,
 *                                         object amount,
 *                                         object price=s_decimal_0):             # <<<<<<<<<<<<<<
 *         amount = Decimal('%.7g' % amount)  # hard code to round to 8 significant digits
 *         if amount <= 1e-7:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__33 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":980
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__21 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":981
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_0, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__22 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":984
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_0, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__23 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":985
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_0, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__24 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":997
 *                 order_side: TradeType,
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_0):             # <<<<<<<<<<<<<<
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__25 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_QuantizationParams(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_1__pyx_unpickle_QuantizationParams, NULL, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_QuantizationParam, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_QuantizationParams__set_state(<QuantizationParams> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_QuantizationParams__set_state(QuantizationParams __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.order_size_decimals = __pyx_state[0]; __pyx_result.order_size_precision = __pyx_state[1]; __pyx_result.price_decimals = __pyx_state[2]; __pyx_result.price_precision = __pyx_state[3]; __pyx_result.trading_pair = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_3__pyx_unpickle_QueuedOrder, NULL, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_QueuedOrder, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderBookTradeListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_5__pyx_unpickle_OrderBookTradeListener, NULL, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderBookTradeLis, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderBookTradeListener__set_state(<OrderBookTradeListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderBookTradeListener__set_state(OrderBookTradeListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._market = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_11paper_trade_20paper_trade_exchange_7__pyx_unpickle_OrderBookMarketOrderFillListener, NULL, __pyx_n_s_hummingbot_connector_exchange_pa); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderBookMarketOr, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/paper_trade/paper_trade_exchange.pyx":1
 * # distutils: sources=['hummingbot/core/cpp/Utils.cpp', 'hummingbot/core/cpp/LimitOrder.cpp', 'hummingbot/core/cpp/OrderExpirationEntry.cpp']             # <<<<<<<<<<<<<<
 * 
 * import asyncio
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.connector.exchange.paper_trade.paper_trade_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.connector.exchange.paper_trade.paper_trade_exchange");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Coroutine */
static void __Pyx_CoroutineAwait_dealloc(PyObject *self) {
    PyObject_GC_UnTrack(self);
    Py_CLEAR(((__pyx_CoroutineAwaitObject*)self)->coroutine);
    PyObject_GC_Del(self);
}
static int __Pyx_CoroutineAwait_traverse(__pyx_CoroutineAwaitObject *self, visitproc visit, void *arg) {
    Py_VISIT(self->coroutine);
    return 0;
}
static int __Pyx_CoroutineAwait_clear(__pyx_CoroutineAwaitObject *self) {
    Py_CLEAR(self->coroutine);
    return 0;
}
static PyObject *__Pyx_CoroutineAwait_Next(__pyx_CoroutineAwaitObject *self) {
    return __Pyx_Generator_Next(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_Send(__pyx_CoroutineAwaitObject *self, PyObject *value) {
    return __Pyx_Coroutine_Send(self->coroutine, value);
}
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args) {
    return __Pyx_Coroutine_Throw(self->coroutine, args);
}
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_self(PyObject *self) {
    Py_INCREF(self);
    return self;
}
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_CoroutineAwait_no_new(CYTHON_UNUSED PyTypeObject *type, CYTHON_UNUSED PyObject *args, CYTHON_UNUSED PyObject *kwargs) {
    PyErr_SetString(PyExc_TypeError, "cannot instantiate type, use 'await coroutine' instead");
    return NULL;
}
#endif
static PyMethodDef __pyx_CoroutineAwait_methods[] = {
    {"send", (PyCFunction) __Pyx_CoroutineAwait_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_CoroutineAwait_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_CoroutineAwait_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_CoroutineAwaitType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "coroutine_wrapper",
    sizeof(__pyx_CoroutineAwaitObject),
    0,
    (destructor) __Pyx_CoroutineAwait_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("A wrapper object implementing __await__ for coroutines."),
    (traverseproc) __Pyx_CoroutineAwait_traverse,
    (inquiry) __Pyx_CoroutineAwait_clear,
    0,
    0,
    __Pyx_CoroutineAwait_self,
    (iternextfunc) __Pyx_CoroutineAwait_Next,
    __pyx_CoroutineAwait_methods,
    0                         ,
    0                      ,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if !CYTHON_COMPILING_IN_PYPY
    __Pyx_CoroutineAwait_no_new,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
#if PY_VERSION_HEX < 0x030500B1 || defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static CYTHON_INLINE PyObject *__Pyx__Coroutine_await(PyObject *coroutine) {
    __pyx_CoroutineAwaitObject *await = PyObject_GC_New(__pyx_CoroutineAwaitObject, __pyx_CoroutineAwaitType);
    if (unlikely(!await)) return NULL;
    Py_INCREF(coroutine);
    await->coroutine = coroutine;
    PyObject_GC_Track(await);
    return (PyObject*)await;
}
#endif
#if PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_await_method(PyObject *coroutine, CYTHON_UNUSED PyObject *arg) {
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static PyObject *__Pyx_Coroutine_await(PyObject *coroutine) {
    if (unlikely(!coroutine || !__Pyx_Coroutine_Check(coroutine))) {
        PyErr_SetString(PyExc_TypeError, "invalid input, expected coroutine");
        return NULL;
    }
    return __Pyx__Coroutine_await(coroutine);
}
#endif
static PyObject *
__Pyx_Coroutine_get_frame(CYTHON_UNUSED __pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    Py_RETURN_NONE;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_compare(PyObject *obj, PyObject *other, int op) {
    PyObject* result;
    switch (op) {
        case Py_EQ: result = (other == obj) ? Py_True : Py_False; break;
        case Py_NE: result = (other != obj) ? Py_True : Py_False; break;
        default:
            result = Py_NotImplemented;
    }
    Py_INCREF(result);
    return result;
}
#endif
static PyMethodDef __pyx_Coroutine_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
#if PY_VERSION_HEX < 0x030500B1
    {"__await__", (PyCFunction) __Pyx_Coroutine_await_method, METH_NOARGS,
     (char*) PyDoc_STR("__await__() -> return an iterator to be used in await expression.")},
#endif
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Coroutine_memberlist[] = {
    {(char *) "cr_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "cr_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited, or None")},
    {(char*) "cr_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Coroutine_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the coroutine"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the coroutine"), 0},
    {(char *) "cr_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the coroutine"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __pyx_Coroutine_as_async = {
    __Pyx_Coroutine_await,
    0,
    0,
};
#endif
static PyTypeObject __pyx_CoroutineType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "coroutine",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__pyx_Coroutine_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __pyx_Coroutine_methods,
    __pyx_Coroutine_memberlist,
    __pyx_Coroutine_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Coroutine_init(void) {
    __pyx_CoroutineType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_CoroutineType = __Pyx_FetchCommonType(&__pyx_CoroutineType_type);
    if (unlikely(!__pyx_CoroutineType))
        return -1;
#ifdef __Pyx_IterableCoroutine_USED
    if (unlikely(__pyx_IterableCoroutine_init() == -1))
        return -1;
#endif
    __pyx_CoroutineAwaitType = __Pyx_FetchCommonType(&__pyx_CoroutineAwaitType_type);
    if (unlikely(!__pyx_CoroutineAwaitType))
        return -1;
    return 0;
}

/* GetAwaitIter */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o) {
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(o)) {
        return __Pyx_NewRef(o);
    }
#endif
    return __Pyx__Coroutine_GetAwaitableIter(o);
}
static void __Pyx_Coroutine_AwaitableIterError(PyObject *source) {
#if PY_VERSION_HEX >= 0x030600B3 || defined(_PyErr_FormatFromCause)
    _PyErr_FormatFromCause(
        PyExc_TypeError,
        "'async for' received an invalid object "
        "from __anext__: %.100s",
        Py_TYPE(source)->tp_name);
#elif PY_MAJOR_VERSION >= 3
    PyObject *exc, *val, *val2, *tb;
    assert(PyErr_Occurred());
    PyErr_Fetch(&exc, &val, &tb);
    PyErr_NormalizeException(&exc, &val, &tb);
    if (tb != NULL) {
        PyException_SetTraceback(val, tb);
        Py_DECREF(tb);
    }
    Py_DECREF(exc);
    assert(!PyErr_Occurred());
    PyErr_Format(
        PyExc_TypeError,
        "'async for' received an invalid object "
        "from __anext__: %.100s",
        Py_TYPE(source)->tp_name);
    PyErr_Fetch(&exc, &val2, &tb);
    PyErr_NormalizeException(&exc, &val2, &tb);
    Py_INCREF(val);
    PyException_SetCause(val2, val);
    PyException_SetContext(val2, val);
    PyErr_Restore(exc, val2, tb);
#else
    source++;
#endif
}
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *obj) {
    PyObject *res;
#if CYTHON_USE_ASYNC_SLOTS
    __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
    if (likely(am && am->am_await)) {
        res = (*am->am_await)(obj);
    } else
#endif
#if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
    if (PyCoro_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    } else
#endif
#if CYTHON_COMPILING_IN_CPYTHON && defined(CO_ITERABLE_COROUTINE)
    if (PyGen_CheckExact(obj) && ((PyGenObject*)obj)->gi_code && ((PyCodeObject *)((PyGenObject*)obj)->gi_code)->co_flags & CO_ITERABLE_COROUTINE) {
        return __Pyx_NewRef(obj);
    } else
#endif
    {
        PyObject *method = NULL;
        int is_method = __Pyx_PyObject_GetMethod(obj, __pyx_n_s_await, &method);
        if (likely(is_method)) {
            res = __Pyx_PyObject_CallOneArg(method, obj);
        } else if (likely(method)) {
            res = __Pyx_PyObject_CallNoArg(method);
        } else
            goto slot_error;
        Py_DECREF(method);
    }
    if (unlikely(!res)) {
        __Pyx_Coroutine_AwaitableIterError(obj);
        goto bad;
    }
    if (unlikely(!PyIter_Check(res))) {
        PyErr_Format(PyExc_TypeError,
                     "__await__() returned non-iterator of type '%.100s'",
                     Py_TYPE(res)->tp_name);
        Py_CLEAR(res);
    } else {
        int is_coroutine = 0;
        #ifdef __Pyx_Coroutine_USED
        is_coroutine |= __Pyx_Coroutine_Check(res);
        #endif
        #if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
        is_coroutine |= PyCoro_CheckExact(res);
        #endif
        if (unlikely(is_coroutine)) {
            /* __await__ must return an *iterator*, not
               a coroutine or another awaitable (see PEP 492) */
            PyErr_SetString(PyExc_TypeError,
                            "__await__() returned a coroutine");
            Py_CLEAR(res);
        }
    }
    return res;
slot_error:
    PyErr_Format(PyExc_TypeError,
                 "object %.100s can't be used in 'await' expression",
                 Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* CoroutineYieldFrom */
static PyObject* __Pyx__Coroutine_Yield_From_Generic(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    PyObject *source_gen = __Pyx__Coroutine_GetAwaitableIter(source);
    if (unlikely(!source_gen)) {
        return NULL;
    }
    if (__Pyx_Coroutine_Check(source_gen)) {
        retval = __Pyx_Generator_Next(source_gen);
    } else {
#if CYTHON_USE_TYPE_SLOTS
        retval = Py_TYPE(source_gen)->tp_iternext(source_gen);
#else
        retval = PyIter_Next(source_gen);
#endif
    }
    if (retval) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    if (__Pyx_Coroutine_Check(source)) {
        if (unlikely(((__pyx_CoroutineObject*)source)->yieldfrom)) {
            PyErr_SetString(
                PyExc_RuntimeError,
                "coroutine is being awaited already");
            return NULL;
        }
        retval = __Pyx_Generator_Next(source);
#ifdef __Pyx_AsyncGen_USED
    } else if (__pyx_PyAsyncGenASend_CheckExact(source)) {
        retval = __Pyx_async_gen_asend_iternext(source);
#endif
    } else {
        return __Pyx__Coroutine_Yield_From_Generic(gen, source);
    }
    if (retval) {
        Py_INCREF(source);
        gen->yieldfrom = source;
    }
    return retval;
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_PYSTON
    __Pyx_PyThreadState_declare
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1)
            || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_type)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
    #endif
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PatchInspect */
static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* PatchAsyncIO */
static PyObject* __Pyx_patch_asyncio(PyObject* module) {
#if PY_VERSION_HEX < 0x030500B2 &&\
        (defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED)) &&\
        (!defined(CYTHON_PATCH_ASYNCIO) || CYTHON_PATCH_ASYNCIO)
    PyObject *patch_module = NULL;
    static int asyncio_patched = 0;
    if (unlikely((!asyncio_patched) && module)) {
        PyObject *package;
        package = __Pyx_Import(__pyx_n_s_asyncio_coroutines, NULL, 0);
        if (package) {
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "coroutines"), ""
"try:\n"
"    coro_types = _module._COROUTINE_TYPES\n"
"except AttributeError: pass\n"
"else:\n"
"    if _cython_coroutine_type is not None and _cython_coroutine_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_coroutine_type,)\n"
"    if _cython_generator_type is not None and _cython_generator_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_generator_type,)\n"
"_module._COROUTINE_TYPES = coro_types\n"
            );
        } else {
            PyErr_Clear();
            package = __Pyx_Import(__pyx_n_s_asyncio_tasks, NULL, 0);
            if (unlikely(!package)) goto asyncio_done;
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "tasks"), ""
"if hasattr(_module, 'iscoroutine'):\n"
"    old_types = getattr(_module.iscoroutine, '_cython_coroutine_types', None)\n"
"    if old_types is None or not isinstance(old_types, set):\n"
"        old_types = set()\n"
"        def cy_wrap(orig_func, type=type, cython_coroutine_types=old_types):\n"
"            def cy_iscoroutine(obj): return type(obj) in cython_coroutine_types or orig_func(obj)\n"
"            cy_iscoroutine._cython_coroutine_types = cython_coroutine_types\n"
"            return cy_iscoroutine\n"
"        _module.iscoroutine = cy_wrap(_module.iscoroutine)\n"
"    if _cython_coroutine_type is not None:\n"
"        old_types.add(_cython_coroutine_type)\n"
"    if _cython_generator_type is not None:\n"
"        old_types.add(_cython_generator_type)\n"
            );
        }
        Py_DECREF(package);
        if (unlikely(!patch_module)) goto ignore;
asyncio_done:
        PyErr_Clear();
        asyncio_patched = 1;
#ifdef __Pyx_Generator_USED
        {
            PyObject *inspect_module;
            if (patch_module) {
                inspect_module = PyObject_GetAttr(patch_module, __pyx_n_s_inspect);
                Py_DECREF(patch_module);
            } else {
                inspect_module = __Pyx_Import(__pyx_n_s_inspect, NULL, 0);
            }
            if (unlikely(!inspect_module)) goto ignore;
            inspect_module = __Pyx_patch_inspect(inspect_module);
            if (unlikely(!inspect_module)) {
                Py_DECREF(module);
                module = NULL;
            }
            Py_XDECREF(inspect_module);
        }
#else
        if ((0)) return __Pyx_patch_inspect(module);
#endif
    }
    return module;
ignore:
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch asyncio package with custom generator type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    if ((0)) return __Pyx_patch_inspect(__Pyx_Coroutine_patch_module(module, NULL));
#endif
    return module;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_CyFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
