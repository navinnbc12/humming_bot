/* Generated by Cython 0.29.15 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.connector.exchange.loopring.loopring_exchange",
        "sources": [
            "hummingbot\\connector\\exchange\\loopring\\loopring_exchange.pyx"
        ]
    },
    "module_name": "hummingbot.connector.exchange.loopring.loopring_exchange"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_15"
#define CYTHON_HEX_VERSION 0x001D0FF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__connector__exchange__loopring__loopring_exchange
#define __PYX_HAVE_API__hummingbot__connector__exchange__loopring__loopring_exchange
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "hummingbot\\connector\\exchange\\loopring\\loopring_exchange.pyx",
  "stringsource",
  "__init__.pxd",
  "hummingbot\\core\\pubsub.pxd",
  "hummingbot\\core\\event\\event_listener.pxd",
  "hummingbot\\core\\event\\event_reporter.pxd",
  "hummingbot\\core\\event\\event_logger.pxd",
  "hummingbot\\core\\data_type\\order_book_query_result.pxd",
  "type.pxd",
  "hummingbot\\core\\data_type\\order_book.pxd",
  "hummingbot\\core\\clock.pxd",
  "hummingbot\\core\\time_iterator.pxd",
  "hummingbot\\core\\network_iterator.pxd",
  "hummingbot\\connector\\connector_base.pxd",
  "hummingbot\\connector\\in_flight_order_base.pxd",
  "hummingbot\\connector\\exchange\\loopring\\loopring_in_flight_order.pxd",
  "hummingbot\\connector\\trading_rule.pxd",
};

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":690
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":691
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":693
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":697
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":698
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":700
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":704
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":705
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":714
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":715
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":716
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":720
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":722
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":723
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder;
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status;
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":730
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":733
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount;

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":435
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                    dict kwargs = {}):
 *         cdef:
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":443
 *         return client_order_id
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                     dict kwargs = {}):
 *         cdef:
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":874
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};

/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tx_time_limits;
};


/* "hummingbot/connector/in_flight_order_base.pxd":1
 * cdef class InFlightOrderBase:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public str client_order_id
 */
struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase {
  PyObject_HEAD
  PyObject *client_order_id;
  PyObject *exchange_order_id;
  PyObject *trading_pair;
  PyObject *order_type;
  PyObject *trade_type;
  PyObject *price;
  PyObject *amount;
  PyObject *executed_amount_base;
  PyObject *executed_amount_quote;
  PyObject *fee_asset;
  PyObject *fee_paid;
  PyObject *last_state;
  PyObject *exchange_order_id_update_event;
};


/* "hummingbot/connector/exchange/loopring/loopring_in_flight_order.pxd":3
 * from hummingbot.connector.in_flight_order_base cimport InFlightOrderBase
 * 
 * cdef class LoopringInFlightOrder(InFlightOrderBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object market
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder {
  struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase __pyx_base;
  PyObject *market;
  PyObject *status;
  PY_LONG_LONG created_at;
};


/* "hummingbot/connector/trading_rule.pxd":1
 * cdef class TradingRule:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public str trading_pair
 */
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule {
  PyObject_HEAD
  PyObject *trading_pair;
  PyObject *min_order_size;
  PyObject *max_order_size;
  PyObject *min_price_increment;
  PyObject *min_base_amount_increment;
  PyObject *min_quote_amount_increment;
  PyObject *max_price_significant_digits;
  PyObject *min_notional_size;
  PyObject *min_order_value;
  int supports_limit_orders;
  int supports_market_orders;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pxd":4
 * from hummingbot.core.data_type.transaction_tracker cimport TransactionTracker
 * 
 * cdef class LoopringExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str API_REST_ENDPOINT
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *API_REST_ENDPOINT;
  PyObject *WS_ENDPOINT;
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *_tx_tracker;
  PyObject *_poll_notifier;
  double _poll_interval;
  double _last_timestamp;
  PyObject *_shared_client;
  PyObject *_loopring_auth;
  int _loopring_accountid;
  PyObject *_loopring_exchangeid;
  PyObject *_loopring_private_key;
  PyObject *_order_sign_param;
  PyObject *_user_stream_tracker;
  PyObject *_user_stream_tracker_task;
  PyObject *_user_stream_event_listener_task;
  PyObject *_polling_update_task;
  PyObject *_token_configuration;
  PyObject *_trading_rules;
  PyObject *_lock;
  PyObject *_exchange_rates;
  PyObject *_pending_approval_tx_hashes;
  PyObject *_in_flight_orders;
  PyObject *_next_order_id;
  PyObject *_order_id_lock;
  PyObject *_loopring_tokenids;
  PyObject *_trading_pairs;
  PyObject *_loopring_order_sign_param;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":126
 * 
 * 
 * cdef class LoopringExchangeTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         LoopringExchange _owner
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker {
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *_owner;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":115
 *             self._completed.set()
 * 
 *     async def wait_for_completion(self, timeout: float):             # <<<<<<<<<<<<<<
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion {
  PyObject_HEAD
  PyObject *__pyx_v_self;
  double __pyx_v_timeout;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":244
 *         return retval
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await LoopringAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":264
 *         return self._in_flight_orders
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):             # <<<<<<<<<<<<<<
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id {
  PyObject_HEAD
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_force_sync;
  PyObject *__pyx_v_next_id;
  PyObject *__pyx_v_response;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_token;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":281
 *         return next_id
 * 
 *     async def _serialize_order(self, order):             # <<<<<<<<<<<<<<
 *         return [
 *             int(order["exchange"], 16),
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order {
  PyObject_HEAD
  PyObject *__pyx_v_order;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":299
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           client_order_id: str,
 *                           trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_base;
  PyObject *__pyx_v_baseid;
  PyObject *__pyx_v_client_order_id;
  PyObject *__pyx_v_eddsa;
  PyObject *__pyx_v_fq_obj;
  PyObject *__pyx_v_is_buy;
  PyObject *__pyx_v_msgHash;
  PyObject *__pyx_v_order;
  PyObject *__pyx_v_order_details;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_side;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_price;
  PyObject *__pyx_v_quote;
  PyObject *__pyx_v_quoteid;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_serialized_message;
  PyObject *__pyx_v_signed_message;
  PyObject *__pyx_v_token_s_id;
  PyObject *__pyx_v_trading_pair;
  PyObject *__pyx_v_validSince;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":344
 *         return await self.api_request("POST", ORDER_ROUTE, data=order)
 * 
 *     async def execute_order(self, order_side, client_order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *         """
 *         Completes the common tasks from execute_buy and execute_sell.  Quantizes the order's amount and price, and
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_base;
  PyObject *__pyx_v_client_order_id;
  PyObject *__pyx_v_created_at;
  PyObject *__pyx_v_creation_response;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_in_flight_order;
  PyObject *__pyx_v_loopring_order_hash;
  PyObject *__pyx_v_order_side;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_price;
  PyObject *__pyx_v_quote;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_status;
  PyObject *__pyx_v_token_sell_id;
  PyObject *__pyx_v_trading_pair;
  PyObject *__pyx_v_trading_rule;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":415
 *             return False
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_price;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_trading_pair;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":425
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_price;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_trading_pair;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":454
 *     # Cancellation
 * 
 *     async def cancel_order(self, client_order_id: str):             # <<<<<<<<<<<<<<
 *         in_flight_order = self._in_flight_orders.get(client_order_id)
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order {
  PyObject_HEAD
  PyObject *__pyx_v_cancellation_event;
  PyObject *__pyx_v_cancellation_payload;
  PyObject *__pyx_v_client_order_id;
  PyObject *__pyx_v_code;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_in_flight_order;
  PyObject *__pyx_v_res;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":493
 *             del self._in_flight_orders[order_id]
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all {
  PyObject_HEAD
  PyObject *__pyx_v_all_completed;
  PyObject *__pyx_v_cancel_verifier;
  PyObject *__pyx_v_cancellation_queue;
  PyObject *__pyx_v_in_flight;
  PyObject *__pyx_7genexpr__pyx_v_o;
  PyObject *__pyx_v_o;
  PyObject *__pyx_8genexpr1__pyx_v_order_id;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_status;
  PyObject *__pyx_v_s;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_set_cancellation_status;
  PyObject *__pyx_8genexpr1__pyx_v_success;
  double __pyx_v_timeout_seconds;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":538
 *     # ----------------------------------------------------------
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         await self._token_configuration._configure()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network {
  PyObject_HEAD
  PyObject *__pyx_v_base;
  PyObject *__pyx_v_exchange_info;
  PyObject *__pyx_v_pair;
  PyObject *__pyx_v_quote;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_token;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_t_0;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":559
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         self._pending_approval_tx_hashes.clear()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":570
 *         self._user_stream_event_listener_task = None
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":678
 *                 self.c_stop_tracking_order(tracked_order.client_order_id)
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):             # <<<<<<<<<<<<<<
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances {
  PyObject_HEAD
  PyObject *__pyx_v_amount_locked;
  PyObject *__pyx_v_completed_tokens;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_is_snapshot;
  PyObject *__pyx_v_padded_amount_locked;
  PyObject *__pyx_v_padded_total_amount;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_token_id;
  PyObject *__pyx_v_token_symbol;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_total_amount;
  PyObject *__pyx_v_updates;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
  PyObject *__pyx_t_10;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":712
 *     # User stream updates
 * 
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":726
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for event_message in self._iter_user_event_queue():
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener {
  PyObject_HEAD
  PyObject *__pyx_v_client_order_id;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_event;
  PyObject *__pyx_v_event_message;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_topic;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *__pyx_v_tracked_order;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":763
 *     # Polling Updates
 * 
 *     async def _polling_update(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update {
  PyObject_HEAD
  PyObject *__pyx_v_e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":780
 *                 self.logger().info(e)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         balances_response = await self.api_request("GET", f"{BALANCES_INFO_ROUTE}?accountId={self._loopring_accountid}")
 *         await self._set_balances(balances_response)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances {
  PyObject_HEAD
  PyObject *__pyx_v_balances_response;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":784
 *         await self._set_balances(balances_response)
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         markets_info, tokens_info = await asyncio.gather(
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules {
  PyObject_HEAD
  PyObject *__pyx_v_baseid;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_market;
  PyObject *__pyx_v_markets_info;
  PyObject *__pyx_v_quoteid;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_8genexpr3__pyx_v_t;
  PyObject *__pyx_v_tokens_info;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":813
 *                     self.logger().debug(str(e))
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         tracked_orders = self._in_flight_orders.copy()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status {
  PyObject_HEAD
  PyObject *__pyx_v_cancellation_event;
  PyObject *__pyx_v_client_order_id;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_loopring_order_id;
  PyObject *__pyx_v_loopring_order_request;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_v_tracked_orders;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
};


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":908
 *         return "&".join([method, url, data])
 * 
 *     async def api_request(self,             # <<<<<<<<<<<<<<
 *                           http_method: str,
 *                           url: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request {
  PyObject_HEAD
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_full_url;
  PyObject *__pyx_v_hasher;
  PyObject *__pyx_v_headers;
  PyObject *__pyx_v_http_method;
  PyObject *__pyx_v_msgHash;
  PyObject *__pyx_v_ordered_data;
  PyObject *__pyx_v_params;
  PyObject *__pyx_v_response;
  PyObject *__pyx_v_secure;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self;
  PyObject *__pyx_v_signature;
  PyObject *__pyx_v_signed;
  PyObject *__pyx_v_url;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
};



/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_start_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *, float);
  PyObject *(*c_stop_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  int (*c_is_tx_tracked)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_did_timeout_tx)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_process_tx_timeouts)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":138
 *         self._owner.c_did_timeout_tx(tx_id)
 * 
 * cdef class LoopringExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     @classmethod
 *     def logger(cls) -> HummingbotLogger:
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange {
  struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;


/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":126
 * 
 * 
 * cdef class LoopringExchangeTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         LoopringExchange _owner
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Coroutine.proto */
#define __Pyx_Coroutine_USED
static PyTypeObject *__pyx_CoroutineType = 0;
static PyTypeObject *__pyx_CoroutineAwaitType = 0;
#define __Pyx_Coroutine_CheckExact(obj) (Py_TYPE(obj) == __pyx_CoroutineType)
#define __Pyx_Coroutine_Check(obj) __Pyx_Coroutine_CheckExact(obj)
#define __Pyx_CoroutineAwait_CheckExact(obj) (Py_TYPE(obj) == __pyx_CoroutineAwaitType)
#define __Pyx_Coroutine_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_CoroutineType, body, code, closure, name, qualname, module_name)
static int __pyx_Coroutine_init(void);
static PyObject *__Pyx__Coroutine_await(PyObject *coroutine);
typedef struct {
    PyObject_HEAD
    PyObject *coroutine;
} __pyx_CoroutineAwaitObject;
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg);
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args);

/* GetAwaitIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o);
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *o);

/* CoroutineYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* ReturnWithStopIteration.proto */
#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RaiseMappingExpected.proto */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* StopAsyncIteration.proto */
#define __Pyx_StopAsyncIteration_USED
static PyObject *__Pyx_PyExc_StopAsyncIteration;
static int __pyx_StopAsyncIteration_init(void);

/* AsyncIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAsyncIter(PyObject *o);
static CYTHON_INLINE PyObject *__Pyx_Coroutine_AsyncIterNext(PyObject *o);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* PatchAsyncIO.proto */
static PyObject* __Pyx_patch_asyncio(PyObject* module);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CyFunctionClassCell.proto */
static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* AsyncGenerator.proto */
#define __Pyx_AsyncGen_USED
typedef struct {
    __pyx_CoroutineObject coro;
    PyObject *ag_finalizer;
    int ag_hooks_inited;
    int ag_closed;
} __pyx_PyAsyncGenObject;
static PyTypeObject *__pyx__PyAsyncGenWrappedValueType = 0;
static PyTypeObject *__pyx__PyAsyncGenASendType = 0;
static PyTypeObject *__pyx__PyAsyncGenAThrowType = 0;
static PyTypeObject *__pyx_AsyncGenType = 0;
#define __Pyx_AsyncGen_CheckExact(obj) (Py_TYPE(obj) == __pyx_AsyncGenType)
#define __pyx_PyAsyncGenASend_CheckExact(o)\
                    (Py_TYPE(o) == __pyx__PyAsyncGenASendType)
#define __pyx_PyAsyncGenAThrow_CheckExact(o)\
                    (Py_TYPE(o) == __pyx__PyAsyncGenAThrowType)
static PyObject *__Pyx_async_gen_anext(PyObject *o);
static CYTHON_INLINE PyObject *__Pyx_async_gen_asend_iternext(PyObject *o);
static PyObject *__Pyx_async_gen_asend_send(PyObject *o, PyObject *arg);
static PyObject *__Pyx_async_gen_asend_close(PyObject *o, PyObject *args);
static PyObject *__Pyx_async_gen_athrow_close(PyObject *o, PyObject *args);
static PyObject *__Pyx__PyAsyncGenValueWrapperNew(PyObject *val);
static __pyx_CoroutineObject *__Pyx_AsyncGen_New(
            __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_PyAsyncGenObject *gen = PyObject_GC_New(__pyx_PyAsyncGenObject, __pyx_AsyncGenType);
    if (unlikely(!gen))
        return NULL;
    gen->ag_finalizer = NULL;
    gen->ag_closed = 0;
    gen->ag_hooks_inited = 0;
    return __Pyx__Coroutine_NewInit((__pyx_CoroutineObject*)gen, body, code, closure, name, qualname, module_name);
}
static int __pyx_AsyncGen_init(void);
static void __Pyx_PyAsyncGen_Fini(void);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id); /* proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_currency); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_currency); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_order_size); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_price(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, double __pyx_v_timestamp); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'hummingbot.core.PyRef' */

/* Module declarations from 'hummingbot.core.pubsub' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;

/* Module declarations from 'hummingbot.core.event.event_listener' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;

/* Module declarations from 'hummingbot.core.event.event_reporter' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;

/* Module declarations from 'hummingbot.core.event.event_logger' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'hummingbot.core.data_type.OrderBookEntry' */

/* Module declarations from 'hummingbot.core.data_type.order_book_query_result' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'hummingbot.core.data_type.order_book' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;

/* Module declarations from 'hummingbot.core.clock' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;

/* Module declarations from 'hummingbot.core.time_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;

/* Module declarations from 'hummingbot.core.network_iterator' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;

/* Module declarations from 'hummingbot.connector.connector_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;

/* Module declarations from 'hummingbot.connector.exchange_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;

/* Module declarations from 'hummingbot.core.data_type.transaction_tracker' */
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = 0;

/* Module declarations from 'hummingbot.connector.in_flight_order_base' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase = 0;

/* Module declarations from 'hummingbot.connector.exchange.loopring.loopring_in_flight_order' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder = 0;

/* Module declarations from 'hummingbot.connector.trading_rule' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = 0;

/* Module declarations from 'hummingbot.connector.exchange.loopring.loopring_exchange' */
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request = 0;
#define __Pyx_MODULE_NAME "hummingbot.connector.exchange.loopring.loopring_exchange"
extern int __pyx_module_is_main_hummingbot__connector__exchange__loopring__loopring_exchange;
int __pyx_module_is_main_hummingbot__connector__exchange__loopring__loopring_exchange = 0;

/* Implementation of 'hummingbot.connector.exchange.loopring.loopring_exchange' */
static PyObject *__pyx_builtin_any;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_hex;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_R[] = "R";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_0x[] = "0x";
static const char __pyx_k_1e[] = "1e-";
static const char __pyx_k_FQ[] = "FQ";
static const char __pyx_k__4[] = "'.";
static const char __pyx_k__7[] = "-";
static const char __pyx_k__8[] = "";
static const char __pyx_k_at[] = " at ";
static const char __pyx_k_to[] = " to ";
static const char __pyx_k_0x0[] = "0x0";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_GET[] = "GET";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k__12[] = ")";
static const char __pyx_k__13[] = " ";
static const char __pyx_k__14[] = ".";
static const char __pyx_k__19[] = " (";
static const char __pyx_k__24[] = "(";
static const char __pyx_k__26[] = "&";
static const char __pyx_k__27[] = "=";
static const char __pyx_k__38[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_buy[] = "buy-";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_fee[] = "fee";
static const char __pyx_k_for[] = " for ";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_now[] = "now";
static const char __pyx_k_oce[] = "oce";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sig[] = "sig";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_Lock[] = "Lock";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_POST[] = "POST";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_call[] = "__call__";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_hash[] = "hash";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_safe[] = "safe";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sell[] = "sell-";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sign[] = "sign";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_uuid[] = "uuid";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_Event[] = "Event";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_Order[] = "Order ";
static const char __pyx_k_aexit[] = "__aexit__";
static const char __pyx_k_aiter[] = "__aiter__";
static const char __pyx_k_anext[] = "__anext__";
static const char __pyx_k_await[] = "__await__";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_debug[] = "debug";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_event[] = "event";
static const char __pyx_k_false[] = "false";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_loads[] = "loads";
static const char __pyx_k_num_d[] = "num_d";
static const char __pyx_k_order[] = " order ";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_quote[] = "quote";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_taker[] = "taker";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_token[] = "token";
static const char __pyx_k_topic[] = "topic";
static const char __pyx_k_total[] = "total";
static const char __pyx_k_unpad[] = "unpad";
static const char __pyx_k_unsub[] = "unsub";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_zfill[] = "zfill";
static const char __pyx_k_DELETE[] = "DELETE";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_aenter[] = "__aenter__";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_cancel[] = "cancel";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_gather[] = "gather";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_is_set[] = "is_set";
static const char __pyx_k_locked[] = "locked";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_reduce[] = "_reduce";
static const char __pyx_k_secure[] = "secure";
static const char __pyx_k_sha256[] = "sha256";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_urllib[] = "urllib";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_Created[] = "Created ";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_Event_2[] = "Event: ";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_account[] = "account";
static const char __pyx_k_aiohttp[] = "aiohttp";
static const char __pyx_k_asyncio[] = "asyncio";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_hashlib[] = "hashlib";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_is_done[] = "is_done";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_markets[] = "markets";
static const char __pyx_k_marking[] = "marking ";
static const char __pyx_k_maximum[] = "maximum";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_minimum[] = "minimum";
static const char __pyx_k_network[] = "network";
static const char __pyx_k_orderId[] = "orderId";
static const char __pyx_k_order_2[] = "order";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_request[] = "request";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_to_json[] = "to_json";
static const char __pyx_k_tokenId[] = "tokenId";
static const char __pyx_k_updates[] = "updates";
static const char __pyx_k_volumes[] = "volumes";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_Optional[] = "Optional";
static const char __pyx_k_TradeFee[] = "TradeFee";
static const char __pyx_k_as_tuple[] = "as_tuple";
static const char __pyx_k_binascii[] = "binascii";
static const char __pyx_k_buyToken[] = "buyToken";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_exchange[] = "exchange";
static const char __pyx_k_exponent[] = "exponent";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_loopring[] = "loopring";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_poseidon[] = "poseidon";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_quantize[] = "quantize";
static const char __pyx_k_reduce_2[] = "__reduce__";
static const char __pyx_k_response[] = ", response: ";
static const char __pyx_k_rounding[] = "rounding";
static const char __pyx_k_s_logger[] = "s_logger";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_wait_for[] = "wait_for";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_X_API_SIG[] = "X-API-SIG";
static const char __pyx_k_accountId[] = "accountId";
static const char __pyx_k_allOrNone[] = "allOrNone";
static const char __pyx_k_completed[] = "_completed";
static const char __pyx_k_configure[] = "_configure";
static const char __pyx_k_filledFee[] = "filledFee";
static const char __pyx_k_from_json[] = "from_json";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_hexdigest[] = "hexdigest";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_orderHash[] = "orderHash";
static const char __pyx_k_orderType[] = "orderType";
static const char __pyx_k_precision[] = "precision";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_sellToken[] = "sellToken";
static const char __pyx_k_storageId[] = "storageId";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_MAKER_ONLY[] = "MAKER_ONLY";
static const char __pyx_k_ROUND_DOWN[] = "ROUND_DOWN";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_Web3Wallet[] = "Web3Wallet";
static const char __pyx_k_baseFilled[] = "baseFilled";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_callback_2[] = "_callback";
static const char __pyx_k_cancel_all[] = "cancel_all";
static const char __pyx_k_cancel_one[] = "cancel_one";
static const char __pyx_k_created_at[] = "created_at";
static const char __pyx_k_filledSize[] = "filledSize";
static const char __pyx_k_force_sync[] = "force_sync";
static const char __pyx_k_get_symbol[] = "get_symbol";
static const char __pyx_k_get_tokens[] = "get_tokens";
static const char __pyx_k_is_failure[] = "is_failure";
static const char __pyx_k_maxFeeBips[] = "maxFeeBips";
static const char __pyx_k_order_side[] = "order_side";
static const char __pyx_k_order_type[] = "order_type";
static const char __pyx_k_processing[] = "processing";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_resultInfo[] = "resultInfo";
static const char __pyx_k_validSince[] = "validSince";
static const char __pyx_k_validUntil[] = "validUntil";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LIMIT_MAKER[] = "LIMIT_MAKER";
static const char __pyx_k_MarketEvent[] = "MarketEvent";
static const char __pyx_k_ORDER_ROUTE[] = "ORDER_ROUTE";
static const char __pyx_k_OrderFilled[] = "OrderFilled";
static const char __pyx_k_accountId_2[] = "?accountId=";
static const char __pyx_k_api_request[] = "api_request";
static const char __pyx_k_baseTokenId[] = "baseTokenId";
static const char __pyx_k_data_source[] = "data_source";
static const char __pyx_k_description[] = "description";
static const char __pyx_k_execute_buy[] = "execute_buy";
static const char __pyx_k_get_tokenid[] = "get_tokenid";
static const char __pyx_k_http_method[] = "http_method";
static const char __pyx_k_is_snapshot[] = "is_snapshot";
static const char __pyx_k_order_books[] = "order_books";
static const char __pyx_k_place_order[] = "place_order";
static const char __pyx_k_quoteFilled[] = "quoteFilled";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_sellTokenId[] = "sellTokenId";
static const char __pyx_k_status_dict[] = "status_dict";
static const char __pyx_k_totalAmount[] = "totalAmount";
static const char __pyx_k_user_stream[] = "user_stream";
static const char __pyx_k_Content_Type[] = "Content-Type";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_LoopringAuth[] = "LoopringAuth";
static const char __pyx_k_OrderExpired[] = "OrderExpired";
static const char __pyx_k_OrderFailure[] = "OrderFailure";
static const char __pyx_k_Order_amount[] = "Order amount(";
static const char __pyx_k_TimeoutError[] = "TimeoutError";
static const char __pyx_k_amountLocked[] = "amountLocked";
static const char __pyx_k_api_v3_order[] = "/api/v3/order";
static const char __pyx_k_as_cancelled[] = " as cancelled";
static const char __pyx_k_cancel_order[] = "cancel_order";
static const char __pyx_k_estimate_fee[] = "estimate_fee";
static const char __pyx_k_execute_sell[] = "execute_sell";
static const char __pyx_k_filledVolume[] = "filledVolume";
static const char __pyx_k_is_cancelled[] = "is_cancelled";
static const char __pyx_k_num_expected[] = "num_expected";
static const char __pyx_k_orderAmounts[] = "orderAmounts";
static const char __pyx_k_quoteTokenId[] = "quoteTokenId";
static const char __pyx_k_rest_api_url[] = "rest_api_url";
static const char __pyx_k_set_balances[] = "_set_balances";
static const char __pyx_k_stop_network[] = "stop_network";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_ClientSession[] = "ClientSession";
static const char __pyx_k_NEXT_ORDER_ID[] = "NEXT_ORDER_ID";
static const char __pyx_k_NOT_CONNECTED[] = "NOT_CONNECTED";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_PoseidonEdDSA[] = "PoseidonEdDSA";
static const char __pyx_k_asyncio_tasks[] = "asyncio.tasks";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_check_network[] = "check_network";
static const char __pyx_k_clientOrderId[] = "clientOrderId";
static const char __pyx_k_execute_order[] = "execute_order";
static const char __pyx_k_from_api_code[] = ") from api (code: ";
static const char __pyx_k_loopring_auth[] = "loopring_auth";
static const char __pyx_k_num_remaining[] = "_num_remaining";
static const char __pyx_k_poll_interval[] = "poll_interval";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_s_decimal_NaN[] = "s_decimal_NaN";
static const char __pyx_k_start_network[] = "start_network";
static const char __pyx_k_stop_tracking[] = "stop_tracking";
static const char __pyx_k_tracked_order[] = "tracked_order";
static const char __pyx_k_trading_pairs[] = "trading_pairs";
static const char __pyx_k_websocket_url[] = "websocket_url";
static const char __pyx_k_CancelledError[] = "CancelledError";
static const char __pyx_k_HTTP_status_is[] = ". HTTP status is ";
static const char __pyx_k_OrderCancelled[] = "OrderCancelled";
static const char __pyx_k_api_v3_account[] = "api/v3/account";
static const char __pyx_k_api_v3_order_2[] = "api/v3/order";
static const char __pyx_k_eddsaSignature[] = "eddsaSignature";
static const char __pyx_k_encode_request[] = "_encode_request";
static const char __pyx_k_fillAmountBOrS[] = "fillAmountBOrS";
static const char __pyx_k_max_order_size[] = "max_order_size";
static const char __pyx_k_min_order_size[] = "min_order_size";
static const char __pyx_k_polling_update[] = "_polling_update";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_start_tracking[] = "start_tracking";
static const char __pyx_k_to_limit_order[] = "to_limit_order";
static const char __pyx_k_BuyOrderCreated[] = "BuyOrderCreated";
static const char __pyx_k_GET_ORDER_ROUTE[] = "GET_ORDER_ROUTE";
static const char __pyx_k_app_warning_msg[] = "app_warning_msg";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_poseidon_params[] = "poseidon_params";
static const char __pyx_k_security_target[] = "security_target";
static const char __pyx_k_serialize_order[] = "_serialize_order";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_update_balances[] = "_update_balances";
static const char __pyx_k_API_CALL_TIMEOUT[] = "API_CALL_TIMEOUT";
static const char __pyx_k_Error_submitting[] = "Error submitting ";
static const char __pyx_k_HummingbotLogger[] = "HummingbotLogger";
static const char __pyx_k_LoopringExchange[] = "LoopringExchange";
static const char __pyx_k_OrderFilledEvent[] = "OrderFilledEvent";
static const char __pyx_k_SellOrderCreated[] = "SellOrderCreated";
static const char __pyx_k_The_market_order[] = "The market order ";
static const char __pyx_k_account_balances[] = "account_balances";
static const char __pyx_k_api_v3_storageId[] = "api/v3/storageId";
static const char __pyx_k_api_v3_timestamp[] = "api/v3/timestamp";
static const char __pyx_k_application_json[] = "application/json";
static const char __pyx_k_c_did_timeout_tx[] = "c_did_timeout_tx";
static const char __pyx_k_loopring_api_key[] = "loopring_api_key";
static const char __pyx_k_sell_buy_amounts[] = "sell_buy_amounts";
static const char __pyx_k_trading_required[] = "trading_required";
static const char __pyx_k_BuyOrderCompleted[] = "BuyOrderCompleted";
static const char __pyx_k_OrderExpiredEvent[] = "OrderExpiredEvent";
static const char __pyx_k_TOKENS_INFO_ROUTE[] = "TOKENS_INFO_ROUTE";
static const char __pyx_k_exchange_order_id[] = "exchange_order_id";
static const char __pyx_k_get_next_order_id[] = "_get_next_order_id";
static const char __pyx_k_hummingbot_logger[] = "hummingbot.logger";
static const char __pyx_k_min_notional_size[] = "min_notional_size";
static const char __pyx_k_precisionForPrice[] = "precisionForPrice";
static const char __pyx_k_ACCOUNT_INFO_ROUTE[] = "ACCOUNT_INFO_ROUTE";
static const char __pyx_k_CancellationResult[] = "CancellationResult";
static const char __pyx_k_MARKETS_INFO_ROUTE[] = "MARKETS_INFO_ROUTE";
static const char __pyx_k_MAXIMUM_FILL_COUNT[] = "MAXIMUM_FILL_COUNT";
static const char __pyx_k_ORDER_CANCEL_ROUTE[] = "ORDER_CANCEL_ROUTE";
static const char __pyx_k_ORDER_FILLED_EVENT[] = "ORDER_FILLED_EVENT";
static const char __pyx_k_SNARK_SCALAR_FIELD[] = "SNARK_SCALAR_FIELD";
static const char __pyx_k_SellOrderCompleted[] = "SellOrderCompleted";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_ethsnarks_loopring[] = "ethsnarks_loopring";
static const char __pyx_k_generate_auth_dict[] = "generate_auth_dict";
static const char __pyx_k_get_tracking_nonce[] = "get_tracking_nonce";
static const char __pyx_k_loopring_accountid[] = "loopring_accountid";
static const char __pyx_k_safe_ensure_future[] = "safe_ensure_future";
static const char __pyx_k_split_trading_pair[] = "split_trading_pair";
static const char __pyx_k_BALANCES_INFO_ROUTE[] = "BALANCES_INFO_ROUTE";
static const char __pyx_k_EXCHANGE_INFO_ROUTE[] = "EXCHANGE_INFO_ROUTE";
static const char __pyx_k_MAINNET_WS_ENDPOINT[] = "MAINNET_WS_ENDPOINT";
static const char __pyx_k_ORDER_EXPIRED_EVENT[] = "ORDER_EXPIRED_EVENT";
static const char __pyx_k_ORDER_FAILURE_EVENT[] = "ORDER_FAILURE_EVENT";
static const char __pyx_k_OrderCancelledEvent[] = "OrderCancelledEvent";
static const char __pyx_k_from_loopring_order[] = "from_loopring_order";
static const char __pyx_k_min_price_increment[] = "min_price_increment";
static const char __pyx_k_token_configuration[] = "token_configuration";
static const char __pyx_k_update_order_status[] = "_update_order_status";
static const char __pyx_k_wait_for_completion[] = "wait_for_completion";
static const char __pyx_k_BuyOrderCreatedEvent[] = "BuyOrderCreatedEvent";
static const char __pyx_k_Order_notional_value[] = "Order notional value(";
static const char __pyx_k_The_market_buy_order[] = "The market buy order ";
static const char __pyx_k_api_v3_user_balances[] = "api/v3/user/balances";
static const char __pyx_k_loopring_private_key[] = "loopring_private_key";
static const char __pyx_k_update_trading_rules[] = "_update_trading_rules";
static const char __pyx_k_Could_not_set_balance[] = "Could not set balance ";
static const char __pyx_k_ORDER_CANCELLED_EVENT[] = "ORDER_CANCELLED_EVENT";
static const char __pyx_k_SellOrderCreatedEvent[] = "SellOrderCreatedEvent";
static const char __pyx_k_The_market_sell_order[] = "The market sell order ";
static const char __pyx_k_iter_user_event_queue[] = "_iter_user_event_queue";
static const char __pyx_k_order_to_Loopring_for[] = " order to Loopring for ";
static const char __pyx_k_supports_limit_orders[] = "supports_limit_orders";
static const char __pyx_k_update_inflight_order[] = "_update_inflight_order";
static const char __pyx_k_BuyOrderCompletedEvent[] = "BuyOrderCompletedEvent";
static const char __pyx_k_Failed_to_cancel_order[] = "Failed to cancel order ";
static const char __pyx_k_LatchingEventResponder[] = "LatchingEventResponder";
static const char __pyx_k_api_v3_exchange_tokens[] = "api/v3/exchange/tokens";
static const char __pyx_k_https_api3_loopring_io[] = "https://api3.loopring.io/";
static const char __pyx_k_supports_market_orders[] = "supports_market_orders";
static const char __pyx_k_BUY_ORDER_CREATED_EVENT[] = "BUY_ORDER_CREATED_EVENT";
static const char __pyx_k_Issue_with_Loopring_API[] = "Issue with Loopring API ";
static const char __pyx_k_MarketOrderFailureEvent[] = "MarketOrderFailureEvent";
static const char __pyx_k_SellOrderCompletedEvent[] = "SellOrderCompletedEvent";
static const char __pyx_k_api_v3_exchange_markets[] = "api/v3/exchange/markets";
static const char __pyx_k_order_books_initialized[] = "order_books_initialized";
static const char __pyx_k_set_cancellation_status[] = "set_cancellation_status";
static const char __pyx_k_Error_fetching_data_from[] = "Error fetching data from ";
static const char __pyx_k_LoopringOrderBookTracker[] = "LoopringOrderBookTracker";
static const char __pyx_k_No_order_book_exists_for[] = "No order book exists for '";
static const char __pyx_k_SELL_ORDER_CREATED_EVENT[] = "SELL_ORDER_CREATED_EVENT";
static const char __pyx_k_loopring_exchangeaddress[] = "loopring_exchangeaddress";
static const char __pyx_k_trading_rule_initialized[] = "trading_rule_initialized";
static const char __pyx_k_update_exchange_order_id[] = "update_exchange_order_id";
static const char __pyx_k_BUY_ORDER_COMPLETED_EVENT[] = "BUY_ORDER_COMPLETED_EVENT";
static const char __pyx_k_LoopringUserStreamTracker[] = "LoopringUserStreamTracker";
static const char __pyx_k_MAINNET_API_REST_ENDPOINT[] = "MAINNET_API_REST_ENDPOINT";
static const char __pyx_k_min_base_amount_increment[] = "min_base_amount_increment";
static const char __pyx_k_Cancel_order_returned_code[] = "Cancel order returned code ";
static const char __pyx_k_SELL_ORDER_COMPLETED_EVENT[] = "SELL_ORDER_COMPLETED_EVENT";
static const char __pyx_k_UNRECOGNIZED_ORDER_DEBOUCE[] = "UNRECOGNIZED_ORDER_DEBOUCE";
static const char __pyx_k_min_quote_amount_increment[] = "min_quote_amount_increment";
static const char __pyx_k_user_stream_event_listener[] = "_user_stream_event_listener";
static const char __pyx_k_LoopringExchange_cancel_all[] = "LoopringExchange.cancel_all";
static const char __pyx_k_get_active_exchange_markets[] = "get_active_exchange_markets";
static const char __pyx_k_Error_updating_trading_rules[] = "Error updating trading rules";
static const char __pyx_k_LoopringExchange_api_request[] = "LoopringExchange.api_request";
static const char __pyx_k_LoopringExchange_execute_buy[] = "LoopringExchange.execute_buy";
static const char __pyx_k_LoopringExchange_place_order[] = "LoopringExchange.place_order";
static const char __pyx_k_Successfully_cancelled_order[] = "Successfully cancelled order ";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_LatchingEventResponder___call[] = "LatchingEventResponder.__call__";
static const char __pyx_k_LatchingEventResponder___init[] = "LatchingEventResponder.__init__";
static const char __pyx_k_LoopringExchange_cancel_order[] = "LoopringExchange.cancel_order";
static const char __pyx_k_LoopringExchange_execute_sell[] = "LoopringExchange.execute_sell";
static const char __pyx_k_LoopringExchange_stop_network[] = "LoopringExchange.stop_network";
static const char __pyx_k_orderbook_tracker_data_source[] = "orderbook_tracker_data_source";
static const char __pyx_k_wss_ws_api3_loopring_io_v2_ws[] = "wss://ws.api3.loopring.io/v2/ws";
static const char __pyx_k_LIMIT_orders_are_not_supported[] = "LIMIT orders are not supported";
static const char __pyx_k_LatchingEventResponder__reduce[] = "LatchingEventResponder._reduce";
static const char __pyx_k_LoopringAPIOrderBookDataSource[] = "LoopringAPIOrderBookDataSource";
static const char __pyx_k_LoopringExchange__set_balances[] = "LoopringExchange._set_balances";
static const char __pyx_k_LoopringExchange_check_network[] = "LoopringExchange.check_network";
static const char __pyx_k_LoopringExchange_execute_order[] = "LoopringExchange.execute_order";
static const char __pyx_k_LoopringExchange_start_network[] = "LoopringExchange.start_network";
static const char __pyx_k_Error_getting_the_next_order_id[] = "Error getting the next order id from Loopring";
static const char __pyx_k_Failed_to_update_Loopring_order[] = "Failed to update Loopring order ";
static const char __pyx_k_LatchingEventResponder_wait_for[] = "LatchingEventResponder.wait_for_completion";
static const char __pyx_k_MARKET_orders_are_not_supported[] = "MARKET orders are not supported";
static const char __pyx_k_Unexpected_error_in_user_stream[] = "Unexpected error in user stream listener loop.";
static const char __pyx_k_Unrecognized_order_ID_from_user[] = "Unrecognized order ID from user stream: ";
static const char __pyx_k_has_completed_according_to_user[] = " has completed according to user stream.";
static const char __pyx_k_has_failed_according_to_order_s[] = " has failed according to order status API.";
static const char __pyx_k_has_timed_out_and_putatively_fa[] = " has timed out and putatively failed. Order will be tracked until reconciled.";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_hummingbot_wallet_ethereum_web3[] = "hummingbot.wallet.ethereum.web3_wallet";
static const char __pyx_k_is_greater_than_the_maximum_all[] = ") is greater than the maximum allowable amount(";
static const char __pyx_k_is_less_than_the_minimum_allowa[] = ") is less than the minimum allowable amount(";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_order_in_status_CANCELLED_can_t[] = "order in status CANCELLED can't be cancelled";
static const char __pyx_k_Could_not_fetch_user_events_from[] = "Could not fetch user events from Loopring. Check API key and network connection.";
static const char __pyx_k_Failed_to_fetch_tracked_Loopring[] = "Failed to fetch tracked Loopring order ";
static const char __pyx_k_Failed_to_fetch_updates_on_Loopr[] = "Failed to fetch updates on Loopring. Check network connection.";
static const char __pyx_k_LatchingEventResponder_cancel_on[] = "LatchingEventResponder.cancel_one";
static const char __pyx_k_LoopringAPITokenConfigurationDat[] = "LoopringAPITokenConfigurationDataSource";
static const char __pyx_k_LoopringExchangeTransactionTrack[] = "LoopringExchangeTransactionTracker";
static const char __pyx_k_LoopringExchange__get_next_order[] = "LoopringExchange._get_next_order_id";
static const char __pyx_k_LoopringExchange__iter_user_even[] = "LoopringExchange._iter_user_event_queue";
static const char __pyx_k_LoopringExchange__polling_update[] = "LoopringExchange._polling_update";
static const char __pyx_k_LoopringExchange__serialize_orde[] = "LoopringExchange._serialize_order";
static const char __pyx_k_LoopringExchange__update_balance[] = "LoopringExchange._update_balances";
static const char __pyx_k_LoopringExchange__update_order_s[] = "LoopringExchange._update_order_status";
static const char __pyx_k_LoopringExchange__update_trading[] = "LoopringExchange._update_trading_rules";
static const char __pyx_k_LoopringExchange__user_stream_ev[] = "LoopringExchange._user_stream_event_listener";
static const char __pyx_k_LoopringExchange_get_active_exch[] = "LoopringExchange.get_active_exchange_markets";
static const char __pyx_k_Unknown_error_Retrying_after_1_s[] = "Unknown error. Retrying after 1 seconds.";
static const char __pyx_k_Unrecognized_user_stream_event_t[] = "Unrecognized user stream event topic: ";
static const char __pyx_k_cancel_all_locals_set_cancellati[] = "cancel_all.<locals>.set_cancellation_status";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_connector_exchange_lo[] = "hummingbot.connector.exchange.loopring.loopring_exchange";
static const char __pyx_k_hummingbot_core_data_type_cancel[] = "hummingbot.core.data_type.cancellation_result";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_utils_async_util[] = "hummingbot.core.utils.async_utils";
static const char __pyx_k_hummingbot_core_utils_estimate_f[] = "hummingbot.core.utils.estimate_fee";
static const char __pyx_k_hummingbot_core_utils_tracking_n[] = "hummingbot.core.utils.tracking_nonce";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_is_less_than_the_minimum_allowa_2[] = ") is less than the minimum allowable notional value for an order (";
static const char __pyx_k_hummingbot_connector_exchange_lo_2[] = "hummingbot\\connector\\exchange\\loopring\\loopring_exchange.pyx";
static const char __pyx_k_hummingbot_connector_exchange_lo_3[] = "hummingbot.connector.exchange.loopring.loopring_auth";
static const char __pyx_k_hummingbot_connector_exchange_lo_4[] = "hummingbot.connector.exchange.loopring.loopring_order_book_tracker";
static const char __pyx_k_hummingbot_connector_exchange_lo_5[] = "hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source";
static const char __pyx_k_hummingbot_connector_exchange_lo_6[] = "hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source";
static const char __pyx_k_hummingbot_connector_exchange_lo_7[] = "hummingbot.connector.exchange.loopring.loopring_user_stream_tracker";
static PyObject *__pyx_kp_u_0x;
static PyObject *__pyx_kp_u_0x0;
static PyObject *__pyx_kp_u_1e;
static PyObject *__pyx_n_s_ACCOUNT_INFO_ROUTE;
static PyObject *__pyx_n_s_API_CALL_TIMEOUT;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_s_BALANCES_INFO_ROUTE;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_n_s_BUY_ORDER_COMPLETED_EVENT;
static PyObject *__pyx_n_s_BUY_ORDER_CREATED_EVENT;
static PyObject *__pyx_n_s_BuyOrderCompleted;
static PyObject *__pyx_n_s_BuyOrderCompletedEvent;
static PyObject *__pyx_n_s_BuyOrderCreated;
static PyObject *__pyx_n_s_BuyOrderCreatedEvent;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_kp_u_Cancel_order_returned_code;
static PyObject *__pyx_n_s_CancellationResult;
static PyObject *__pyx_n_s_CancelledError;
static PyObject *__pyx_n_s_ClientSession;
static PyObject *__pyx_kp_u_Content_Type;
static PyObject *__pyx_kp_u_Could_not_fetch_user_events_from;
static PyObject *__pyx_kp_u_Could_not_set_balance;
static PyObject *__pyx_kp_u_Created;
static PyObject *__pyx_n_u_DELETE;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_n_s_EXCHANGE_INFO_ROUTE;
static PyObject *__pyx_kp_u_Error_fetching_data_from;
static PyObject *__pyx_kp_u_Error_getting_the_next_order_id;
static PyObject *__pyx_kp_u_Error_submitting;
static PyObject *__pyx_kp_u_Error_updating_trading_rules;
static PyObject *__pyx_n_s_Event;
static PyObject *__pyx_kp_u_Event_2;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_n_s_FQ;
static PyObject *__pyx_kp_u_Failed_to_cancel_order;
static PyObject *__pyx_kp_u_Failed_to_fetch_tracked_Loopring;
static PyObject *__pyx_kp_u_Failed_to_fetch_updates_on_Loopr;
static PyObject *__pyx_kp_u_Failed_to_update_Loopring_order;
static PyObject *__pyx_n_u_GET;
static PyObject *__pyx_n_s_GET_ORDER_ROUTE;
static PyObject *__pyx_kp_u_HTTP_status_is;
static PyObject *__pyx_n_s_HummingbotLogger;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Issue_with_Loopring_API;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_n_s_LIMIT_MAKER;
static PyObject *__pyx_kp_u_LIMIT_orders_are_not_supported;
static PyObject *__pyx_n_s_LatchingEventResponder;
static PyObject *__pyx_n_s_LatchingEventResponder___call;
static PyObject *__pyx_n_s_LatchingEventResponder___init;
static PyObject *__pyx_n_s_LatchingEventResponder__reduce;
static PyObject *__pyx_n_s_LatchingEventResponder_cancel_on;
static PyObject *__pyx_n_s_LatchingEventResponder_wait_for;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_Lock;
static PyObject *__pyx_n_s_LoopringAPIOrderBookDataSource;
static PyObject *__pyx_n_s_LoopringAPITokenConfigurationDat;
static PyObject *__pyx_n_s_LoopringAuth;
static PyObject *__pyx_n_s_LoopringExchange;
static PyObject *__pyx_n_s_LoopringExchangeTransactionTrack;
static PyObject *__pyx_n_s_LoopringExchange__get_next_order;
static PyObject *__pyx_n_s_LoopringExchange__iter_user_even;
static PyObject *__pyx_n_s_LoopringExchange__polling_update;
static PyObject *__pyx_n_s_LoopringExchange__serialize_orde;
static PyObject *__pyx_n_s_LoopringExchange__set_balances;
static PyObject *__pyx_n_s_LoopringExchange__update_balance;
static PyObject *__pyx_n_s_LoopringExchange__update_order_s;
static PyObject *__pyx_n_s_LoopringExchange__update_trading;
static PyObject *__pyx_n_s_LoopringExchange__user_stream_ev;
static PyObject *__pyx_n_s_LoopringExchange_api_request;
static PyObject *__pyx_n_s_LoopringExchange_cancel_all;
static PyObject *__pyx_n_s_LoopringExchange_cancel_order;
static PyObject *__pyx_n_s_LoopringExchange_check_network;
static PyObject *__pyx_n_s_LoopringExchange_execute_buy;
static PyObject *__pyx_n_s_LoopringExchange_execute_order;
static PyObject *__pyx_n_s_LoopringExchange_execute_sell;
static PyObject *__pyx_n_s_LoopringExchange_get_active_exch;
static PyObject *__pyx_n_s_LoopringExchange_place_order;
static PyObject *__pyx_n_s_LoopringExchange_start_network;
static PyObject *__pyx_n_s_LoopringExchange_stop_network;
static PyObject *__pyx_n_s_LoopringOrderBookTracker;
static PyObject *__pyx_n_s_LoopringUserStreamTracker;
static PyObject *__pyx_n_s_MAINNET_API_REST_ENDPOINT;
static PyObject *__pyx_n_s_MAINNET_WS_ENDPOINT;
static PyObject *__pyx_n_u_MAKER_ONLY;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_n_s_MARKETS_INFO_ROUTE;
static PyObject *__pyx_kp_u_MARKET_orders_are_not_supported;
static PyObject *__pyx_n_s_MAXIMUM_FILL_COUNT;
static PyObject *__pyx_n_s_MarketEvent;
static PyObject *__pyx_n_s_MarketOrderFailureEvent;
static PyObject *__pyx_n_s_NEXT_ORDER_ID;
static PyObject *__pyx_n_s_NOT_CONNECTED;
static PyObject *__pyx_n_u_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_order_book_exists_for;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_ORDER_CANCELLED_EVENT;
static PyObject *__pyx_n_s_ORDER_CANCEL_ROUTE;
static PyObject *__pyx_n_s_ORDER_EXPIRED_EVENT;
static PyObject *__pyx_n_s_ORDER_FAILURE_EVENT;
static PyObject *__pyx_n_s_ORDER_FILLED_EVENT;
static PyObject *__pyx_n_s_ORDER_ROUTE;
static PyObject *__pyx_n_s_Optional;
static PyObject *__pyx_kp_u_Order;
static PyObject *__pyx_n_s_OrderCancelled;
static PyObject *__pyx_n_s_OrderCancelledEvent;
static PyObject *__pyx_n_s_OrderExpired;
static PyObject *__pyx_n_s_OrderExpiredEvent;
static PyObject *__pyx_n_s_OrderFailure;
static PyObject *__pyx_n_s_OrderFilled;
static PyObject *__pyx_n_s_OrderFilledEvent;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_kp_u_Order_amount;
static PyObject *__pyx_kp_u_Order_notional_value;
static PyObject *__pyx_n_u_POST;
static PyObject *__pyx_n_s_PoseidonEdDSA;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_ROUND_DOWN;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_s_SELL_ORDER_COMPLETED_EVENT;
static PyObject *__pyx_n_s_SELL_ORDER_CREATED_EVENT;
static PyObject *__pyx_n_s_SNARK_SCALAR_FIELD;
static PyObject *__pyx_n_s_SellOrderCompleted;
static PyObject *__pyx_n_s_SellOrderCompletedEvent;
static PyObject *__pyx_n_s_SellOrderCreated;
static PyObject *__pyx_n_s_SellOrderCreatedEvent;
static PyObject *__pyx_kp_u_Successfully_cancelled_order;
static PyObject *__pyx_n_s_TOKENS_INFO_ROUTE;
static PyObject *__pyx_kp_u_The_market_buy_order;
static PyObject *__pyx_kp_u_The_market_order;
static PyObject *__pyx_kp_u_The_market_sell_order;
static PyObject *__pyx_n_s_TimeoutError;
static PyObject *__pyx_n_s_TradeFee;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE;
static PyObject *__pyx_kp_u_Unexpected_error_in_user_stream;
static PyObject *__pyx_kp_u_Unknown_error_Retrying_after_1_s;
static PyObject *__pyx_kp_u_Unrecognized_order_ID_from_user;
static PyObject *__pyx_kp_u_Unrecognized_user_stream_event_t;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Web3Wallet;
static PyObject *__pyx_kp_u_X_API_SIG;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_kp_u__24;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__27;
static PyObject *__pyx_n_s__38;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_n_u_account;
static PyObject *__pyx_n_u_accountId;
static PyObject *__pyx_kp_u_accountId_2;
static PyObject *__pyx_n_u_account_balances;
static PyObject *__pyx_n_s_aenter;
static PyObject *__pyx_n_s_aexit;
static PyObject *__pyx_n_s_aiohttp;
static PyObject *__pyx_n_s_aiter;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_u_allOrNone;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_u_amountLocked;
static PyObject *__pyx_n_s_anext;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_api_request;
static PyObject *__pyx_kp_u_api_v3_account;
static PyObject *__pyx_kp_u_api_v3_exchange_markets;
static PyObject *__pyx_kp_u_api_v3_exchange_tokens;
static PyObject *__pyx_kp_u_api_v3_order;
static PyObject *__pyx_kp_u_api_v3_order_2;
static PyObject *__pyx_kp_u_api_v3_storageId;
static PyObject *__pyx_kp_u_api_v3_timestamp;
static PyObject *__pyx_kp_u_api_v3_user_balances;
static PyObject *__pyx_n_s_app_warning_msg;
static PyObject *__pyx_kp_u_application_json;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_as_cancelled;
static PyObject *__pyx_n_s_as_tuple;
static PyObject *__pyx_n_s_asyncio;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_asyncio_tasks;
static PyObject *__pyx_kp_u_at;
static PyObject *__pyx_n_s_await;
static PyObject *__pyx_n_u_baseFilled;
static PyObject *__pyx_n_u_baseTokenId;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_s_binascii;
static PyObject *__pyx_kp_u_buy;
static PyObject *__pyx_n_u_buyToken;
static PyObject *__pyx_n_s_c_did_timeout_tx;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_callback_2;
static PyObject *__pyx_n_s_cancel;
static PyObject *__pyx_n_s_cancel_all;
static PyObject *__pyx_n_s_cancel_all_locals_set_cancellati;
static PyObject *__pyx_n_s_cancel_one;
static PyObject *__pyx_n_s_cancel_order;
static PyObject *__pyx_n_s_check_network;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_u_clientOrderId;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_u_code;
static PyObject *__pyx_n_s_completed;
static PyObject *__pyx_n_s_configure;
static PyObject *__pyx_n_s_created_at;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_u_data;
static PyObject *__pyx_n_s_data_source;
static PyObject *__pyx_n_s_debug;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_description;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dumps;
static PyObject *__pyx_n_u_eddsaSignature;
static PyObject *__pyx_n_u_enabled;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_encode_request;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_estimate_fee;
static PyObject *__pyx_n_s_ethsnarks_loopring;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_u_exchange;
static PyObject *__pyx_n_s_exchange_order_id;
static PyObject *__pyx_n_s_execute_buy;
static PyObject *__pyx_n_s_execute_order;
static PyObject *__pyx_n_s_execute_sell;
static PyObject *__pyx_n_s_exponent;
static PyObject *__pyx_n_u_false;
static PyObject *__pyx_n_u_fee;
static PyObject *__pyx_n_u_fillAmountBOrS;
static PyObject *__pyx_n_u_filledFee;
static PyObject *__pyx_n_u_filledSize;
static PyObject *__pyx_n_u_filledVolume;
static PyObject *__pyx_n_u_float;
static PyObject *__pyx_kp_u_for;
static PyObject *__pyx_n_s_force_sync;
static PyObject *__pyx_kp_u_from_api_code;
static PyObject *__pyx_n_s_from_json;
static PyObject *__pyx_n_s_from_loopring_order;
static PyObject *__pyx_n_s_gather;
static PyObject *__pyx_n_s_generate_auth_dict;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_active_exchange_markets;
static PyObject *__pyx_n_s_get_next_order_id;
static PyObject *__pyx_n_s_get_symbol;
static PyObject *__pyx_n_s_get_tokenid;
static PyObject *__pyx_n_s_get_tokens;
static PyObject *__pyx_n_s_get_tracking_nonce;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_u_has_completed_according_to_user;
static PyObject *__pyx_kp_u_has_failed_according_to_order_s;
static PyObject *__pyx_kp_u_has_timed_out_and_putatively_fa;
static PyObject *__pyx_n_u_hash;
static PyObject *__pyx_n_s_hashlib;
static PyObject *__pyx_n_s_headers;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_hexdigest;
static PyObject *__pyx_n_s_http_method;
static PyObject *__pyx_kp_u_https_api3_loopring_io;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo;
static PyObject *__pyx_kp_s_hummingbot_connector_exchange_lo_2;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo_3;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo_4;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo_5;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo_6;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_lo_7;
static PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
static PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
static PyObject *__pyx_n_s_hummingbot_core_utils_tracking_n;
static PyObject *__pyx_n_s_hummingbot_logger;
static PyObject *__pyx_n_s_hummingbot_wallet_ethereum_web3;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_u_int;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_cancelled;
static PyObject *__pyx_n_s_is_done;
static PyObject *__pyx_n_s_is_failure;
static PyObject *__pyx_kp_u_is_greater_than_the_maximum_all;
static PyObject *__pyx_kp_u_is_less_than_the_minimum_allowa;
static PyObject *__pyx_kp_u_is_less_than_the_minimum_allowa_2;
static PyObject *__pyx_n_s_is_set;
static PyObject *__pyx_n_s_is_snapshot;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter_user_event_queue;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_loads;
static PyObject *__pyx_n_u_locked;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_u_loopring;
static PyObject *__pyx_n_s_loopring_accountid;
static PyObject *__pyx_n_s_loopring_api_key;
static PyObject *__pyx_n_s_loopring_auth;
static PyObject *__pyx_n_s_loopring_exchangeaddress;
static PyObject *__pyx_n_s_loopring_private_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_u_market;
static PyObject *__pyx_n_u_markets;
static PyObject *__pyx_kp_u_marking;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_u_maxFeeBips;
static PyObject *__pyx_n_s_max_order_size;
static PyObject *__pyx_n_u_maximum;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_u_message;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_min_base_amount_increment;
static PyObject *__pyx_n_s_min_notional_size;
static PyObject *__pyx_n_s_min_order_size;
static PyObject *__pyx_n_s_min_price_increment;
static PyObject *__pyx_n_s_min_quote_amount_increment;
static PyObject *__pyx_n_u_minimum;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_network;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_now;
static PyObject *__pyx_n_s_num_d;
static PyObject *__pyx_n_s_num_expected;
static PyObject *__pyx_n_s_num_remaining;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_oce;
static PyObject *__pyx_kp_u_order;
static PyObject *__pyx_n_u_orderAmounts;
static PyObject *__pyx_n_u_orderHash;
static PyObject *__pyx_n_u_orderId;
static PyObject *__pyx_n_u_orderType;
static PyObject *__pyx_n_u_order_2;
static PyObject *__pyx_n_s_order_books;
static PyObject *__pyx_n_u_order_books_initialized;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_kp_u_order_in_status_CANCELLED_can_t;
static PyObject *__pyx_n_s_order_side;
static PyObject *__pyx_kp_u_order_to_Loopring_for;
static PyObject *__pyx_n_s_order_type;
static PyObject *__pyx_n_s_orderbook_tracker_data_source;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_parse;
static PyObject *__pyx_n_s_place_order;
static PyObject *__pyx_n_s_poll_interval;
static PyObject *__pyx_n_s_polling_update;
static PyObject *__pyx_n_b_poseidon;
static PyObject *__pyx_n_s_poseidon;
static PyObject *__pyx_n_s_poseidon_params;
static PyObject *__pyx_n_u_precision;
static PyObject *__pyx_n_u_precisionForPrice;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_u_processing;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_quantize;
static PyObject *__pyx_n_s_quote;
static PyObject *__pyx_n_u_quoteFilled;
static PyObject *__pyx_n_u_quoteTokenId;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_2;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_request;
static PyObject *__pyx_kp_u_response;
static PyObject *__pyx_n_s_rest_api_url;
static PyObject *__pyx_n_u_resultInfo;
static PyObject *__pyx_n_s_rounding;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_s_decimal_NaN;
static PyObject *__pyx_n_s_s_logger;
static PyObject *__pyx_n_s_safe;
static PyObject *__pyx_n_s_safe_ensure_future;
static PyObject *__pyx_n_s_secure;
static PyObject *__pyx_n_s_security_target;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_kp_u_sell;
static PyObject *__pyx_n_u_sellToken;
static PyObject *__pyx_n_u_sellTokenId;
static PyObject *__pyx_n_s_sell_buy_amounts;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_serialize_order;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_set_balances;
static PyObject *__pyx_n_s_set_cancellation_status;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sha256;
static PyObject *__pyx_n_s_sig;
static PyObject *__pyx_n_s_sign;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_split_trading_pair;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_network;
static PyObject *__pyx_n_s_start_tracking;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_u_status;
static PyObject *__pyx_n_s_status_dict;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stop_network;
static PyObject *__pyx_n_s_stop_tracking;
static PyObject *__pyx_n_u_storageId;
static PyObject *__pyx_n_u_sub;
static PyObject *__pyx_n_s_success;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_supports_limit_orders;
static PyObject *__pyx_n_s_supports_market_orders;
static PyObject *__pyx_n_u_taker;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_kp_u_to;
static PyObject *__pyx_n_s_to_json;
static PyObject *__pyx_n_s_to_limit_order;
static PyObject *__pyx_n_s_token;
static PyObject *__pyx_n_u_tokenId;
static PyObject *__pyx_n_s_token_configuration;
static PyObject *__pyx_n_u_topic;
static PyObject *__pyx_n_u_total;
static PyObject *__pyx_n_u_totalAmount;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_tracked_order;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_trading_pairs;
static PyObject *__pyx_n_s_trading_required;
static PyObject *__pyx_n_u_trading_rule_initialized;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_unpad;
static PyObject *__pyx_n_u_unsub;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_balances;
static PyObject *__pyx_n_s_update_exchange_order_id;
static PyObject *__pyx_n_s_update_inflight_order;
static PyObject *__pyx_n_s_update_order_status;
static PyObject *__pyx_n_s_update_trading_rules;
static PyObject *__pyx_n_s_updates;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_urllib;
static PyObject *__pyx_n_s_user_stream;
static PyObject *__pyx_n_s_user_stream_event_listener;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_uuid;
static PyObject *__pyx_n_u_validSince;
static PyObject *__pyx_n_u_validUntil;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_u_volume;
static PyObject *__pyx_n_u_volumes;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_n_s_wait_for;
static PyObject *__pyx_n_s_wait_for_completion;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_websocket_url;
static PyObject *__pyx_kp_u_wss_ws_api3_loopring_io_v2_ws;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zfill;
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_num_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_amount); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_2now(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_num_expected); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_2__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_4_reduce(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_6wait_for_completion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, double __pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_9cancel_one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_loopring_accountid, PyObject *__pyx_v_loopring_exchangeaddress, PyObject *__pyx_v_loopring_private_key, PyObject *__pyx_v_loopring_api_key, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_trading_required); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4get_active_exchange_markets(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_7_get_next_order_id(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_token, PyObject *__pyx_v_force_sync); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10_serialize_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_13supported_order_types(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15place_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_18execute_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_side, PyObject *__pyx_v_client_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_21execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_24execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_27cancel_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_30cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, double __pyx_v_timeout_seconds); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_set_cancellation_status(PyObject *__pyx_self, PyObject *__pyx_v_oce); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_33start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_36stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_39check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_42restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_saved_states); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_44start_tracking(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_in_flight_order); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_46stop_tracking(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_48_update_inflight_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *__pyx_v_tracked_order, PyObject *__pyx_v_event); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_50_set_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_updates, PyObject *__pyx_v_is_snapshot); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_53_iter_user_event_queue(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_56_user_stream_event_listener(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_59_polling_update(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_62_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_65_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_68_update_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_71_encode_request(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_url, PyObject *__pyx_v_method, PyObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_73api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_url, PyObject *__pyx_v_data, PyObject *__pyx_v_params, PyObject *__pyx_v_headers, PyObject *__pyx_v_secure); /* proto */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_76get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_78get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_80buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_82sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_84cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_86get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_88__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_90__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_5_0;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_3600;
static PyObject *__pyx_int_100001;
static PyObject *__pyx_int_102117;
static PyObject *__pyx_int_107003;
static PyObject *__pyx_int_3024000;
static PyObject *__pyx_int_4294967294;
static PyObject *__pyx_k__15;
static PyObject *__pyx_k__16;
static PyObject *__pyx_k__17;
static PyObject *__pyx_k__18;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__30;
static PyObject *__pyx_k__31;
static PyObject *__pyx_k__32;
static PyObject *__pyx_k__33;
static PyObject *__pyx_k__54;
static PyObject *__pyx_k__55;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_slice__9;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__52;
/* Late includes */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":64
 * 
 * 
 * def num_d(amount):             # <<<<<<<<<<<<<<
 *     return abs(Decimal(amount).normalize().as_tuple().exponent)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_1num_d(PyObject *__pyx_self, PyObject *__pyx_v_amount); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_1num_d = {"num_d", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_1num_d, METH_O, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_1num_d(PyObject *__pyx_self, PyObject *__pyx_v_amount) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_d (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_num_d(__pyx_self, ((PyObject *)__pyx_v_amount));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_num_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("num_d", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":65
 * 
 * def num_d(amount):
 *     return abs(Decimal(amount).normalize().as_tuple().exponent)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_amount);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_normalize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_as_tuple); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exponent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":64
 * 
 * 
 * def num_d(amount):             # <<<<<<<<<<<<<<
 *     return abs(Decimal(amount).normalize().as_tuple().exponent)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.num_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":68
 * 
 * 
 * def now():             # <<<<<<<<<<<<<<
 *     return int(time.time()) * 1000
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_3now(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_3now = {"now", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_3now, METH_NOARGS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_3now(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("now (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_2now(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_2now(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("now", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":69
 * 
 * def now():
 *     return int(time.time()) * 1000             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_int_1000); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":68
 * 
 * 
 * def now():             # <<<<<<<<<<<<<<
 *     return int(time.time()) * 1000
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.now", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":100
 * 
 * class LatchingEventResponder(EventListener):
 *     def __init__(self, callback: any, num_expected: int):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._callback = callback
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_num_expected = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_callback,&__pyx_n_s_num_expected,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_expected)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_callback = values[1];
    __pyx_v_num_expected = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder___init__(__pyx_self, __pyx_v_self, __pyx_v_callback, __pyx_v_num_expected);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_callback, PyObject *__pyx_v_num_expected) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":101
 * class LatchingEventResponder(EventListener):
 *     def __init__(self, callback: any, num_expected: int):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._callback = callback
 *         self._completed = asyncio.Event()
 */
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 101, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":102
 *     def __init__(self, callback: any, num_expected: int):
 *         super().__init__()
 *         self._callback = callback             # <<<<<<<<<<<<<<
 *         self._completed = asyncio.Event()
 *         self._num_remaining = num_expected
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_callback_2, __pyx_v_callback) < 0) __PYX_ERR(0, 102, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":103
 *         super().__init__()
 *         self._callback = callback
 *         self._completed = asyncio.Event()             # <<<<<<<<<<<<<<
 *         self._num_remaining = num_expected
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Event); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_completed, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":104
 *         self._callback = callback
 *         self._completed = asyncio.Event()
 *         self._num_remaining = num_expected             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, arg: any):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_num_remaining, __pyx_v_num_expected) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":100
 * 
 * class LatchingEventResponder(EventListener):
 *     def __init__(self, callback: any, num_expected: int):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._callback = callback
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":106
 *         self._num_remaining = num_expected
 * 
 *     def __call__(self, arg: any):             # <<<<<<<<<<<<<<
 *         if self._callback(arg):
 *             self._reduce()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_3__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_3__call__ = {"__call__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_3__call__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_3__call__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_arg,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, 1); __PYX_ERR(0, 106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_2__call__(__pyx_self, __pyx_v_self, __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_2__call__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":107
 * 
 *     def __call__(self, arg: any):
 *         if self._callback(arg):             # <<<<<<<<<<<<<<
 *             self._reduce()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_callback_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_arg);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":108
 *     def __call__(self, arg: any):
 *         if self._callback(arg):
 *             self._reduce()             # <<<<<<<<<<<<<<
 * 
 *     def _reduce(self):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_reduce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":107
 * 
 *     def __call__(self, arg: any):
 *         if self._callback(arg):             # <<<<<<<<<<<<<<
 *             self._reduce()
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":106
 *         self._num_remaining = num_expected
 * 
 *     def __call__(self, arg: any):             # <<<<<<<<<<<<<<
 *         if self._callback(arg):
 *             self._reduce()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":110
 *             self._reduce()
 * 
 *     def _reduce(self):             # <<<<<<<<<<<<<<
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_5_reduce(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_5_reduce = {"_reduce", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_5_reduce, METH_O, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_5_reduce(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_reduce (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_4_reduce(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_4_reduce(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_reduce", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":111
 * 
 *     def _reduce(self):
 *         self._num_remaining -= 1             # <<<<<<<<<<<<<<
 *         if self._num_remaining <= 0:
 *             self._completed.set()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_num_remaining); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_num_remaining, __pyx_t_2) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":112
 *     def _reduce(self):
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:             # <<<<<<<<<<<<<<
 *             self._completed.set()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_num_remaining); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":113
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:
 *             self._completed.set()             # <<<<<<<<<<<<<<
 * 
 *     async def wait_for_completion(self, timeout: float):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_completed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_set); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":112
 *     def _reduce(self):
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:             # <<<<<<<<<<<<<<
 *             self._completed.set()
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":110
 *             self._reduce()
 * 
 *     def _reduce(self):             # <<<<<<<<<<<<<<
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder._reduce", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":115
 *             self._completed.set()
 * 
 *     async def wait_for_completion(self, timeout: float):             # <<<<<<<<<<<<<<
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_7wait_for_completion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_7wait_for_completion = {"wait_for_completion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_7wait_for_completion, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_7wait_for_completion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  double __pyx_v_timeout;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wait_for_completion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_timeout,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeout)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("wait_for_completion", 1, 2, 2, 1); __PYX_ERR(0, 115, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "wait_for_completion") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_timeout = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_timeout == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wait_for_completion", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.wait_for_completion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_6wait_for_completion(__pyx_self, __pyx_v_self, __pyx_v_timeout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_6wait_for_completion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, double __pyx_v_timeout) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wait_for_completion", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 115, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_timeout = __pyx_v_timeout;
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_8generator, __pyx_codeobj_, (PyObject *) __pyx_cur_scope, __pyx_n_s_wait_for_completion, __pyx_n_s_LatchingEventResponder_wait_for, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.wait_for_completion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wait_for_completion", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 115, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":116
 * 
 *     async def wait_for_completion(self, timeout: float):
 *         try:             # <<<<<<<<<<<<<<
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 *         except asyncio.TimeoutError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":117
 *     async def wait_for_completion(self, timeout: float):
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)             # <<<<<<<<<<<<<<
 *         except asyncio.TimeoutError:
 *             pass
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_wait_for); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_completed); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_wait); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_timeout, __pyx_t_6) < 0) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L10_resume_from_await:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 117, __pyx_L4_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 117, __pyx_L4_error)
        }
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":116
 * 
 *     async def wait_for_completion(self, timeout: float):
 *         try:             # <<<<<<<<<<<<<<
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 *         except asyncio.TimeoutError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":118
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 *         except asyncio.TimeoutError:             # <<<<<<<<<<<<<<
 *             pass
 *         return self._completed.is_set()
 */
    __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_4, &__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_TimeoutError); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 118, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_6, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_ErrRestore(__pyx_t_6, __pyx_t_4, __pyx_t_7);
    __pyx_t_6 = 0; __pyx_t_4 = 0; __pyx_t_7 = 0;
    if (__pyx_t_9) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":116
 * 
 *     async def wait_for_completion(self, timeout: float):
 *         try:             # <<<<<<<<<<<<<<
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 *         except asyncio.TimeoutError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L9_try_end:;
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":120
 *         except asyncio.TimeoutError:
 *             pass
 *         return self._completed.is_set()             # <<<<<<<<<<<<<<
 * 
 *     def cancel_one(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_completed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_is_set); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_7 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":115
 *             self._completed.set()
 * 
 *     async def wait_for_completion(self, timeout: float):             # <<<<<<<<<<<<<<
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("wait_for_completion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":122
 *         return self._completed.is_set()
 * 
 *     def cancel_one(self):             # <<<<<<<<<<<<<<
 *         self._reduce()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_10cancel_one(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_10cancel_one = {"cancel_one", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_10cancel_one, METH_O, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_10cancel_one(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_one (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_9cancel_one(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_9cancel_one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("cancel_one", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":123
 * 
 *     def cancel_one(self):
 *         self._reduce()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_reduce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":122
 *         return self._completed.is_set()
 * 
 *     def cancel_one(self):             # <<<<<<<<<<<<<<
 *         self._reduce()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LatchingEventResponder.cancel_one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":130
 *         LoopringExchange _owner
 * 
 *     def __init__(self, owner: LoopringExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_owner = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner), __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, 1, "owner", 0))) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":131
 * 
 *     def __init__(self, owner: LoopringExchange):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":132
 *     def __init__(self, owner: LoopringExchange):
 *         super().__init__()
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_owner));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_owner));
  __Pyx_GOTREF(__pyx_v_self->_owner);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_owner));
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":130
 *         LoopringExchange _owner
 * 
 *     def __init__(self, owner: LoopringExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":134
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("c_did_timeout_tx", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":135
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_timeout_tx(tx_id)
 * 
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->c_did_timeout_tx(((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self), __pyx_v_tx_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":136
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)             # <<<<<<<<<<<<<<
 * 
 * cdef class LoopringExchange(ExchangeBase):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_owner), __pyx_n_s_c_did_timeout_tx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_tx_id) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_tx_id);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":134
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker.c_did_timeout_tx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_2__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_4__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":140
 * cdef class LoopringExchange(ExchangeBase):
 *     @classmethod
 *     def logger(cls) -> HummingbotLogger:             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_1logger(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_1logger(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":142
 *     def logger(cls) -> HummingbotLogger:
 *         global s_logger
 *         if s_logger is None:             # <<<<<<<<<<<<<<
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":143
 *         global s_logger
 *         if s_logger is None:
 *             s_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return s_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":142
 *     def logger(cls) -> HummingbotLogger:
 *         global s_logger
 *         if s_logger is None:             # <<<<<<<<<<<<<<
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":144
 *         if s_logger is None:
 *             s_logger = logging.getLogger(__name__)
 *         return s_logger             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":140
 * cdef class LoopringExchange(ExchangeBase):
 *     @classmethod
 *     def logger(cls) -> HummingbotLogger:             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":146
 *         return s_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  loopring_accountid: int,
 *                  loopring_exchangeaddress: str,
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_loopring_accountid = 0;
  PyObject *__pyx_v_loopring_exchangeaddress = 0;
  PyObject *__pyx_v_loopring_private_key = 0;
  PyObject *__pyx_v_loopring_api_key = 0;
  double __pyx_v_poll_interval;
  PyObject *__pyx_v_trading_pairs = 0;
  PyObject *__pyx_v_trading_required = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_loopring_accountid,&__pyx_n_s_loopring_exchangeaddress,&__pyx_n_s_loopring_private_key,&__pyx_n_s_loopring_api_key,&__pyx_n_s_poll_interval,&__pyx_n_s_trading_pairs,&__pyx_n_s_trading_required,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":152
 *                  loopring_api_key: str,
 *                  poll_interval: float = 10.0,
 *                  trading_pairs: Optional[List[str]] = None,             # <<<<<<<<<<<<<<
 *                  trading_required: bool = True):
 * 
 */
    values[5] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":153
 *                  poll_interval: float = 10.0,
 *                  trading_pairs: Optional[List[str]] = None,
 *                  trading_required: bool = True):             # <<<<<<<<<<<<<<
 * 
 *         super().__init__()
 */
    values[6] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_loopring_accountid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_loopring_exchangeaddress)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 1); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_loopring_private_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 2); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_loopring_api_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 3); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_poll_interval);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pairs);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_required);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_loopring_accountid = values[0];
    __pyx_v_loopring_exchangeaddress = ((PyObject*)values[1]);
    __pyx_v_loopring_private_key = ((PyObject*)values[2]);
    __pyx_v_loopring_api_key = ((PyObject*)values[3]);
    if (values[4]) {
      __pyx_v_poll_interval = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_poll_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
    } else {
      __pyx_v_poll_interval = ((double)10.0);
    }
    __pyx_v_trading_pairs = values[5];
    __pyx_v_trading_required = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_loopring_exchangeaddress), (&PyUnicode_Type), 1, "loopring_exchangeaddress", 1))) __PYX_ERR(0, 148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_loopring_private_key), (&PyUnicode_Type), 1, "loopring_private_key", 1))) __PYX_ERR(0, 149, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_loopring_api_key), (&PyUnicode_Type), 1, "loopring_api_key", 1))) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_2__init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_loopring_accountid, __pyx_v_loopring_exchangeaddress, __pyx_v_loopring_private_key, __pyx_v_loopring_api_key, __pyx_v_poll_interval, __pyx_v_trading_pairs, __pyx_v_trading_required);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":146
 *         return s_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  loopring_accountid: int,
 *                  loopring_exchangeaddress: str,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_loopring_accountid, PyObject *__pyx_v_loopring_exchangeaddress, PyObject *__pyx_v_loopring_private_key, PyObject *__pyx_v_loopring_api_key, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_trading_required) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":155
 *                  trading_required: bool = True):
 * 
 *         super().__init__()             # <<<<<<<<<<<<<<
 * 
 *         self._real_time_balance_update = True
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":157
 *         super().__init__()
 * 
 *         self._real_time_balance_update = True             # <<<<<<<<<<<<<<
 * 
 *         self._loopring_auth = LoopringAuth(loopring_api_key)
 */
  __pyx_v_self->__pyx_base.__pyx_base._real_time_balance_update = 1;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":159
 *         self._real_time_balance_update = True
 * 
 *         self._loopring_auth = LoopringAuth(loopring_api_key)             # <<<<<<<<<<<<<<
 *         self._token_configuration = LoopringAPITokenConfigurationDataSource()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LoopringAuth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_loopring_api_key) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_loopring_api_key);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_loopring_auth);
  __Pyx_DECREF(__pyx_v_self->_loopring_auth);
  __pyx_v_self->_loopring_auth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":160
 * 
 *         self._loopring_auth = LoopringAuth(loopring_api_key)
 *         self._token_configuration = LoopringAPITokenConfigurationDataSource()             # <<<<<<<<<<<<<<
 * 
 *         self.API_REST_ENDPOINT = MAINNET_API_REST_ENDPOINT
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LoopringAPITokenConfigurationDat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_token_configuration);
  __Pyx_DECREF(__pyx_v_self->_token_configuration);
  __pyx_v_self->_token_configuration = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":162
 *         self._token_configuration = LoopringAPITokenConfigurationDataSource()
 * 
 *         self.API_REST_ENDPOINT = MAINNET_API_REST_ENDPOINT             # <<<<<<<<<<<<<<
 *         self.WS_ENDPOINT = MAINNET_WS_ENDPOINT
 *         self._order_book_tracker = LoopringOrderBookTracker(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MAINNET_API_REST_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->API_REST_ENDPOINT);
  __Pyx_DECREF(__pyx_v_self->API_REST_ENDPOINT);
  __pyx_v_self->API_REST_ENDPOINT = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":163
 * 
 *         self.API_REST_ENDPOINT = MAINNET_API_REST_ENDPOINT
 *         self.WS_ENDPOINT = MAINNET_WS_ENDPOINT             # <<<<<<<<<<<<<<
 *         self._order_book_tracker = LoopringOrderBookTracker(
 *             trading_pairs=trading_pairs,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MAINNET_WS_ENDPOINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->WS_ENDPOINT);
  __Pyx_DECREF(__pyx_v_self->WS_ENDPOINT);
  __pyx_v_self->WS_ENDPOINT = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":164
 *         self.API_REST_ENDPOINT = MAINNET_API_REST_ENDPOINT
 *         self.WS_ENDPOINT = MAINNET_WS_ENDPOINT
 *         self._order_book_tracker = LoopringOrderBookTracker(             # <<<<<<<<<<<<<<
 *             trading_pairs=trading_pairs,
 *             rest_api_url=self.API_REST_ENDPOINT,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LoopringOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":165
 *         self.WS_ENDPOINT = MAINNET_WS_ENDPOINT
 *         self._order_book_tracker = LoopringOrderBookTracker(
 *             trading_pairs=trading_pairs,             # <<<<<<<<<<<<<<
 *             rest_api_url=self.API_REST_ENDPOINT,
 *             websocket_url=self.WS_ENDPOINT,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pairs, __pyx_v_trading_pairs) < 0) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":166
 *         self._order_book_tracker = LoopringOrderBookTracker(
 *             trading_pairs=trading_pairs,
 *             rest_api_url=self.API_REST_ENDPOINT,             # <<<<<<<<<<<<<<
 *             websocket_url=self.WS_ENDPOINT,
 *             token_configuration = self._token_configuration
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rest_api_url, __pyx_v_self->API_REST_ENDPOINT) < 0) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":167
 *             trading_pairs=trading_pairs,
 *             rest_api_url=self.API_REST_ENDPOINT,
 *             websocket_url=self.WS_ENDPOINT,             # <<<<<<<<<<<<<<
 *             token_configuration = self._token_configuration
 *         )
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_websocket_url, __pyx_v_self->WS_ENDPOINT) < 0) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":168
 *             rest_api_url=self.API_REST_ENDPOINT,
 *             websocket_url=self.WS_ENDPOINT,
 *             token_configuration = self._token_configuration             # <<<<<<<<<<<<<<
 *         )
 *         self._user_stream_tracker = LoopringUserStreamTracker(
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_token_configuration, __pyx_v_self->_token_configuration) < 0) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":164
 *         self.API_REST_ENDPOINT = MAINNET_API_REST_ENDPOINT
 *         self.WS_ENDPOINT = MAINNET_WS_ENDPOINT
 *         self._order_book_tracker = LoopringOrderBookTracker(             # <<<<<<<<<<<<<<
 *             trading_pairs=trading_pairs,
 *             rest_api_url=self.API_REST_ENDPOINT,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __pyx_v_self->__pyx_base._order_book_tracker = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":170
 *             token_configuration = self._token_configuration
 *         )
 *         self._user_stream_tracker = LoopringUserStreamTracker(             # <<<<<<<<<<<<<<
 *             orderbook_tracker_data_source=self._order_book_tracker.data_source,
 *             loopring_auth=self._loopring_auth
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LoopringUserStreamTracker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":171
 *         )
 *         self._user_stream_tracker = LoopringUserStreamTracker(
 *             orderbook_tracker_data_source=self._order_book_tracker.data_source,             # <<<<<<<<<<<<<<
 *             loopring_auth=self._loopring_auth
 *         )
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_data_source); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_orderbook_tracker_data_source, __pyx_t_1) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":172
 *         self._user_stream_tracker = LoopringUserStreamTracker(
 *             orderbook_tracker_data_source=self._order_book_tracker.data_source,
 *             loopring_auth=self._loopring_auth             # <<<<<<<<<<<<<<
 *         )
 *         self._user_stream_event_listener_task = None
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_loopring_auth, __pyx_v_self->_loopring_auth) < 0) __PYX_ERR(0, 171, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":170
 *             token_configuration = self._token_configuration
 *         )
 *         self._user_stream_tracker = LoopringUserStreamTracker(             # <<<<<<<<<<<<<<
 *             orderbook_tracker_data_source=self._order_book_tracker.data_source,
 *             loopring_auth=self._loopring_auth
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker);
  __pyx_v_self->_user_stream_tracker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":174
 *             loopring_auth=self._loopring_auth
 *         )
 *         self._user_stream_event_listener_task = None             # <<<<<<<<<<<<<<
 *         self._user_stream_tracker_task = None
 *         self._tx_tracker = LoopringExchangeTransactionTracker(self)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":175
 *         )
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker_task = None             # <<<<<<<<<<<<<<
 *         self._tx_tracker = LoopringExchangeTransactionTracker(self)
 *         self._trading_required = trading_required
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_v_self->_user_stream_tracker_task = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":176
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker_task = None
 *         self._tx_tracker = LoopringExchangeTransactionTracker(self)             # <<<<<<<<<<<<<<
 *         self._trading_required = trading_required
 *         self._poll_notifier = asyncio.Event()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_tx_tracker);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_tx_tracker));
  __pyx_v_self->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":177
 *         self._user_stream_tracker_task = None
 *         self._tx_tracker = LoopringExchangeTransactionTracker(self)
 *         self._trading_required = trading_required             # <<<<<<<<<<<<<<
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_trading_required); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_v_self->__pyx_base.__pyx_base._trading_required = __pyx_t_4;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":178
 *         self._tx_tracker = LoopringExchangeTransactionTracker(self)
 *         self._trading_required = trading_required
 *         self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._poll_interval = poll_interval
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Event); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_poll_notifier);
  __Pyx_DECREF(__pyx_v_self->_poll_notifier);
  __pyx_v_self->_poll_notifier = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":179
 *         self._trading_required = trading_required
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._poll_interval = poll_interval
 *         self._shared_client = None
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":180
 *         self._poll_notifier = asyncio.Event()
 *         self._last_timestamp = 0
 *         self._poll_interval = poll_interval             # <<<<<<<<<<<<<<
 *         self._shared_client = None
 *         self._polling_update_task = None
 */
  __pyx_v_self->_poll_interval = __pyx_v_poll_interval;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":181
 *         self._last_timestamp = 0
 *         self._poll_interval = poll_interval
 *         self._shared_client = None             # <<<<<<<<<<<<<<
 *         self._polling_update_task = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_shared_client);
  __Pyx_DECREF(__pyx_v_self->_shared_client);
  __pyx_v_self->_shared_client = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":182
 *         self._poll_interval = poll_interval
 *         self._shared_client = None
 *         self._polling_update_task = None             # <<<<<<<<<<<<<<
 * 
 *         self._loopring_accountid = int(loopring_accountid)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_polling_update_task);
  __Pyx_DECREF(__pyx_v_self->_polling_update_task);
  __pyx_v_self->_polling_update_task = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":184
 *         self._polling_update_task = None
 * 
 *         self._loopring_accountid = int(loopring_accountid)             # <<<<<<<<<<<<<<
 *         self._loopring_exchangeid = loopring_exchangeaddress
 *         self._loopring_private_key = loopring_private_key
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_loopring_accountid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_loopring_accountid = __pyx_t_5;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":185
 * 
 *         self._loopring_accountid = int(loopring_accountid)
 *         self._loopring_exchangeid = loopring_exchangeaddress             # <<<<<<<<<<<<<<
 *         self._loopring_private_key = loopring_private_key
 * 
 */
  __Pyx_INCREF(__pyx_v_loopring_exchangeaddress);
  __Pyx_GIVEREF(__pyx_v_loopring_exchangeaddress);
  __Pyx_GOTREF(__pyx_v_self->_loopring_exchangeid);
  __Pyx_DECREF(__pyx_v_self->_loopring_exchangeid);
  __pyx_v_self->_loopring_exchangeid = __pyx_v_loopring_exchangeaddress;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":186
 *         self._loopring_accountid = int(loopring_accountid)
 *         self._loopring_exchangeid = loopring_exchangeaddress
 *         self._loopring_private_key = loopring_private_key             # <<<<<<<<<<<<<<
 * 
 *         # State
 */
  __Pyx_INCREF(__pyx_v_loopring_private_key);
  __Pyx_GIVEREF(__pyx_v_loopring_private_key);
  __Pyx_GOTREF(__pyx_v_self->_loopring_private_key);
  __Pyx_DECREF(__pyx_v_self->_loopring_private_key);
  __pyx_v_self->_loopring_private_key = __pyx_v_loopring_private_key;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":189
 * 
 *         # State
 *         self._lock = asyncio.Lock()             # <<<<<<<<<<<<<<
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Lock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_lock);
  __Pyx_DECREF(__pyx_v_self->_lock);
  __pyx_v_self->_lock = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":190
 *         # State
 *         self._lock = asyncio.Lock()
 *         self._trading_rules = {}             # <<<<<<<<<<<<<<
 *         self._pending_approval_tx_hashes = set()
 *         self._in_flight_orders = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules);
  __Pyx_DECREF(__pyx_v_self->_trading_rules);
  __pyx_v_self->_trading_rules = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":191
 *         self._lock = asyncio.Lock()
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()             # <<<<<<<<<<<<<<
 *         self._in_flight_orders = {}
 *         self._next_order_id = {}
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_pending_approval_tx_hashes);
  __Pyx_DECREF(__pyx_v_self->_pending_approval_tx_hashes);
  __pyx_v_self->_pending_approval_tx_hashes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":192
 *         self._trading_rules = {}
 *         self._pending_approval_tx_hashes = set()
 *         self._in_flight_orders = {}             # <<<<<<<<<<<<<<
 *         self._next_order_id = {}
 *         self._trading_pairs = trading_pairs
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_orders);
  __pyx_v_self->_in_flight_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":193
 *         self._pending_approval_tx_hashes = set()
 *         self._in_flight_orders = {}
 *         self._next_order_id = {}             # <<<<<<<<<<<<<<
 *         self._trading_pairs = trading_pairs
 *         self._order_sign_param = poseidon_params(SNARK_SCALAR_FIELD, 12, 6, 53, b'poseidon', 5, security_target=128)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_next_order_id);
  __Pyx_DECREF(__pyx_v_self->_next_order_id);
  __pyx_v_self->_next_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":194
 *         self._in_flight_orders = {}
 *         self._next_order_id = {}
 *         self._trading_pairs = trading_pairs             # <<<<<<<<<<<<<<
 *         self._order_sign_param = poseidon_params(SNARK_SCALAR_FIELD, 12, 6, 53, b'poseidon', 5, security_target=128)
 * 
 */
  if (!(likely(PyList_CheckExact(__pyx_v_trading_pairs))||((__pyx_v_trading_pairs) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_trading_pairs)->tp_name), 0))) __PYX_ERR(0, 194, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_trading_pairs;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_trading_pairs);
  __Pyx_DECREF(__pyx_v_self->_trading_pairs);
  __pyx_v_self->_trading_pairs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":195
 *         self._next_order_id = {}
 *         self._trading_pairs = trading_pairs
 *         self._order_sign_param = poseidon_params(SNARK_SCALAR_FIELD, 12, 6, 53, b'poseidon', 5, security_target=128)             # <<<<<<<<<<<<<<
 * 
 *         self._order_id_lock = asyncio.Lock()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_poseidon_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SNARK_SCALAR_FIELD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_12);
  __Pyx_GIVEREF(__pyx_int_12);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_12);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_53);
  __Pyx_GIVEREF(__pyx_int_53);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_int_53);
  __Pyx_INCREF(__pyx_n_b_poseidon);
  __Pyx_GIVEREF(__pyx_n_b_poseidon);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_n_b_poseidon);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_int_5);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_security_target, __pyx_int_128) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_order_sign_param);
  __Pyx_DECREF(__pyx_v_self->_order_sign_param);
  __pyx_v_self->_order_sign_param = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":197
 *         self._order_sign_param = poseidon_params(SNARK_SCALAR_FIELD, 12, 6, 53, b'poseidon', 5, security_target=128)
 * 
 *         self._order_id_lock = asyncio.Lock()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Lock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_order_id_lock);
  __Pyx_DECREF(__pyx_v_self->_order_id_lock);
  __pyx_v_self->_order_id_lock = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":146
 *         return s_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  loopring_accountid: int,
 *                  loopring_exchangeaddress: str,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":200
 * 
 *     @property
 *     def name(self) -> str:             # <<<<<<<<<<<<<<
 *         return "loopring"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":201
 *     @property
 *     def name(self) -> str:
 *         return "loopring"             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_u_loopring);
  __pyx_r = __pyx_n_u_loopring;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":200
 * 
 *     @property
 *     def name(self) -> str:             # <<<<<<<<<<<<<<
 *         return "loopring"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":204
 * 
 *     @property
 *     def ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return all(self.status_dict.values())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":205
 *     @property
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_status_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":204
 * 
 *     @property
 *     def ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return all(self.status_dict.values())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.ready.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":208
 * 
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:             # <<<<<<<<<<<<<<
 *         return {
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":209
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {             # <<<<<<<<<<<<<<
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,
 *             "account_balances": len(self._account_balances) > 0 if self._trading_required else True,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":210
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,             # <<<<<<<<<<<<<<
 *             "account_balances": len(self._account_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_3 > 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_order_books_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":211
 *         return {
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,
 *             "account_balances": len(self._account_balances) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,
 *         }
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_4 = __pyx_v_self->__pyx_base.__pyx_base._account_balances;
    __Pyx_INCREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 211, __pyx_L1_error)
    }
    __pyx_t_3 = PyDict_Size(__pyx_t_4); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_t_3 > 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_account_balances, __pyx_t_2) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":212
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,
 *             "account_balances": len(self._account_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_4 = __pyx_v_self->_trading_rules;
    __Pyx_INCREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 212, __pyx_L1_error)
    }
    __pyx_t_3 = PyDict_Size(__pyx_t_4); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong((__pyx_t_3 > 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_trading_rule_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":208
 * 
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:             # <<<<<<<<<<<<<<
 *         return {
 *             "order_books_initialized": len(self._order_book_tracker.order_books) > 0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.status_dict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":216
 * 
 *     @property
 *     def token_configuration(self) -> LoopringAPITokenConfigurationDataSource:             # <<<<<<<<<<<<<<
 *         return self._token_configuration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":217
 *     @property
 *     def token_configuration(self) -> LoopringAPITokenConfigurationDataSource:
 *         return self._token_configuration             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_token_configuration);
  __pyx_r = __pyx_v_self->_token_configuration;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":216
 * 
 *     @property
 *     def token_configuration(self) -> LoopringAPITokenConfigurationDataSource:             # <<<<<<<<<<<<<<
 *         return self._token_configuration
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":223
 * 
 *     @property
 *     def order_books(self) -> Dict[str, OrderBook]:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.order_books
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":224
 *     @property
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":223
 * 
 *     @property
 *     def order_books(self) -> Dict[str, OrderBook]:             # <<<<<<<<<<<<<<
 *         return self._order_book_tracker.order_books
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.order_books.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":226
 *         return self._order_book_tracker.order_books
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef dict order_books = self._order_book_tracker.order_books
 *         if trading_pair not in order_books:
 */

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_v_order_books = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_book", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":227
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         cdef dict order_books = self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_v_order_books = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":228
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         cdef dict order_books = self._order_book_tracker.order_books
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 228, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_order_books, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":229
 *         cdef dict order_books = self._order_book_tracker.order_books
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")             # <<<<<<<<<<<<<<
 *         return order_books[trading_pair]
 * 
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_order_book_exists_for);
    __pyx_t_4 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_No_order_book_exists_for);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_No_order_book_exists_for);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_4 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__4);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__4);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 229, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":228
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         cdef dict order_books = self._order_book_tracker.order_books
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":230
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 230, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_order_books, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":226
 *         return self._order_book_tracker.order_books
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef dict order_books = self._order_book_tracker.order_books
 *         if trading_pair not in order_books:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_books);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":233
 * 
 *     @property
 *     def limit_orders(self) -> List[LimitOrder]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_v_retval = 0;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *__pyx_v_loopring_flight_order = 0;
  PyObject *__pyx_v_in_flight_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":235
 *     def limit_orders(self) -> List[LimitOrder]:
 *         cdef:
 *             list retval = []             # <<<<<<<<<<<<<<
 *             LoopringInFlightOrder loopring_flight_order
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retval = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":238
 *             LoopringInFlightOrder loopring_flight_order
 * 
 *         for in_flight_order in self._in_flight_orders.values():             # <<<<<<<<<<<<<<
 *             loopring_flight_order = in_flight_order
 *             if loopring_flight_order.order_type is OrderType.LIMIT:
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_values, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, NULL, &__pyx_t_5, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_in_flight_order, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":239
 * 
 *         for in_flight_order in self._in_flight_orders.values():
 *             loopring_flight_order = in_flight_order             # <<<<<<<<<<<<<<
 *             if loopring_flight_order.order_type is OrderType.LIMIT:
 *                 retval.append(loopring_flight_order.to_limit_order())
 */
    if (!(likely(((__pyx_v_in_flight_order) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_in_flight_order, __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder))))) __PYX_ERR(0, 239, __pyx_L1_error)
    __pyx_t_5 = __pyx_v_in_flight_order;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_loopring_flight_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":240
 *         for in_flight_order in self._in_flight_orders.values():
 *             loopring_flight_order = in_flight_order
 *             if loopring_flight_order.order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *                 retval.append(loopring_flight_order.to_limit_order())
 *         return retval
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = (__pyx_v_loopring_flight_order->__pyx_base.order_type == __pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":241
 *             loopring_flight_order = in_flight_order
 *             if loopring_flight_order.order_type is OrderType.LIMIT:
 *                 retval.append(loopring_flight_order.to_limit_order())             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_loopring_flight_order), __pyx_n_s_to_limit_order); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":240
 *         for in_flight_order in self._in_flight_orders.values():
 *             loopring_flight_order = in_flight_order
 *             if loopring_flight_order.order_type is OrderType.LIMIT:             # <<<<<<<<<<<<<<
 *                 retval.append(loopring_flight_order.to_limit_order())
 *         return retval
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":242
 *             if loopring_flight_order.order_type is OrderType.LIMIT:
 *                 retval.append(loopring_flight_order.to_limit_order())
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":233
 * 
 *     @property
 *     def limit_orders(self) -> List[LimitOrder]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF((PyObject *)__pyx_v_loopring_flight_order);
  __Pyx_XDECREF(__pyx_v_in_flight_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":244
 *         return retval
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await LoopringAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5get_active_exchange_markets(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5get_active_exchange_markets(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4get_active_exchange_markets(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4get_active_exchange_markets(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 244, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_6generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_active_exchange_markets, __pyx_n_s_LoopringExchange_get_active_exch, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_6generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 244, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":245
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:
 *         return await LoopringAPIOrderBookDataSource.get_active_exchange_markets()             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LoopringAPIOrderBookDataSource); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_active_exchange_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 245, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":244
 *         return retval
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await LoopringAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":250
 *     # Account Balances
 * 
 *     cdef object c_get_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self._account_balances[currency]
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c_get_balance", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":251
 * 
 *     cdef object c_get_balance(self, str currency):
 *         return self._account_balances[currency]             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_available_balance(self, str currency):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 251, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_v_currency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":250
 *     # Account Balances
 * 
 *     cdef object c_get_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self._account_balances[currency]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":253
 *         return self._account_balances[currency]
 * 
 *     cdef object c_get_available_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self._account_available_balances[currency]
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_available_balance(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_currency) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c_get_available_balance", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":254
 * 
 *     cdef object c_get_available_balance(self, str currency):
 *         return self._account_available_balances[currency]             # <<<<<<<<<<<<<<
 * 
 *     # ==========================================================
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 254, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_v_currency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":253
 *         return self._account_balances[currency]
 * 
 *     cdef object c_get_available_balance(self, str currency):             # <<<<<<<<<<<<<<
 *         return self._account_available_balances[currency]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":261
 * 
 *     @property
 *     def in_flight_orders(self) -> Dict[str, LoopringInFlightOrder]:             # <<<<<<<<<<<<<<
 *         return self._in_flight_orders
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":262
 *     @property
 *     def in_flight_orders(self) -> Dict[str, LoopringInFlightOrder]:
 *         return self._in_flight_orders             # <<<<<<<<<<<<<<
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_in_flight_orders);
  __pyx_r = __pyx_v_self->_in_flight_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":261
 * 
 *     @property
 *     def in_flight_orders(self) -> Dict[str, LoopringInFlightOrder]:             # <<<<<<<<<<<<<<
 *         return self._in_flight_orders
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_9generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":264
 *         return self._in_flight_orders
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):             # <<<<<<<<<<<<<<
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_8_get_next_order_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_8_get_next_order_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_token = 0;
  PyObject *__pyx_v_force_sync = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_next_order_id (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_token,&__pyx_n_s_force_sync,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_token)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_force_sync);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_next_order_id") < 0)) __PYX_ERR(0, 264, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_token = values[0];
    __pyx_v_force_sync = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_next_order_id", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._get_next_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_7_get_next_order_id(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_token, __pyx_v_force_sync);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_7_get_next_order_id(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_token, PyObject *__pyx_v_force_sync) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_next_order_id", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 264, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_token = __pyx_v_token;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_token);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_token);
  __pyx_cur_scope->__pyx_v_force_sync = __pyx_v_force_sync;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_force_sync);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_force_sync);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_9generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_next_order_id, __pyx_n_s_LoopringExchange__get_next_order, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._get_next_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_9generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  char const *__pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_next_order_id", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    case 2: goto __pyx_L24_resume_from_await;
    case 3: goto __pyx_L39_resume_from_await;
    case 4: goto __pyx_L40_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 264, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":265
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):
 *         async with self._order_id_lock:             # <<<<<<<<<<<<<<
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 */
  /*with:*/ {
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_self->_order_id_lock, __pyx_n_s_aexit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_self->_order_id_lock, __pyx_n_s_aenter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L5_resume_from_await:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 265, __pyx_L4_error)
      __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_2 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 265, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":266
 *     async def _get_next_order_id(self, token, force_sync = False):
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id             # <<<<<<<<<<<<<<
 *             if force_sync or self._next_order_id.get(token) is None:
 *                 try:
 */
          __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->_next_order_id;
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_v_next_id = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":267
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:             # <<<<<<<<<<<<<<
 *                 try:
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 */
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_force_sync); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 267, __pyx_L9_error)
          if (!__pyx_t_9) {
          } else {
            __pyx_t_8 = __pyx_t_9;
            goto __pyx_L16_bool_binop_done;
          }
          if (unlikely(__pyx_cur_scope->__pyx_v_self->_next_order_id == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 267, __pyx_L9_error)
          }
          __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_next_order_id, __pyx_cur_scope->__pyx_v_token, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = (__pyx_t_2 == Py_None);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = (__pyx_t_9 != 0);
          __pyx_t_8 = __pyx_t_10;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_8) {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":268
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 *                 try:             # <<<<<<<<<<<<<<
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 *                     next_id = response["orderId"]
 */
            {
              __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
              __Pyx_XGOTREF(__pyx_t_11);
              __Pyx_XGOTREF(__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_13);
              /*try:*/ {

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":269
 *             if force_sync or self._next_order_id.get(token) is None:
 *                 try:
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})             # <<<<<<<<<<<<<<
 *                     next_id = response["orderId"]
 *                     self._next_order_id[token] = next_id
 */
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NEXT_ORDER_ID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_n_u_GET);
                __Pyx_GIVEREF(__pyx_n_u_GET);
                PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_GET);
                __Pyx_GIVEREF(__pyx_t_3);
                PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
                __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_14 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->_loopring_accountid); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (PyDict_SetItem(__pyx_t_14, __pyx_n_u_accountId, __pyx_t_15) < 0) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (PyDict_SetItem(__pyx_t_14, __pyx_n_u_sellTokenId, __pyx_cur_scope->__pyx_v_token) < 0) __PYX_ERR(0, 269, __pyx_L18_error)
                if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_params, __pyx_t_14) < 0) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 269, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_14);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XGOTREF(__pyx_r);
                if (likely(__pyx_r)) {
                  __Pyx_XGIVEREF(__pyx_t_1);
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                  __Pyx_XGIVEREF(__pyx_t_5);
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
                  __Pyx_XGIVEREF(__pyx_t_6);
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
                  __Pyx_XGIVEREF(__pyx_t_7);
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_7;
                  __Pyx_XGIVEREF(__pyx_t_11);
                  __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
                  __Pyx_XGIVEREF(__pyx_t_12);
                  __pyx_cur_scope->__pyx_t_5 = __pyx_t_12;
                  __Pyx_XGIVEREF(__pyx_t_13);
                  __pyx_cur_scope->__pyx_t_6 = __pyx_t_13;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                  /* return from generator, awaiting value */
                  __pyx_generator->resume_label = 2;
                  return __pyx_r;
                  __pyx_L24_resume_from_await:;
                  __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_cur_scope->__pyx_t_0 = 0;
                  __Pyx_XGOTREF(__pyx_t_1);
                  __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_cur_scope->__pyx_t_1 = 0;
                  __Pyx_XGOTREF(__pyx_t_5);
                  __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_cur_scope->__pyx_t_2 = 0;
                  __Pyx_XGOTREF(__pyx_t_6);
                  __pyx_t_7 = __pyx_cur_scope->__pyx_t_3;
                  __pyx_cur_scope->__pyx_t_3 = 0;
                  __Pyx_XGOTREF(__pyx_t_7);
                  __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
                  __pyx_cur_scope->__pyx_t_4 = 0;
                  __Pyx_XGOTREF(__pyx_t_11);
                  __pyx_t_12 = __pyx_cur_scope->__pyx_t_5;
                  __pyx_cur_scope->__pyx_t_5 = 0;
                  __Pyx_XGOTREF(__pyx_t_12);
                  __pyx_t_13 = __pyx_cur_scope->__pyx_t_6;
                  __pyx_cur_scope->__pyx_t_6 = 0;
                  __Pyx_XGOTREF(__pyx_t_13);
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 269, __pyx_L18_error)
                  __pyx_t_14 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_14);
                } else {
                  __pyx_t_14 = NULL;
                  if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_14) < 0) __PYX_ERR(0, 269, __pyx_L18_error)
                  __Pyx_GOTREF(__pyx_t_14);
                }
                __Pyx_GIVEREF(__pyx_t_14);
                __pyx_cur_scope->__pyx_v_response = __pyx_t_14;
                __pyx_t_14 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":270
 *                 try:
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 *                     next_id = response["orderId"]             # <<<<<<<<<<<<<<
 *                     self._next_order_id[token] = next_id
 *                 except Exception as e:
 */
                __pyx_t_14 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_response, __pyx_n_u_orderId); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 270, __pyx_L18_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_next_id);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_next_id, __pyx_t_14);
                __Pyx_GIVEREF(__pyx_t_14);
                __pyx_t_14 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":271
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 *                     next_id = response["orderId"]
 *                     self._next_order_id[token] = next_id             # <<<<<<<<<<<<<<
 *                 except Exception as e:
 *                     self.logger().info(str(e))
 */
                if (unlikely(__pyx_cur_scope->__pyx_v_self->_next_order_id == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                  __PYX_ERR(0, 271, __pyx_L18_error)
                }
                if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_next_order_id, __pyx_cur_scope->__pyx_v_token, __pyx_cur_scope->__pyx_v_next_id) < 0)) __PYX_ERR(0, 271, __pyx_L18_error)

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":268
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 *                 try:             # <<<<<<<<<<<<<<
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 *                     next_id = response["orderId"]
 */
              }
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              goto __pyx_L23_try_end;
              __pyx_L18_error:;
              __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":272
 *                     next_id = response["orderId"]
 *                     self._next_order_id[token] = next_id
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().info(str(e))
 *                     self.logger().info("Error getting the next order id from Loopring")
 */
              __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
              if (__pyx_t_16) {
                __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._get_next_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 272, __pyx_L20_except_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_GIVEREF(__pyx_t_3);
                __pyx_cur_scope->__pyx_v_e = __pyx_t_3;
                /*try:*/ {

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":273
 *                     self._next_order_id[token] = next_id
 *                 except Exception as e:
 *                     self.logger().info(str(e))             # <<<<<<<<<<<<<<
 *                     self.logger().info("Error getting the next order id from Loopring")
 *             else:
 */
                  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 273, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __pyx_t_18 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                    if (likely(__pyx_t_18)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                      __Pyx_INCREF(__pyx_t_18);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_17, function);
                    }
                  }
                  __pyx_t_15 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
                  __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                  if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 273, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 273, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_e); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 273, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_18 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                    if (likely(__pyx_t_18)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                      __Pyx_INCREF(__pyx_t_18);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_17, function);
                    }
                  }
                  __pyx_t_2 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_18, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_15);
                  __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":274
 *                 except Exception as e:
 *                     self.logger().info(str(e))
 *                     self.logger().info("Error getting the next order id from Loopring")             # <<<<<<<<<<<<<<
 *             else:
 *                 next_id = self._next_order_id[token]
 */
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 274, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_18 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
                    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_15);
                    if (likely(__pyx_t_18)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                      __Pyx_INCREF(__pyx_t_18);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_15, function);
                    }
                  }
                  __pyx_t_17 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
                  __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 274, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 274, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __pyx_t_17 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
                    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_15);
                    if (likely(__pyx_t_17)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                      __Pyx_INCREF(__pyx_t_17);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_15, function);
                    }
                  }
                  __pyx_t_2 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_17, __pyx_kp_u_Error_getting_the_next_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_kp_u_Error_getting_the_next_order_id);
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L30_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":272
 *                     next_id = response["orderId"]
 *                     self._next_order_id[token] = next_id
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().info(str(e))
 *                     self.logger().info("Error getting the next order id from Loopring")
 */
                /*finally:*/ {
                  /*normal exit:*/{
                    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
                    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
                    __pyx_cur_scope->__pyx_v_e = NULL;
                    goto __pyx_L31;
                  }
                  __pyx_L30_error:;
                  /*exception exit:*/{
                    __Pyx_PyThreadState_assign
                    __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;
                    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);
                    if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23) < 0)) __Pyx_ErrFetch(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
                    __Pyx_XGOTREF(__pyx_t_21);
                    __Pyx_XGOTREF(__pyx_t_22);
                    __Pyx_XGOTREF(__pyx_t_23);
                    __Pyx_XGOTREF(__pyx_t_24);
                    __Pyx_XGOTREF(__pyx_t_25);
                    __Pyx_XGOTREF(__pyx_t_26);
                    __pyx_t_16 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
                    {
                      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
                      __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
                      __pyx_cur_scope->__pyx_v_e = NULL;
                    }
                    if (PY_MAJOR_VERSION >= 3) {
                      __Pyx_XGIVEREF(__pyx_t_24);
                      __Pyx_XGIVEREF(__pyx_t_25);
                      __Pyx_XGIVEREF(__pyx_t_26);
                      __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);
                    }
                    __Pyx_XGIVEREF(__pyx_t_21);
                    __Pyx_XGIVEREF(__pyx_t_22);
                    __Pyx_XGIVEREF(__pyx_t_23);
                    __Pyx_ErrRestore(__pyx_t_21, __pyx_t_22, __pyx_t_23);
                    __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;
                    __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;
                    goto __pyx_L20_except_error;
                  }
                  __pyx_L31:;
                }
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                goto __pyx_L19_exception_handled;
              }
              goto __pyx_L20_except_error;
              __pyx_L20_except_error:;

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":268
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 *                 try:             # <<<<<<<<<<<<<<
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 *                     next_id = response["orderId"]
 */
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
              goto __pyx_L9_error;
              __pyx_L19_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_13);
              __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
              __pyx_L23_try_end:;
            }

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":267
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:             # <<<<<<<<<<<<<<
 *                 try:
 *                     response = await self.api_request("GET", NEXT_ORDER_ID, params={"accountId": self._loopring_accountid, "sellTokenId": token})
 */
            goto __pyx_L15;
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":276
 *                     self.logger().info("Error getting the next order id from Loopring")
 *             else:
 *                 next_id = self._next_order_id[token]             # <<<<<<<<<<<<<<
 *                 self._next_order_id[token] = (next_id + 2) % 4294967294
 * 
 */
          /*else*/ {
            if (unlikely(__pyx_cur_scope->__pyx_v_self->_next_order_id == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 276, __pyx_L9_error)
            }
            __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_next_order_id, __pyx_cur_scope->__pyx_v_token); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_next_id);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_next_id, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_4);
            __pyx_t_4 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":277
 *             else:
 *                 next_id = self._next_order_id[token]
 *                 self._next_order_id[token] = (next_id + 2) % 4294967294             # <<<<<<<<<<<<<<
 * 
 *         return next_id
 */
            __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_next_id, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_3 = PyNumber_Remainder(__pyx_t_4, __pyx_int_4294967294); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(__pyx_cur_scope->__pyx_v_self->_next_order_id == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 277, __pyx_L9_error)
            }
            if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_next_order_id, __pyx_cur_scope->__pyx_v_token, __pyx_t_3) < 0)) __PYX_ERR(0, 277, __pyx_L9_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_L15:;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":265
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):
 *         async with self._order_id_lock:             # <<<<<<<<<<<<<<
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L14_try_end;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._get_next_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_14) < 0) __PYX_ERR(0, 265, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 265, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_13);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __Pyx_XGIVEREF(__pyx_t_3);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
            __Pyx_XGIVEREF(__pyx_t_4);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_6);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_13);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_13;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_SwapException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 3;
            return __pyx_r;
            __pyx_L39_resume_from_await:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_6);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_13 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 265, __pyx_L11_except_error)
            __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
          } else {
            __pyx_t_2 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 265, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          __pyx_t_13 = __pyx_t_2;
          __pyx_t_2 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_8 < 0) __PYX_ERR(0, 265, __pyx_L11_except_error)
          __pyx_t_10 = ((!(__pyx_t_8 != 0)) != 0);
          if (__pyx_t_10) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_4, __pyx_t_14);
            __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_14 = 0; 
            __PYX_ERR(0, 265, __pyx_L11_except_error)
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L10_exception_handled;
        }
        __pyx_L11_except_error:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L10_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 265, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 4;
            return __pyx_r;
            __pyx_L40_resume_from_await:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 265, __pyx_L1_error)
            __pyx_t_14 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_14);
          } else {
            __pyx_t_14 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_14) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
          }
          __pyx_t_7 = __pyx_t_14;
          __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    goto __pyx_L41;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L41:;
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":279
 *                 self._next_order_id[token] = (next_id + 2) % 4294967294
 * 
 *         return next_id             # <<<<<<<<<<<<<<
 * 
 *     async def _serialize_order(self, order):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_next_id)) { __Pyx_RaiseUnboundLocalError("next_id"); __PYX_ERR(0, 279, __pyx_L1_error) }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_next_id);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":264
 *         return self._in_flight_orders
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):             # <<<<<<<<<<<<<<
 *         async with self._order_id_lock:
 *             next_id = self._next_order_id
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("_get_next_order_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":281
 *         return next_id
 * 
 *     async def _serialize_order(self, order):             # <<<<<<<<<<<<<<
 *         return [
 *             int(order["exchange"], 16),
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11_serialize_order(PyObject *__pyx_v_self, PyObject *__pyx_v_order); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11_serialize_order(PyObject *__pyx_v_self, PyObject *__pyx_v_order) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_serialize_order (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10_serialize_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_order));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10_serialize_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_serialize_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 281, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order = __pyx_v_order;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_serialize_order, __pyx_n_s_LoopringExchange__serialize_orde, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._serialize_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_serialize_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":282
 * 
 *     async def _serialize_order(self, order):
 *         return [             # <<<<<<<<<<<<<<
 *             int(order["exchange"], 16),
 *             int(order["storageId"]),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":283
 *     async def _serialize_order(self, order):
 *         return [
 *             int(order["exchange"], 16),             # <<<<<<<<<<<<<<
 *             int(order["storageId"]),
 *             int(order["accountId"]),
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_exchange); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_16);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":284
 *         return [
 *             int(order["exchange"], 16),
 *             int(order["storageId"]),             # <<<<<<<<<<<<<<
 *             int(order["accountId"]),
 *             int(order["sellToken"]['tokenId']),
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_storageId); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":285
 *             int(order["exchange"], 16),
 *             int(order["storageId"]),
 *             int(order["accountId"]),             # <<<<<<<<<<<<<<
 *             int(order["sellToken"]['tokenId']),
 *             int(order["buyToken"]['tokenId']),
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_accountId); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":286
 *             int(order["storageId"]),
 *             int(order["accountId"]),
 *             int(order["sellToken"]['tokenId']),             # <<<<<<<<<<<<<<
 *             int(order["buyToken"]['tokenId']),
 *             int(order["sellToken"]['volume']),
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_sellToken); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_tokenId); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":287
 *             int(order["accountId"]),
 *             int(order["sellToken"]['tokenId']),
 *             int(order["buyToken"]['tokenId']),             # <<<<<<<<<<<<<<
 *             int(order["sellToken"]['volume']),
 *             int(order["buyToken"]['volume']),
 */
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_buyToken); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_tokenId); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":288
 *             int(order["sellToken"]['tokenId']),
 *             int(order["buyToken"]['tokenId']),
 *             int(order["sellToken"]['volume']),             # <<<<<<<<<<<<<<
 *             int(order["buyToken"]['volume']),
 *             int(order["validUntil"]),
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_sellToken); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_u_volume); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":289
 *             int(order["buyToken"]['tokenId']),
 *             int(order["sellToken"]['volume']),
 *             int(order["buyToken"]['volume']),             # <<<<<<<<<<<<<<
 *             int(order["validUntil"]),
 *             int(order["maxFeeBips"]),
 */
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_buyToken); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_7, __pyx_n_u_volume); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":290
 *             int(order["sellToken"]['volume']),
 *             int(order["buyToken"]['volume']),
 *             int(order["validUntil"]),             # <<<<<<<<<<<<<<
 *             int(order["maxFeeBips"]),
 *             int(order["fillAmountBOrS"]),
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_validUntil); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":291
 *             int(order["buyToken"]['volume']),
 *             int(order["validUntil"]),
 *             int(order["maxFeeBips"]),             # <<<<<<<<<<<<<<
 *             int(order["fillAmountBOrS"]),
 *             int(order.get("taker", "0x0"), 16)
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_maxFeeBips); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":292
 *             int(order["validUntil"]),
 *             int(order["maxFeeBips"]),
 *             int(order["fillAmountBOrS"]),             # <<<<<<<<<<<<<<
 *             int(order.get("taker", "0x0"), 16)
 *         ]
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_fillAmountBOrS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":293
 *             int(order["maxFeeBips"]),
 *             int(order["fillAmountBOrS"]),
 *             int(order.get("taker", "0x0"), 16)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_12);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_int_16);
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":282
 * 
 *     async def _serialize_order(self, order):
 *         return [             # <<<<<<<<<<<<<<
 *             int(order["exchange"], 16),
 *             int(order["storageId"]),
 */
  __pyx_t_8 = PyList_New(11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_8, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_8, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_8, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_8, 10, __pyx_t_12);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":281
 *         return next_id
 * 
 *     async def _serialize_order(self, order):             # <<<<<<<<<<<<<<
 *         return [
 *             int(order["exchange"], 16),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("_serialize_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":296
 *         ]
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_14supported_order_types(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_14supported_order_types(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("supported_order_types (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_13supported_order_types(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_13supported_order_types(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("supported_order_types", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":297
 * 
 *     def supported_order_types(self):
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]             # <<<<<<<<<<<<<<
 * 
 *     async def place_order(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":296
 *         ]
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.supported_order_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_17generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":299
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           client_order_id: str,
 *                           trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16place_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16place_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("place_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_client_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_is_buy,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 1); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 2); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 3); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 4); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 5); __PYX_ERR(0, 299, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "place_order") < 0)) __PYX_ERR(0, 299, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_client_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_is_buy = values[3];
    __pyx_v_order_type = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 300, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15place_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_is_buy, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15place_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("place_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 299, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_client_order_id = __pyx_v_client_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_is_buy = __pyx_v_is_buy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_buy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_buy);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_17generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_place_order, __pyx_n_s_LoopringExchange_place_order, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_17generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("place_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    case 2: goto __pyx_L6_resume_from_await;
    case 3: goto __pyx_L7_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 299, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":306
 *                           order_type: OrderType,
 *                           price: Decimal) -> Dict[str, Any]:
 *         order_side = TradeType.BUY if is_buy else TradeType.SELL             # <<<<<<<<<<<<<<
 *         base, quote = trading_pair.split('-')
 *         baseid, quoteid = self._token_configuration.get_tokenid(base), self._token_configuration.get_tokenid(quote)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_buy); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 306, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_SELL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_order_side = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":307
 *                           price: Decimal) -> Dict[str, Any]:
 *         order_side = TradeType.BUY if is_buy else TradeType.SELL
 *         base, quote = trading_pair.split('-')             # <<<<<<<<<<<<<<
 *         baseid, quoteid = self._token_configuration.get_tokenid(base), self._token_configuration.get_tokenid(quote)
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_trading_pair == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "split");
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_Split(__pyx_cur_scope->__pyx_v_trading_pair, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (1) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 307, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_base = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_quote = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":308
 *         order_side = TradeType.BUY if is_buy else TradeType.SELL
 *         base, quote = trading_pair.split('-')
 *         baseid, quoteid = self._token_configuration.get_tokenid(base), self._token_configuration.get_tokenid(quote)             # <<<<<<<<<<<<<<
 * 
 *         validSince = int(time.time()) - 3600
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_base) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_cur_scope->__pyx_v_base);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_cur_scope->__pyx_v_quote) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_quote);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_baseid = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_quoteid = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":310
 *         baseid, quoteid = self._token_configuration.get_tokenid(base), self._token_configuration.get_tokenid(quote)
 * 
 *         validSince = int(time.time()) - 3600             # <<<<<<<<<<<<<<
 *         order_details = self._token_configuration.sell_buy_amounts(baseid, quoteid, amount, price, order_side)
 *         token_s_id = order_details["sellToken"]["tokenId"]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_3600, 0xE10, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_validSince = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":311
 * 
 *         validSince = int(time.time()) - 3600
 *         order_details = self._token_configuration.sell_buy_amounts(baseid, quoteid, amount, price, order_side)             # <<<<<<<<<<<<<<
 *         token_s_id = order_details["sellToken"]["tokenId"]
 *         order_id = await self._get_next_order_id(int(token_s_id))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_sell_buy_amounts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_baseid, __pyx_cur_scope->__pyx_v_quoteid, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_price, __pyx_cur_scope->__pyx_v_order_side};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_1, __pyx_cur_scope->__pyx_v_baseid, __pyx_cur_scope->__pyx_v_quoteid, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_price, __pyx_cur_scope->__pyx_v_order_side};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_baseid);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_baseid);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_baseid);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_quoteid);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_quoteid);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_cur_scope->__pyx_v_quoteid);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_cur_scope->__pyx_v_amount);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_6, __pyx_cur_scope->__pyx_v_price);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_side);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_side);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_6, __pyx_cur_scope->__pyx_v_order_side);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_order_details = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":312
 *         validSince = int(time.time()) - 3600
 *         order_details = self._token_configuration.sell_buy_amounts(baseid, quoteid, amount, price, order_side)
 *         token_s_id = order_details["sellToken"]["tokenId"]             # <<<<<<<<<<<<<<
 *         order_id = await self._get_next_order_id(int(token_s_id))
 *         order = {
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_details, __pyx_n_u_sellToken); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_tokenId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_token_s_id = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":313
 *         order_details = self._token_configuration.sell_buy_amounts(baseid, quoteid, amount, price, order_side)
 *         token_s_id = order_details["sellToken"]["tokenId"]
 *         order_id = await self._get_next_order_id(int(token_s_id))             # <<<<<<<<<<<<<<
 *         order = {
 *             "exchange": str(self._loopring_exchangeid),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_next_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_cur_scope->__pyx_v_token_s_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 313, __pyx_L1_error)
    __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_3 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":315
 *         order_id = await self._get_next_order_id(int(token_s_id))
 *         order = {
 *             "exchange": str(self._loopring_exchangeid),             # <<<<<<<<<<<<<<
 *             "storageId": order_id,
 *             "accountId": self._loopring_accountid,
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_self->_loopring_exchangeid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_exchange, __pyx_t_5) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":316
 *         order = {
 *             "exchange": str(self._loopring_exchangeid),
 *             "storageId": order_id,             # <<<<<<<<<<<<<<
 *             "accountId": self._loopring_accountid,
 *             "allOrNone": "false",
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_storageId, __pyx_cur_scope->__pyx_v_order_id) < 0) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":317
 *             "exchange": str(self._loopring_exchangeid),
 *             "storageId": order_id,
 *             "accountId": self._loopring_accountid,             # <<<<<<<<<<<<<<
 *             "allOrNone": "false",
 *             "validSince": validSince,
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->_loopring_accountid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_accountId, __pyx_t_5) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_allOrNone, __pyx_n_u_false) < 0) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":319
 *             "accountId": self._loopring_accountid,
 *             "allOrNone": "false",
 *             "validSince": validSince,             # <<<<<<<<<<<<<<
 *             "validUntil": validSince + (604800 * 5),  # Until week later
 *             "maxFeeBips": 50,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_validSince, __pyx_cur_scope->__pyx_v_validSince) < 0) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":320
 *             "allOrNone": "false",
 *             "validSince": validSince,
 *             "validUntil": validSince + (604800 * 5),  # Until week later             # <<<<<<<<<<<<<<
 *             "maxFeeBips": 50,
 *             "clientOrderId": client_order_id,
 */
  __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_validSince, __pyx_int_3024000, 0x2E2480, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_validUntil, __pyx_t_5) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_maxFeeBips, __pyx_int_50) < 0) __PYX_ERR(0, 315, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":322
 *             "validUntil": validSince + (604800 * 5),  # Until week later
 *             "maxFeeBips": 50,
 *             "clientOrderId": client_order_id,             # <<<<<<<<<<<<<<
 *             **order_details
 *         }
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_clientOrderId, __pyx_cur_scope->__pyx_v_client_order_id) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":323
 *             "maxFeeBips": 50,
 *             "clientOrderId": client_order_id,
 *             **order_details             # <<<<<<<<<<<<<<
 *         }
 *         if order_type is OrderType.LIMIT_MAKER:
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_order_details == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  if (unlikely(PyDict_Update(__pyx_t_3, __pyx_cur_scope->__pyx_v_order_details) < 0)) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseMappingExpectedError(__pyx_cur_scope->__pyx_v_order_details);
    __PYX_ERR(0, 323, __pyx_L1_error)
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_order = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":325
 *             **order_details
 *         }
 *         if order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             order["orderType"] = "MAKER_ONLY"
 *         serialized_message = await self._serialize_order(order)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":326
 *         }
 *         if order_type is OrderType.LIMIT_MAKER:
 *             order["orderType"] = "MAKER_ONLY"             # <<<<<<<<<<<<<<
 *         serialized_message = await self._serialize_order(order)
 *         msgHash = poseidon(serialized_message, self._order_sign_param)
 */
    if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_orderType, __pyx_n_u_MAKER_ONLY) < 0)) __PYX_ERR(0, 326, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":325
 *             **order_details
 *         }
 *         if order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             order["orderType"] = "MAKER_ONLY"
 *         serialized_message = await self._serialize_order(order)
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":327
 *         if order_type is OrderType.LIMIT_MAKER:
 *             order["orderType"] = "MAKER_ONLY"
 *         serialized_message = await self._serialize_order(order)             # <<<<<<<<<<<<<<
 *         msgHash = poseidon(serialized_message, self._order_sign_param)
 *         fq_obj = FQ(int(self._loopring_private_key, 16))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_serialize_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_cur_scope->__pyx_v_order) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_order);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L6_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 327, __pyx_L1_error)
    __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_4 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_serialized_message = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":328
 *             order["orderType"] = "MAKER_ONLY"
 *         serialized_message = await self._serialize_order(order)
 *         msgHash = poseidon(serialized_message, self._order_sign_param)             # <<<<<<<<<<<<<<
 *         fq_obj = FQ(int(self._loopring_private_key, 16))
 *         signed_message = PoseidonEdDSA.sign(msgHash, fq_obj)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_poseidon); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_serialized_message, __pyx_cur_scope->__pyx_v_self->_order_sign_param};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_serialized_message, __pyx_cur_scope->__pyx_v_self->_order_sign_param};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_serialized_message);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_serialized_message);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_serialized_message);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->_order_sign_param);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self->_order_sign_param);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_cur_scope->__pyx_v_self->_order_sign_param);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_msgHash = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":329
 *         serialized_message = await self._serialize_order(order)
 *         msgHash = poseidon(serialized_message, self._order_sign_param)
 *         fq_obj = FQ(int(self._loopring_private_key, 16))             # <<<<<<<<<<<<<<
 *         signed_message = PoseidonEdDSA.sign(msgHash, fq_obj)
 *         # Update with signature
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FQ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->_loopring_private_key);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self->_loopring_private_key);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_self->_loopring_private_key);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_16);
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_fq_obj = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":330
 *         msgHash = poseidon(serialized_message, self._order_sign_param)
 *         fq_obj = FQ(int(self._loopring_private_key, 16))
 *         signed_message = PoseidonEdDSA.sign(msgHash, fq_obj)             # <<<<<<<<<<<<<<
 *         # Update with signature
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PoseidonEdDSA); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sign); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_msgHash, __pyx_cur_scope->__pyx_v_fq_obj};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_msgHash, __pyx_cur_scope->__pyx_v_fq_obj};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_msgHash);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_msgHash);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_msgHash);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_fq_obj);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_fq_obj);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_6, __pyx_cur_scope->__pyx_v_fq_obj);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_signed_message = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":333
 *         # Update with signature
 * 
 *         eddsa = "0x" + "".join([hex(int(signed_message.sig.R.x))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                 hex(int(signed_message.sig.R.y))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed_message, __pyx_n_s_sig); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_R); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_5, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zfill); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_64);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":334
 * 
 *         eddsa = "0x" + "".join([hex(int(signed_message.sig.R.x))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.R.y))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed_message, __pyx_n_s_sig); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_R); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zfill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_64);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":335
 *         eddsa = "0x" + "".join([hex(int(signed_message.sig.R.x))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.R.y))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])             # <<<<<<<<<<<<<<
 * 
 *         order.update({
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed_message, __pyx_n_s_sig); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_s); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_8, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zfill); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_int_64);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":333
 *         # Update with signature
 * 
 *         eddsa = "0x" + "".join([hex(int(signed_message.sig.R.x))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                 hex(int(signed_message.sig.R.y))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])
 */
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__8, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_0x, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_cur_scope->__pyx_v_eddsa = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":338
 * 
 *         order.update({
 *             "hash": str(msgHash),             # <<<<<<<<<<<<<<
 *             "eddsaSignature": eddsa
 *         })
 */
  __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_msgHash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_hash, __pyx_t_1) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":339
 *         order.update({
 *             "hash": str(msgHash),
 *             "eddsaSignature": eddsa             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_u_eddsaSignature, __pyx_cur_scope->__pyx_v_eddsa) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":337
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])
 * 
 *         order.update({             # <<<<<<<<<<<<<<
 *             "hash": str(msgHash),
 *             "eddsaSignature": eddsa
 */
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_cur_scope->__pyx_v_order, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":342
 *         })
 * 
 *         return await self.api_request("POST", ORDER_ROUTE, data=order)             # <<<<<<<<<<<<<<
 * 
 *     async def execute_order(self, order_side, client_order_id, trading_pair, amount, order_type, price):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ORDER_ROUTE); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_u_POST);
  __Pyx_GIVEREF(__pyx_n_u_POST);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_u_POST);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_data, __pyx_cur_scope->__pyx_v_order) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 3;
    return __pyx_r;
    __pyx_L7_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 342, __pyx_L1_error)
    __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
  } else {
    __pyx_t_4 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":299
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           client_order_id: str,
 *                           trading_pair: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":344
 *         return await self.api_request("POST", ORDER_ROUTE, data=order)
 * 
 *     async def execute_order(self, order_side, client_order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *         """
 *         Completes the common tasks from execute_buy and execute_sell.  Quantizes the order's amount and price, and
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19execute_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_18execute_order[] = "\n        Completes the common tasks from execute_buy and execute_sell.  Quantizes the order's amount and price, and\n        validates the order against the trading rules before placing this order.\n        ";
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19execute_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_side,&__pyx_n_s_client_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_side)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, 1); __PYX_ERR(0, 344, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, 2); __PYX_ERR(0, 344, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, 3); __PYX_ERR(0, 344, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, 4); __PYX_ERR(0, 344, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, 5); __PYX_ERR(0, 344, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "execute_order") < 0)) __PYX_ERR(0, 344, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_order_side = values[0];
    __pyx_v_client_order_id = values[1];
    __pyx_v_trading_pair = values[2];
    __pyx_v_amount = values[3];
    __pyx_v_order_type = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_order", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 344, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_18execute_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_order_side, __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_18execute_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_side, PyObject *__pyx_v_client_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 344, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_side = __pyx_v_order_side;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_side);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_side);
  __pyx_cur_scope->__pyx_v_client_order_id = __pyx_v_client_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_order, __pyx_n_s_LoopringExchange_execute_order, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *(*__pyx_t_21)(PyObject *);
  int64_t __pyx_t_22;
  int __pyx_t_23;
  char const *__pyx_t_24;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L24_resume_from_await;
    case 2: goto __pyx_L38_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 344, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":351
 *         # Quantize order
 * 
 *         amount = self.c_quantize_order_amount(trading_pair, amount)             # <<<<<<<<<<<<<<
 *         price = self.c_quantize_order_price(trading_pair, price)
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_trading_pair))||((__pyx_cur_scope->__pyx_v_trading_pair) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_cur_scope->__pyx_v_trading_pair)->tp_name), 0))) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_cur_scope->__pyx_v_trading_pair), __pyx_cur_scope->__pyx_v_amount, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_amount, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":352
 * 
 *         amount = self.c_quantize_order_amount(trading_pair, amount)
 *         price = self.c_quantize_order_price(trading_pair, price)             # <<<<<<<<<<<<<<
 * 
 *         # Check trading rules
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_trading_pair))||((__pyx_cur_scope->__pyx_v_trading_pair) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_cur_scope->__pyx_v_trading_pair)->tp_name), 0))) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_cur_scope->__pyx_v_trading_pair), __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_price, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":355
 * 
 *         # Check trading rules
 *         trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:
 *             raise ValueError("LIMIT orders are not supported")
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_trading_rule = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":356
 *         # Check trading rules
 *         trading_rule = self._trading_rules[trading_pair]
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:             # <<<<<<<<<<<<<<
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_order_type, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_supports_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__pyx_t_1 == Py_False);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":357
 *         trading_rule = self._trading_rules[trading_pair]
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:
 *             raise ValueError("LIMIT orders are not supported")             # <<<<<<<<<<<<<<
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 *             raise ValueError("MARKET orders are not supported")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 357, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":356
 *         # Check trading rules
 *         trading_rule = self._trading_rules[trading_pair]
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:             # <<<<<<<<<<<<<<
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":358
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:             # <<<<<<<<<<<<<<
 *             raise ValueError("MARKET orders are not supported")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_order_type, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_supports_market_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__pyx_t_1 == Py_False);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":359
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 *             raise ValueError("MARKET orders are not supported")             # <<<<<<<<<<<<<<
 * 
 *         if amount < trading_rule.min_order_size:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 359, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":358
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:             # <<<<<<<<<<<<<<
 *             raise ValueError("MARKET orders are not supported")
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":361
 *             raise ValueError("MARKET orders are not supported")
 * 
 *         if amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")
 *         if amount > trading_rule.max_order_size:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_min_order_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_amount, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":362
 * 
 *         if amount < trading_rule.min_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")             # <<<<<<<<<<<<<<
 *         if amount > trading_rule.max_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Order_amount);
    __pyx_t_6 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Order_amount);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Order_amount);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_less_than_the_minimum_allowa);
    __pyx_t_6 += 44;
    __Pyx_GIVEREF(__pyx_kp_u_is_less_than_the_minimum_allowa);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_is_less_than_the_minimum_allowa);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_min_order_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__12);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 362, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":361
 *             raise ValueError("MARKET orders are not supported")
 * 
 *         if amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")
 *         if amount > trading_rule.max_order_size:
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":363
 *         if amount < trading_rule.min_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")
 *         if amount > trading_rule.max_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 *         if amount * price < trading_rule.min_notional_size:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_max_order_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_amount, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":364
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")
 *         if amount > trading_rule.max_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")             # <<<<<<<<<<<<<<
 *         if amount * price < trading_rule.min_notional_size:
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 */
    __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Order_amount);
    __pyx_t_6 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_Order_amount);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Order_amount);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_greater_than_the_maximum_all);
    __pyx_t_6 += 47;
    __Pyx_GIVEREF(__pyx_kp_u_is_greater_than_the_maximum_all);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_is_greater_than_the_maximum_all);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_max_order_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u__12);
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_8, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 364, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":363
 *         if amount < trading_rule.min_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is less than the minimum allowable amount({str(trading_rule.min_order_size)})")
 *         if amount > trading_rule.max_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 *         if amount * price < trading_rule.min_notional_size:
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":365
 *         if amount > trading_rule.max_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 *         if amount * price < trading_rule.min_notional_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 * 
 */
  __pyx_t_8 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_min_notional_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":366
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 *         if amount * price < trading_rule.min_notional_size:
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Order_notional_value);
    __pyx_t_6 += 21;
    __Pyx_GIVEREF(__pyx_kp_u_Order_notional_value);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Order_notional_value);
    __pyx_t_1 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_less_than_the_minimum_allowa_2);
    __pyx_t_6 += 66;
    __Pyx_GIVEREF(__pyx_kp_u_is_less_than_the_minimum_allowa_2);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_is_less_than_the_minimum_allowa_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_min_notional_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__12);
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 366, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":365
 *         if amount > trading_rule.max_order_size:
 *             raise ValueError(f"Order amount({str(amount)}) is greater than the maximum allowable amount({str(trading_rule.max_order_size)})")
 *         if amount * price < trading_rule.min_notional_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":368
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             created_at: int = int(time.time())
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    /*try:*/ {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":369
 * 
 *         try:
 *             created_at: int = int(time.time())             # <<<<<<<<<<<<<<
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)
 *             self.start_tracking(in_flight_order)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 369, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 369, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_cur_scope->__pyx_v_created_at = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":370
 *         try:
 *             created_at: int = int(time.time())
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)             # <<<<<<<<<<<<<<
 *             self.start_tracking(in_flight_order)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder), __pyx_n_s_from_loopring_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_12 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[9] = {__pyx_t_1, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_side, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_created_at, Py_None, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_price, __pyx_cur_scope->__pyx_v_amount};
        __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 8+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L12_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[9] = {__pyx_t_1, ((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_side, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_created_at, Py_None, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_price, __pyx_cur_scope->__pyx_v_amount};
        __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 8+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L12_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_8);
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(8+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 370, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
        __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_side);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_side);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_cur_scope->__pyx_v_order_side);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
        PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_12, __pyx_cur_scope->__pyx_v_client_order_id);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_created_at);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_created_at);
        PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_12, __pyx_cur_scope->__pyx_v_created_at);
        __Pyx_INCREF(Py_None);
        __Pyx_GIVEREF(Py_None);
        PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_12, Py_None);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
        PyTuple_SET_ITEM(__pyx_t_13, 5+__pyx_t_12, __pyx_cur_scope->__pyx_v_trading_pair);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
        PyTuple_SET_ITEM(__pyx_t_13, 6+__pyx_t_12, __pyx_cur_scope->__pyx_v_price);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
        PyTuple_SET_ITEM(__pyx_t_13, 7+__pyx_t_12, __pyx_cur_scope->__pyx_v_amount);
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 370, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_cur_scope->__pyx_v_in_flight_order = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":371
 *             created_at: int = int(time.time())
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)
 *             self.start_tracking(in_flight_order)             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_start_tracking); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_13, __pyx_cur_scope->__pyx_v_in_flight_order) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_in_flight_order);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 371, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":373
 *             self.start_tracking(in_flight_order)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 creation_response = await self.place_order(client_order_id, trading_pair, amount, order_side is TradeType.BUY, order_type, price)
 *             except asyncio.TimeoutError:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        /*try:*/ {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":374
 * 
 *             try:
 *                 creation_response = await self.place_order(client_order_id, trading_pair, amount, order_side is TradeType.BUY, order_type, price)             # <<<<<<<<<<<<<<
 *             except asyncio.TimeoutError:
 *                 # We timed out while placing this order. We may have successfully submitted the order, or we may have had connection
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_place_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 374, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_BUY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_2 = (__pyx_cur_scope->__pyx_v_order_side == __pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_13 = NULL;
          __pyx_t_12 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_12 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[7] = {__pyx_t_13, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_t_1, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 6+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L18_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[7] = {__pyx_t_13, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_t_1, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_12, 6+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L18_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(6+__pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 374, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_12, __pyx_cur_scope->__pyx_v_client_order_id);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_12, __pyx_cur_scope->__pyx_v_trading_pair);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
            PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_12, __pyx_cur_scope->__pyx_v_amount);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_17, 3+__pyx_t_12, __pyx_t_1);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
            PyTuple_SET_ITEM(__pyx_t_17, 4+__pyx_t_12, __pyx_cur_scope->__pyx_v_order_type);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
            PyTuple_SET_ITEM(__pyx_t_17, 5+__pyx_t_12, __pyx_cur_scope->__pyx_v_price);
            __pyx_t_1 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 374, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_t_15);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_15;
            __Pyx_XGIVEREF(__pyx_t_16);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_16;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 1;
            return __pyx_r;
            __pyx_L24_resume_from_await:;
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_15 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_16 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_16);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 374, __pyx_L18_error)
            __pyx_t_8 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_8);
          } else {
            __pyx_t_8 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_8) < 0) __PYX_ERR(0, 374, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_v_creation_response = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":373
 *             self.start_tracking(in_flight_order)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 creation_response = await self.place_order(client_order_id, trading_pair, amount, order_side is TradeType.BUY, order_type, price)
 *             except asyncio.TimeoutError:
 */
        }
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L23_try_end;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":375
 *             try:
 *                 creation_response = await self.place_order(client_order_id, trading_pair, amount, order_side is TradeType.BUY, order_type, price)
 *             except asyncio.TimeoutError:             # <<<<<<<<<<<<<<
 *                 # We timed out while placing this order. We may have successfully submitted the order, or we may have had connection
 *                 # issues that prevented the submission from taking place. We'll assume that the order is live and let our order status
 */
        __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_3, &__pyx_t_17);
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TimeoutError); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 375, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_8, __pyx_t_13);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_ErrRestore(__pyx_t_8, __pyx_t_3, __pyx_t_17);
        __pyx_t_8 = 0; __pyx_t_3 = 0; __pyx_t_17 = 0;
        if (__pyx_t_12) {
          __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_17, &__pyx_t_3, &__pyx_t_8) < 0) __PYX_ERR(0, 375, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_8);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":379
 *                 # issues that prevented the submission from taking place. We'll assume that the order is live and let our order status
 *                 # updates mark this as cancelled if it doesn't actually exist.
 *                 self.logger().warning(f"Order {client_order_id} has timed out and putatively failed. Order will be tracked until reconciled.")             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_19 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
            __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
            if (likely(__pyx_t_19)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
              __Pyx_INCREF(__pyx_t_19);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_18, function);
            }
          }
          __pyx_t_1 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_18);
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = 0;
          __pyx_t_7 = 127;
          __Pyx_INCREF(__pyx_kp_u_Order);
          __pyx_t_6 += 6;
          __Pyx_GIVEREF(__pyx_kp_u_Order);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Order);
          __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) : __pyx_t_7;
          __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19);
          __Pyx_GIVEREF(__pyx_t_19);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_19);
          __pyx_t_19 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_timed_out_and_putatively_fa);
          __pyx_t_6 += 77;
          __Pyx_GIVEREF(__pyx_kp_u_has_timed_out_and_putatively_fa);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_has_timed_out_and_putatively_fa);
          __pyx_t_19 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_18);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_18, function);
            }
          }
          __pyx_t_13 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_1, __pyx_t_19) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_19);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 379, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":380
 *                 # updates mark this as cancelled if it doesn't actually exist.
 *                 self.logger().warning(f"Order {client_order_id} has timed out and putatively failed. Order will be tracked until reconciled.")
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             # Verify the response from the exchange
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_True);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L21_except_return;
        }
        goto __pyx_L20_except_error;
        __pyx_L20_except_error:;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":373
 *             self.start_tracking(in_flight_order)
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 creation_response = await self.place_order(client_order_id, trading_pair, amount, order_side is TradeType.BUY, order_type, price)
 *             except asyncio.TimeoutError:
 */
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        goto __pyx_L12_error;
        __pyx_L21_except_return:;
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        goto __pyx_L16_try_return;
        __pyx_L23_try_end:;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":383
 * 
 *             # Verify the response from the exchange
 *             if "status" not in creation_response.keys():             # <<<<<<<<<<<<<<
 *                 raise Exception(creation_response)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_creation_response, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_8 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 383, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_status, __pyx_t_8, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 383, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_4 = (__pyx_t_2 != 0);
      if (unlikely(__pyx_t_4)) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":384
 *             # Verify the response from the exchange
 *             if "status" not in creation_response.keys():
 *                 raise Exception(creation_response)             # <<<<<<<<<<<<<<
 * 
 *             status = creation_response["status"]
 */
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_cur_scope->__pyx_v_creation_response); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 384, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 384, __pyx_L12_error)

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":383
 * 
 *             # Verify the response from the exchange
 *             if "status" not in creation_response.keys():             # <<<<<<<<<<<<<<
 *                 raise Exception(creation_response)
 * 
 */
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":386
 *                 raise Exception(creation_response)
 * 
 *             status = creation_response["status"]             # <<<<<<<<<<<<<<
 *             if status != 'processing':
 *                 raise Exception(status)
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_creation_response, __pyx_n_u_status); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 386, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_cur_scope->__pyx_v_status = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":387
 * 
 *             status = creation_response["status"]
 *             if status != 'processing':             # <<<<<<<<<<<<<<
 *                 raise Exception(status)
 * 
 */
      __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_status, __pyx_n_u_processing, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 387, __pyx_L12_error)
      if (unlikely(__pyx_t_4)) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":388
 *             status = creation_response["status"]
 *             if status != 'processing':
 *                 raise Exception(status)             # <<<<<<<<<<<<<<
 * 
 *             loopring_order_hash = creation_response["hash"]
 */
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_cur_scope->__pyx_v_status); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 388, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(0, 388, __pyx_L12_error)

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":387
 * 
 *             status = creation_response["status"]
 *             if status != 'processing':             # <<<<<<<<<<<<<<
 *                 raise Exception(status)
 * 
 */
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":390
 *                 raise Exception(status)
 * 
 *             loopring_order_hash = creation_response["hash"]             # <<<<<<<<<<<<<<
 *             in_flight_order.update_exchange_order_id(loopring_order_hash)
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_creation_response, __pyx_n_u_hash); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 390, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_cur_scope->__pyx_v_loopring_order_hash = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":391
 * 
 *             loopring_order_hash = creation_response["hash"]
 *             in_flight_order.update_exchange_order_id(loopring_order_hash)             # <<<<<<<<<<<<<<
 * 
 *             # Begin tracking order
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_in_flight_order, __pyx_n_s_update_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_8 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_17, __pyx_cur_scope->__pyx_v_loopring_order_hash) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_loopring_order_hash);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 391, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":394
 * 
 *             # Begin tracking order
 *             self.logger().info(             # <<<<<<<<<<<<<<
 *                 f"Created {in_flight_order.description} order {client_order_id} for {amount} {trading_pair}.")
 * 
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 394, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
        }
      }
      __pyx_t_3 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 394, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":395
 *             # Begin tracking order
 *             self.logger().info(
 *                 f"Created {in_flight_order.description} order {client_order_id} for {amount} {trading_pair}.")             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
      __pyx_t_3 = PyTuple_New(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_Created);
      __pyx_t_6 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_Created);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Created);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_in_flight_order, __pyx_n_s_description); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_13, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u_order);
      __pyx_t_6 += 7;
      __Pyx_GIVEREF(__pyx_kp_u_order);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_order);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u_for);
      __pyx_t_6 += 5;
      __Pyx_GIVEREF(__pyx_kp_u_for);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_for);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u__13);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__13);
      PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_kp_u__13);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_t_18);
      __pyx_t_18 = 0;
      __Pyx_INCREF(__pyx_kp_u__14);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__14);
      PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_kp_u__14);
      __pyx_t_18 = __Pyx_PyUnicode_Join(__pyx_t_3, 9, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 395, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
        }
      }
      __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_3, __pyx_t_18) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_18);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 394, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":397
 *                 f"Created {in_flight_order.description} order {client_order_id} for {amount} {trading_pair}.")
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         except Exception as e:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_True);
      goto __pyx_L16_try_return;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":368
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             created_at: int = int(time.time())
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)
 */
    }
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":399
 *             return True
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "
 *                                   f"{amount} {trading_pair} at {price}.")
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_17, &__pyx_t_18) < 0) __PYX_ERR(0, 399, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_17);
      __pyx_cur_scope->__pyx_v_e = __pyx_t_17;
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":400
 * 
 *         except Exception as e:
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "             # <<<<<<<<<<<<<<
 *                                   f"{amount} {trading_pair} at {price}.")
 *             self.logger().info(e)
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
          }
        }
        __pyx_t_13 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_19);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_warning); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Error_submitting);
        __pyx_t_6 += 17;
        __Pyx_GIVEREF(__pyx_kp_u_Error_submitting);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_kp_u_Error_submitting);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_side, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_INCREF(__pyx_kp_u__13);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__13);
        PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_kp_u__13);
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_20, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_order_to_Loopring_for);
        __pyx_t_6 += 23;
        __Pyx_GIVEREF(__pyx_kp_u_order_to_Loopring_for);
        PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_kp_u_order_to_Loopring_for);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":401
 *         except Exception as e:
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "
 *                                   f"{amount} {trading_pair} at {price}.")             # <<<<<<<<<<<<<<
 *             self.logger().info(e)
 * 
 */
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 5, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u__13);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__13);
        PyTuple_SET_ITEM(__pyx_t_13, 6, __pyx_kp_u__13);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 7, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u_at);
        __pyx_t_6 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_at);
        PyTuple_SET_ITEM(__pyx_t_13, 8, __pyx_kp_u_at);
        __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_price, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 9, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_INCREF(__pyx_kp_u__14);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__14);
        PyTuple_SET_ITEM(__pyx_t_13, 10, __pyx_kp_u__14);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":400
 * 
 *         except Exception as e:
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "             # <<<<<<<<<<<<<<
 *                                   f"{amount} {trading_pair} at {price}.")
 *             self.logger().info(e)
 */
        __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_13, 11, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
          }
        }
        __pyx_t_3 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":402
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "
 *                                   f"{amount} {trading_pair} at {price}.")
 *             self.logger().info(e)             # <<<<<<<<<<<<<<
 * 
 *             # Re-sync our next order id after this failure
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_19 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 402, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_19, __pyx_cur_scope->__pyx_v_e) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_e);
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":405
 * 
 *             # Re-sync our next order id after this failure
 *             base, quote = trading_pair.split('-')             # <<<<<<<<<<<<<<
 *             token_sell_id = self._token_configuration.get_tokenid(base) if order_side is TradeType.SELL else self._token_configuration.get_tokenid(quote)
 *             await self._get_next_order_id(token_sell_id, force_sync = True)
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_19 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_19)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_19);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_19, __pyx_kp_u__7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__7);
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 405, __pyx_L34_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_19 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_19 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_19);
          #else
          __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_19 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 405, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_19);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_13 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 405, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_21 = Py_TYPE(__pyx_t_13)->tp_iternext;
          index = 0; __pyx_t_1 = __pyx_t_21(__pyx_t_13); if (unlikely(!__pyx_t_1)) goto __pyx_L36_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          index = 1; __pyx_t_19 = __pyx_t_21(__pyx_t_13); if (unlikely(!__pyx_t_19)) goto __pyx_L36_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_19);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_21(__pyx_t_13), 2) < 0) __PYX_ERR(0, 405, __pyx_L34_error)
          __pyx_t_21 = NULL;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          goto __pyx_L37_unpacking_done;
          __pyx_L36_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_21 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 405, __pyx_L34_error)
          __pyx_L37_unpacking_done:;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_v_base = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_GIVEREF(__pyx_t_19);
        __pyx_cur_scope->__pyx_v_quote = __pyx_t_19;
        __pyx_t_19 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":406
 *             # Re-sync our next order id after this failure
 *             base, quote = trading_pair.split('-')
 *             token_sell_id = self._token_configuration.get_tokenid(base) if order_side is TradeType.SELL else self._token_configuration.get_tokenid(quote)             # <<<<<<<<<<<<<<
 *             await self._get_next_order_id(token_sell_id, force_sync = True)
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_SELL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_side == __pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if ((__pyx_t_4 != 0)) {
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_19, function);
            }
          }
          __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_13, __pyx_cur_scope->__pyx_v_base) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_cur_scope->__pyx_v_base);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __pyx_t_3 = __pyx_t_1;
          __pyx_t_1 = 0;
        } else {
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_19);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_19, function);
            }
          }
          __pyx_t_1 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_13, __pyx_cur_scope->__pyx_v_quote) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_cur_scope->__pyx_v_quote);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __pyx_t_3 = __pyx_t_1;
          __pyx_t_1 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_v_token_sell_id = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":407
 *             base, quote = trading_pair.split('-')
 *             token_sell_id = self._token_configuration.get_tokenid(base) if order_side is TradeType.SELL else self._token_configuration.get_tokenid(quote)
 *             await self._get_next_order_id(token_sell_id, force_sync = True)             # <<<<<<<<<<<<<<
 * 
 *             # Stop tracking this order
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_next_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_token_sell_id);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_token_sell_id);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_token_sell_id);
        __pyx_t_19 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 407, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_force_sync, Py_True) < 0) __PYX_ERR(0, 407, __pyx_L34_error)
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_19); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 407, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_13);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
          __Pyx_XGIVEREF(__pyx_t_11);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_11;
          __Pyx_XGIVEREF(__pyx_t_17);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_17;
          __Pyx_XGIVEREF(__pyx_t_18);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_18;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L38_resume_from_await:;
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_8);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_10);
          __pyx_t_11 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_11);
          __pyx_t_17 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_17);
          __pyx_t_18 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_18);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 407, __pyx_L34_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 407, __pyx_L34_error)
          }
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":410
 * 
 *             # Stop tracking this order
 *             self.stop_tracking(client_order_id)             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(ORDER_FAILURE_EVENT, MarketOrderFailureEvent(now(), client_order_id, order_type))
 * 
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_tracking); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 410, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
          }
        }
        __pyx_t_13 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_1, __pyx_cur_scope->__pyx_v_client_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_cur_scope->__pyx_v_client_order_id);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 410, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":411
 *             # Stop tracking this order
 *             self.stop_tracking(client_order_id)
 *             self.c_trigger_event(ORDER_FAILURE_EVENT, MarketOrderFailureEvent(now(), client_order_id, order_type))             # <<<<<<<<<<<<<<
 * 
 *             return False
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_ORDER_FAILURE_EVENT); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_22 = __Pyx_PyInt_As_int64_t(__pyx_t_13); if (unlikely((__pyx_t_22 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_now); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_20 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_1 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_19)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_1, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_order_type};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L34_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_19)) {
          PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_1, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_order_type};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_19, __pyx_temp+1-__pyx_t_12, 3+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L34_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else
        #endif
        {
          __pyx_t_20 = PyTuple_New(3+__pyx_t_12); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 411, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_20);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_3); __pyx_t_3 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_12, __pyx_t_1);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
          PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_12, __pyx_cur_scope->__pyx_v_client_order_id);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
          PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_12, __pyx_cur_scope->__pyx_v_order_type);
          __pyx_t_1 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_20, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_22, __pyx_t_13); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 411, __pyx_L34_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":413
 *             self.c_trigger_event(ORDER_FAILURE_EVENT, MarketOrderFailureEvent(now(), client_order_id, order_type))
 * 
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     async def execute_buy(self,
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_False);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        goto __pyx_L33_return;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":399
 *             return True
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Error submitting {order_side.name} {order_type.name} order to Loopring for "
 *                                   f"{amount} {trading_pair} at {price}.")
 */
      /*finally:*/ {
        __pyx_L34_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_assign
          __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_25, &__pyx_t_26, &__pyx_t_27);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_15, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_26);
          __Pyx_XGOTREF(__pyx_t_27);
          __pyx_t_12 = __pyx_lineno; __pyx_t_23 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
          {
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
            __pyx_cur_scope->__pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_25);
            __Pyx_XGIVEREF(__pyx_t_26);
            __Pyx_XGIVEREF(__pyx_t_27);
            __Pyx_ExceptionReset(__pyx_t_25, __pyx_t_26, __pyx_t_27);
          }
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ErrRestore(__pyx_t_16, __pyx_t_15, __pyx_t_14);
          __pyx_t_16 = 0; __pyx_t_15 = 0; __pyx_t_14 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0;
          __pyx_lineno = __pyx_t_12; __pyx_clineno = __pyx_t_23; __pyx_filename = __pyx_t_24;
          goto __pyx_L14_except_error;
        }
        __pyx_L33_return: {
          __Pyx_PyThreadState_assign
          __pyx_t_27 = 0; __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_27, &__pyx_t_26, &__pyx_t_25) < 0)) __Pyx_ErrFetch(&__pyx_t_27, &__pyx_t_26, &__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_27);
          __Pyx_XGOTREF(__pyx_t_26);
          __Pyx_XGOTREF(__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __pyx_t_28 = __pyx_r;
          __pyx_r = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
          __pyx_cur_scope->__pyx_v_e = NULL;
          __pyx_r = __pyx_t_28;
          __pyx_t_28 = 0;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          }
          __Pyx_XGIVEREF(__pyx_t_27);
          __Pyx_XGIVEREF(__pyx_t_26);
          __Pyx_XGIVEREF(__pyx_t_25);
          __Pyx_ErrRestore(__pyx_t_27, __pyx_t_26, __pyx_t_25);
          __pyx_t_27 = 0; __pyx_t_26 = 0; __pyx_t_25 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
          goto __pyx_L15_except_return;
        }
      }
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":368
 *             raise ValueError(f"Order notional value({str(amount*price)}) is less than the minimum allowable notional value for an order ({str(trading_rule.min_notional_size)})")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             created_at: int = int(time.time())
 *             in_flight_order = LoopringInFlightOrder.from_loopring_order(self, order_side, client_order_id, created_at, None, trading_pair, price, amount)
 */
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L1_error;
    __pyx_L16_try_return:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L0;
    __pyx_L15_except_return:;
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":344
 *         return await self.api_request("POST", ORDER_ROUTE, data=order)
 * 
 *     async def execute_order(self, order_side, client_order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *         """
 *         Completes the common tasks from execute_buy and execute_sell.  Quantizes the order's amount and price, and
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("execute_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_23generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":415
 *             return False
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_22execute_buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_22execute_buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_buy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = __pyx_k__15;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 1); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 2); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 3); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "execute_buy") < 0)) __PYX_ERR(0, 415, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_order_type = values[3];
    __pyx_v_price = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 416, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_21execute_buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_21execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_buy", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 415, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_23generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_buy, __pyx_n_s_LoopringExchange_execute_buy, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_23generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_buy", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 415, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":421
 *                           order_type: OrderType,
 *                           price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_execute_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_4, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_4, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(6+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_id);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_cur_scope->__pyx_v_trading_pair);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_cur_scope->__pyx_v_amount);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_type);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
    PyTuple_SET_ITEM(__pyx_t_6, 5+__pyx_t_5, __pyx_cur_scope->__pyx_v_price);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 421, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":422
 *                           price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,             # <<<<<<<<<<<<<<
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BUY_ORDER_CREATED_EVENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":423
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))             # <<<<<<<<<<<<<<
 * 
 *     async def execute_sell(self,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_cur_scope->__pyx_v_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_amount);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_cur_scope->__pyx_v_price) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_cur_scope->__pyx_v_price);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_6, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_6, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(6+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_type);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_5, __pyx_cur_scope->__pyx_v_trading_pair);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_5, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_5, __pyx_t_3);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_id);
      __pyx_t_6 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":422
 *                           price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,             # <<<<<<<<<<<<<<
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":421
 *                           order_type: OrderType,
 *                           price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":415
 *             return False
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_26generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":425
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_25execute_sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_25execute_sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_sell (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = __pyx_k__16;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 4, 5, 1); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 4, 5, 2); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 4, 5, 3); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "execute_sell") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_order_type = values[3];
    __pyx_v_price = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 426, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_24execute_sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_24execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_sell", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 425, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_26generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_sell, __pyx_n_s_LoopringExchange_execute_sell, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_26generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int64_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_sell", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 425, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":431
 *                            order_type: OrderType,
 *                            price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_execute_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SELL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_4, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_4, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_price};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(6+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_id);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_cur_scope->__pyx_v_trading_pair);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_cur_scope->__pyx_v_amount);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_type);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
    PyTuple_SET_ITEM(__pyx_t_6, 5+__pyx_t_5, __pyx_cur_scope->__pyx_v_price);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 431, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":432
 *                            price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,             # <<<<<<<<<<<<<<
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SELL_ORDER_CREATED_EVENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":433
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_cur_scope->__pyx_v_amount) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_amount);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_cur_scope->__pyx_v_price) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_cur_scope->__pyx_v_price);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_6, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_6, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_order_id};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 6+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(6+__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_5, __pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_type);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_5, __pyx_cur_scope->__pyx_v_trading_pair);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_5, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_5, __pyx_t_3);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
      PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_5, __pyx_cur_scope->__pyx_v_order_id);
      __pyx_t_6 = 0;
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":432
 *                            price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,             # <<<<<<<<<<<<<<
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":431
 *                            order_type: OrderType,
 *                            price: Optional[Decimal] = Decimal('NaN')):
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":425
 *                                  BuyOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":435
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                    dict kwargs = {}):
 *         cdef:
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__17;
  PyObject *__pyx_v_price = ((PyObject *)__pyx_float_0_0);
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("c_buy", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":438
 *                    dict kwargs = {}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str client_order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(client_order_id, trading_pair, amount, order_type, price))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_4);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":439
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str client_order_id = str(f"buy-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_buy(client_order_id, trading_pair, amount, order_type, price))
 *         return client_order_id
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_buy);
  __pyx_t_5 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_buy);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_buy);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__7);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__7);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_client_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":440
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str client_order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(client_order_id, trading_pair, amount, order_type, price))             # <<<<<<<<<<<<<<
 *         return client_order_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_buy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[6] = {__pyx_t_8, __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[6] = {__pyx_t_8, __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_client_order_id);
    __Pyx_GIVEREF(__pyx_v_client_order_id);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_client_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_trading_pair);
    __Pyx_INCREF(__pyx_v_amount);
    __Pyx_GIVEREF(__pyx_v_amount);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_amount);
    __Pyx_INCREF(__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_v_order_type);
    __Pyx_INCREF(__pyx_v_price);
    __Pyx_GIVEREF(__pyx_v_price);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_v_price);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":441
 *             str client_order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(client_order_id, trading_pair, amount, order_type, price))
 *         return client_order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_client_order_id);
  __pyx_r = __pyx_v_client_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":435
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                    dict kwargs = {}):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_client_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":443
 *         return client_order_id
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                     dict kwargs = {}):
 *         cdef:
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__18;
  PyObject *__pyx_v_price = ((PyObject *)__pyx_float_0_0);
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("c_sell", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":446
 *                     dict kwargs = {}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str client_order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_sell(client_order_id, trading_pair, amount, order_type, price))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_4);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":447
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str client_order_id = str(f"sell-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_sell(client_order_id, trading_pair, amount, order_type, price))
 *         return client_order_id
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_sell);
  __pyx_t_5 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_sell);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_sell);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__7);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__7);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_client_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":448
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str client_order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_sell(client_order_id, trading_pair, amount, order_type, price))             # <<<<<<<<<<<<<<
 *         return client_order_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_sell); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[6] = {__pyx_t_8, __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[6] = {__pyx_t_8, __pyx_v_client_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_client_order_id);
    __Pyx_GIVEREF(__pyx_v_client_order_id);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_client_order_id);
    __Pyx_INCREF(__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_v_trading_pair);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_trading_pair);
    __Pyx_INCREF(__pyx_v_amount);
    __Pyx_GIVEREF(__pyx_v_amount);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_amount);
    __Pyx_INCREF(__pyx_v_order_type);
    __Pyx_GIVEREF(__pyx_v_order_type);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_v_order_type);
    __Pyx_INCREF(__pyx_v_price);
    __Pyx_GIVEREF(__pyx_v_price);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_v_price);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":449
 *             str client_order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_sell(client_order_id, trading_pair, amount, order_type, price))
 *         return client_order_id             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_client_order_id);
  __pyx_r = __pyx_v_client_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":443
 *         return client_order_id
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                     dict kwargs = {}):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_client_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_29generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":454
 *     # Cancellation
 * 
 *     async def cancel_order(self, client_order_id: str):             # <<<<<<<<<<<<<<
 *         in_flight_order = self._in_flight_orders.get(client_order_id)
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_28cancel_order(PyObject *__pyx_v_self, PyObject *__pyx_v_client_order_id); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_28cancel_order(PyObject *__pyx_v_self, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_27cancel_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject*)__pyx_v_client_order_id));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_27cancel_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 454, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_client_order_id = __pyx_v_client_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_29generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_order, __pyx_n_s_LoopringExchange_cancel_order, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_29generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int64_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 454, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":455
 * 
 *     async def cancel_order(self, client_order_id: str):
 *         in_flight_order = self._in_flight_orders.get(client_order_id)             # <<<<<<<<<<<<<<
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 455, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_client_order_id, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_in_flight_order = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":456
 *     async def cancel_order(self, client_order_id: str):
 *         in_flight_order = self._in_flight_orders.get(client_order_id)
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)             # <<<<<<<<<<<<<<
 * 
 *         if in_flight_order is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_now); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_client_order_id};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_cur_scope->__pyx_v_client_order_id};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_cur_scope->__pyx_v_client_order_id);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_cancellation_event = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":458
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 * 
 *         if in_flight_order is None:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *             return
 */
  __pyx_t_7 = (__pyx_cur_scope->__pyx_v_in_flight_order == Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":459
 * 
 *         if in_flight_order is None:
 *             self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_9 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_9, __pyx_cur_scope->__pyx_v_cancellation_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":460
 *         if in_flight_order is None:
 *             self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *             return             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":458
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 * 
 *         if in_flight_order is None:             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *             return
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":462
 *             return
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             cancellation_payload = {
 *                 "accountId": self._loopring_accountid,
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    /*try:*/ {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":464
 *         try:
 *             cancellation_payload = {
 *                 "accountId": self._loopring_accountid,             # <<<<<<<<<<<<<<
 *                 "clientOrderId": client_order_id
 *             }
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->_loopring_accountid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_accountId, __pyx_t_2) < 0) __PYX_ERR(0, 464, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":465
 *             cancellation_payload = {
 *                 "accountId": self._loopring_accountid,
 *                 "clientOrderId": client_order_id             # <<<<<<<<<<<<<<
 *             }
 * 
 */
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_clientOrderId, __pyx_cur_scope->__pyx_v_client_order_id) < 0) __PYX_ERR(0, 464, __pyx_L5_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_v_cancellation_payload = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":468
 *             }
 * 
 *             res = await self.api_request("DELETE", ORDER_CANCEL_ROUTE, params=cancellation_payload, secure=True)             # <<<<<<<<<<<<<<
 * 
 *             if 'resultInfo' in res:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ORDER_CANCEL_ROUTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_u_DELETE);
      __Pyx_GIVEREF(__pyx_n_u_DELETE);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_u_DELETE);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_params, __pyx_cur_scope->__pyx_v_cancellation_payload) < 0) __PYX_ERR(0, 468, __pyx_L5_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_secure, Py_True) < 0) __PYX_ERR(0, 468, __pyx_L5_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_10;
        __Pyx_XGIVEREF(__pyx_t_11);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
        __Pyx_XGIVEREF(__pyx_t_12);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_12;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_await:;
        __pyx_t_10 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_10);
        __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_11);
        __pyx_t_12 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_12);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 468, __pyx_L5_error)
        __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
      } else {
        __pyx_t_3 = NULL;
        if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 468, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_cur_scope->__pyx_v_res = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":470
 *             res = await self.api_request("DELETE", ORDER_CANCEL_ROUTE, params=cancellation_payload, secure=True)
 * 
 *             if 'resultInfo' in res:             # <<<<<<<<<<<<<<
 *                 code = res['resultInfo']['code']
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 */
      __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_resultInfo, __pyx_cur_scope->__pyx_v_res, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 470, __pyx_L5_error)
      __pyx_t_7 = (__pyx_t_8 != 0);
      if (__pyx_t_7) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":471
 * 
 *             if 'resultInfo' in res:
 *                 code = res['resultInfo']['code']             # <<<<<<<<<<<<<<
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                     # Order doesn't exist and enough time has passed so we are safe to mark this as canceled
 */
        __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_res, __pyx_n_u_resultInfo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_u_code); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_v_code = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":472
 *             if 'resultInfo' in res:
 *                 code = res['resultInfo']['code']
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                     # Order doesn't exist and enough time has passed so we are safe to mark this as canceled
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 */
        __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_code, __pyx_int_102117, 0x18EE5, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {
        } else {
          __pyx_t_7 = __pyx_t_8;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_in_flight_order, __pyx_n_s_created_at); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 472, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_t_8;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_7) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":474
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                     # Order doesn't exist and enough time has passed so we are safe to mark this as canceled
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)             # <<<<<<<<<<<<<<
 *                     self.c_stop_tracking_order(client_order_id)
 *                 elif code is not None and code != 0 and (code != 100001 or message != "order in status CANCELLED can't be cancelled"):
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_9 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 474, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_9, __pyx_cur_scope->__pyx_v_cancellation_event); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":475
 *                     # Order doesn't exist and enough time has passed so we are safe to mark this as canceled
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                     self.c_stop_tracking_order(client_order_id)             # <<<<<<<<<<<<<<
 *                 elif code is not None and code != 0 and (code != 100001 or message != "order in status CANCELLED can't be cancelled"):
 *                     raise Exception(f"Cancel order returned code {res['resultInfo']['code']} ({res['resultInfo']['message']})")
 */
          __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":472
 *             if 'resultInfo' in res:
 *                 code = res['resultInfo']['code']
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                     # Order doesn't exist and enough time has passed so we are safe to mark this as canceled
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 */
          goto __pyx_L13;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":476
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                     self.c_stop_tracking_order(client_order_id)
 *                 elif code is not None and code != 0 and (code != 100001 or message != "order in status CANCELLED can't be cancelled"):             # <<<<<<<<<<<<<<
 *                     raise Exception(f"Cancel order returned code {res['resultInfo']['code']} ({res['resultInfo']['message']})")
 * 
 */
        __pyx_t_8 = (__pyx_cur_scope->__pyx_v_code != Py_None);
        __pyx_t_13 = (__pyx_t_8 != 0);
        if (__pyx_t_13) {
        } else {
          __pyx_t_7 = __pyx_t_13;
          goto __pyx_L16_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_cur_scope->__pyx_v_code, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_13) {
        } else {
          __pyx_t_7 = __pyx_t_13;
          goto __pyx_L16_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_cur_scope->__pyx_v_code, __pyx_int_100001, 0x186A1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!__pyx_t_13) {
        } else {
          __pyx_t_7 = __pyx_t_13;
          goto __pyx_L16_bool_binop_done;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_kp_u_order_in_status_CANCELLED_can_t, Py_NE)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 476, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_t_13;
        __pyx_L16_bool_binop_done:;
        if (unlikely(__pyx_t_7)) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":477
 *                     self.c_stop_tracking_order(client_order_id)
 *                 elif code is not None and code != 0 and (code != 100001 or message != "order in status CANCELLED can't be cancelled"):
 *                     raise Exception(f"Cancel order returned code {res['resultInfo']['code']} ({res['resultInfo']['message']})")             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
          __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = 0;
          __pyx_t_15 = 127;
          __Pyx_INCREF(__pyx_kp_u_Cancel_order_returned_code);
          __pyx_t_14 += 27;
          __Pyx_GIVEREF(__pyx_kp_u_Cancel_order_returned_code);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Cancel_order_returned_code);
          __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_res, __pyx_n_u_resultInfo); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_code); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u__19);
          __pyx_t_14 += 2;
          __Pyx_GIVEREF(__pyx_kp_u__19);
          PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__19);
          __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_res, __pyx_n_u_resultInfo); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_message); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_15;
          __pyx_t_14 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_INCREF(__pyx_kp_u__12);
          __pyx_t_14 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__12);
          PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u__12);
          __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_ERR(0, 477, __pyx_L5_error)

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":476
 *                     self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                     self.c_stop_tracking_order(client_order_id)
 *                 elif code is not None and code != 0 and (code != 100001 or message != "order in status CANCELLED can't be cancelled"):             # <<<<<<<<<<<<<<
 *                     raise Exception(f"Cancel order returned code {res['resultInfo']['code']} ({res['resultInfo']['message']})")
 * 
 */
        }
        __pyx_L13:;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":470
 *             res = await self.api_request("DELETE", ORDER_CANCEL_ROUTE, params=cancellation_payload, secure=True)
 * 
 *             if 'resultInfo' in res:             # <<<<<<<<<<<<<<
 *                 code = res['resultInfo']['code']
 *                 if code == 102117 and in_flight_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 */
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":479
 *                     raise Exception(f"Cancel order returned code {res['resultInfo']['code']} ({res['resultInfo']['message']})")
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         except Exception as e:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_True);
      goto __pyx_L9_try_return;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":462
 *             return
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             cancellation_payload = {
 *                 "accountId": self._loopring_accountid,
 */
    }
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":481
 *             return True
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Failed to cancel order {client_order_id}")
 *             self.logger().info(e)
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_2) < 0) __PYX_ERR(0, 481, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_cur_scope->__pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":482
 * 
 *         except Exception as e:
 *             self.logger().warning(f"Failed to cancel order {client_order_id}")             # <<<<<<<<<<<<<<
 *             self.logger().info(e)
 *             return False
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        __pyx_t_4 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warning); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_cancel_order, __pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_4, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_17);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":483
 *         except Exception as e:
 *             self.logger().warning(f"Failed to cancel order {client_order_id}")
 *             self.logger().info(e)             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 483, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_17, function);
          }
        }
        __pyx_t_16 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 483, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 483, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_17, function);
          }
        }
        __pyx_t_1 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_16, __pyx_cur_scope->__pyx_v_e) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_cur_scope->__pyx_v_e);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":484
 *             self.logger().warning(f"Failed to cancel order {client_order_id}")
 *             self.logger().info(e)
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_False);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L24_return;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":481
 *             return True
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().warning(f"Failed to cancel order {client_order_id}")
 *             self.logger().info(e)
 */
      /*finally:*/ {
        __pyx_L25_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_assign
          __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_25);
          __pyx_t_6 = __pyx_lineno; __pyx_t_18 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
          {
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
            __pyx_cur_scope->__pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_XGIVEREF(__pyx_t_25);
            __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
          }
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_XGIVEREF(__pyx_t_22);
          __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
          __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_18; __pyx_filename = __pyx_t_19;
          goto __pyx_L7_except_error;
        }
        __pyx_L24_return: {
          __Pyx_PyThreadState_assign
          __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_21, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_25, &__pyx_t_24, &__pyx_t_23) < 0)) __Pyx_ErrFetch(&__pyx_t_25, &__pyx_t_24, &__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_26 = __pyx_r;
          __pyx_r = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
          __pyx_cur_scope->__pyx_v_e = NULL;
          __pyx_r = __pyx_t_26;
          __pyx_t_26 = 0;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_25);
          __Pyx_XGIVEREF(__pyx_t_24);
          __Pyx_XGIVEREF(__pyx_t_23);
          __Pyx_ErrRestore(__pyx_t_25, __pyx_t_24, __pyx_t_23);
          __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0;
          goto __pyx_L8_except_return;
        }
      }
    }
    goto __pyx_L7_except_error;
    __pyx_L7_except_error:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":462
 *             return
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             cancellation_payload = {
 *                 "accountId": self._loopring_accountid,
 */
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L1_error;
    __pyx_L9_try_return:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L0;
    __pyx_L8_except_return:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":454
 *     # Cancellation
 * 
 *     async def cancel_order(self, client_order_id: str):             # <<<<<<<<<<<<<<
 *         in_flight_order = self._in_flight_orders.get(client_order_id)
 *         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":486
 *             return False
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("c_cancel", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":487
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):
 *         safe_ensure_future(self.cancel_order(client_order_id))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_client_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_client_order_id);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":486
 *             return False
 * 
 *     cdef c_cancel(self, str trading_pair, str client_order_id):             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":489
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("c_stop_tracking_order", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":490
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[order_id]
 * 
 */
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 490, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_order_id, __pyx_v_self->_in_flight_orders, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":491
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]             # <<<<<<<<<<<<<<
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 */
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 491, __pyx_L1_error)
    }
    if (unlikely(PyDict_DelItem(__pyx_v_self->_in_flight_orders, __pyx_v_order_id) < 0)) __PYX_ERR(0, 491, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":490
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[order_id]
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":489
 *         safe_ensure_future(self.cancel_order(client_order_id))
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_stop_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_32generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":493
 *             del self._in_flight_orders[order_id]
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_31cancel_all(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeout_seconds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_31cancel_all(PyObject *__pyx_v_self, PyObject *__pyx_arg_timeout_seconds) {
  double __pyx_v_timeout_seconds;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all (wrapper)", 0);
  assert(__pyx_arg_timeout_seconds); {
    __pyx_v_timeout_seconds = __pyx_PyFloat_AsDouble(__pyx_arg_timeout_seconds); if (unlikely((__pyx_v_timeout_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_30cancel_all(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((double)__pyx_v_timeout_seconds));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_30cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, double __pyx_v_timeout_seconds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 493, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_timeout_seconds = __pyx_v_timeout_seconds;
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_32generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_all, __pyx_n_s_LoopringExchange_cancel_all, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":502
 *             self.logger().info(o + ' ' + str(s))
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):             # <<<<<<<<<<<<<<
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_1set_cancellation_status(PyObject *__pyx_self, PyObject *__pyx_v_oce); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_1set_cancellation_status = {"set_cancellation_status", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_1set_cancellation_status, METH_O, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_1set_cancellation_status(PyObject *__pyx_self, PyObject *__pyx_v_oce) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cancellation_status (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_set_cancellation_status(__pyx_self, ((PyObject *)__pyx_v_oce));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_set_cancellation_status(PyObject *__pyx_self, PyObject *__pyx_v_oce) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *__pyx_cur_scope;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_cancellation_status", 0);
  __pyx_outer_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":503
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):
 *             if oce.order_id in order_status:             # <<<<<<<<<<<<<<
 *                 order_status[oce.order_id] = True
 *                 return True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_oce, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_order_status)) { __Pyx_RaiseClosureNameError("order_status"); __PYX_ERR(0, 503, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_order_status == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 503, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_order_status, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":504
 *         def set_cancellation_status(oce: OrderCancelledEvent):
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True             # <<<<<<<<<<<<<<
 *                 return True
 *             return False
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_order_status)) { __Pyx_RaiseClosureNameError("order_status"); __PYX_ERR(0, 504, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_order_status == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 504, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_oce, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_order_status, __pyx_t_1, Py_True) < 0)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":505
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True
 *                 return True             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":503
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):
 *             if oce.order_id in order_status:             # <<<<<<<<<<<<<<
 *                 order_status[oce.order_id] = True
 *                 return True
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":506
 *                 order_status[oce.order_id] = True
 *                 return True
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         cancel_verifier = LatchingEventResponder(set_cancellation_status, len(cancellation_queue))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":502
 *             self.logger().info(o + ' ' + str(s))
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):             # <<<<<<<<<<<<<<
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_all.set_cancellation_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":493
 *             del self._in_flight_orders[order_id]
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:
 */

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_32generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int64_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L20_resume_from_await;
    case 2: goto __pyx_L23_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 493, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":494
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 *         cancellation_queue = self._in_flight_orders.copy()             # <<<<<<<<<<<<<<
 *         if len(cancellation_queue) == 0:
 *             return []
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 494, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_cur_scope->__pyx_v_self->_in_flight_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_cancellation_queue = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":495
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_cancellation_queue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 495, __pyx_L1_error)
  }
  __pyx_t_2 = PyDict_Size(__pyx_cur_scope->__pyx_v_cancellation_queue); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 0) != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":496
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:
 *             return []             # <<<<<<<<<<<<<<
 * 
 *         order_status = {o.client_order_id: False for o in cancellation_queue.values()}
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":495
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":498
 *             return []
 * 
 *         order_status = {o.client_order_id: False for o in cancellation_queue.values()}             # <<<<<<<<<<<<<<
 *         for o, s in order_status.items():
 *             self.logger().info(o + ' ' + str(s))
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = 0;
    if (unlikely(__pyx_cur_scope->__pyx_v_cancellation_queue == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 498, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_cancellation_queue, 1, __pyx_n_s_values, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_7;
    __pyx_t_7 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_5, &__pyx_t_2, NULL, &__pyx_t_7, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_7genexpr__pyx_v_o);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_7genexpr__pyx_v_o, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_7genexpr__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_7, (PyObject*)Py_False))) __PYX_ERR(0, 498, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_order_status = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":499
 * 
 *         order_status = {o.client_order_id: False for o in cancellation_queue.values()}
 *         for o, s in order_status.items():             # <<<<<<<<<<<<<<
 *             self.logger().info(o + ' ' + str(s))
 * 
 */
  __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_order_status, 1, __pyx_n_s_items, (&__pyx_t_2), (&__pyx_t_6)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_2, &__pyx_t_5, &__pyx_t_4, &__pyx_t_7, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_s);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_s, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":500
 *         order_status = {o.client_order_id: False for o in cancellation_queue.values()}
 *         for o, s in order_status.items():
 *             self.logger().info(o + ' ' + str(s))             # <<<<<<<<<<<<<<
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_cur_scope->__pyx_v_o, __pyx_kp_u__13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_s); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyNumber_Add(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":502
 *             self.logger().info(o + ' ' + str(s))
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):             # <<<<<<<<<<<<<<
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_oce, __pyx_t_7) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_10cancel_all_1set_cancellation_status, 0, __pyx_n_s_cancel_all_locals_set_cancellati, ((PyObject*)__pyx_cur_scope), __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_7, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_set_cancellation_status = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":508
 *             return False
 * 
 *         cancel_verifier = LatchingEventResponder(set_cancellation_status, len(cancellation_queue))             # <<<<<<<<<<<<<<
 *         self.c_add_listener(ORDER_CANCELLED_EVENT, cancel_verifier)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LatchingEventResponder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_cur_scope->__pyx_v_cancellation_queue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 508, __pyx_L1_error)
  }
  __pyx_t_2 = PyDict_Size(__pyx_cur_scope->__pyx_v_cancellation_queue); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_set_cancellation_status, __pyx_t_9};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_set_cancellation_status, __pyx_t_9};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_set_cancellation_status);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_set_cancellation_status);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_set_cancellation_status);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_6, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_cancel_verifier = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":509
 * 
 *         cancel_verifier = LatchingEventResponder(set_cancellation_status, len(cancellation_queue))
 *         self.c_add_listener(ORDER_CANCELLED_EVENT, cancel_verifier)             # <<<<<<<<<<<<<<
 * 
 *         for order_id, in_flight in cancellation_queue.iteritems():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_cur_scope->__pyx_v_cancel_verifier) == Py_None) || likely(__Pyx_TypeTest(__pyx_cur_scope->__pyx_v_cancel_verifier, __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener))))) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_12, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_cur_scope->__pyx_v_cancel_verifier)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":511
 *         self.c_add_listener(ORDER_CANCELLED_EVENT, cancel_verifier)
 * 
 *         for order_id, in_flight in cancellation_queue.iteritems():             # <<<<<<<<<<<<<<
 *             try:
 *                 if not await self.cancel_order(order_id):
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_cur_scope->__pyx_v_cancellation_queue == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_cancellation_queue, 1, __pyx_n_s_iteritems, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_5, &__pyx_t_2, &__pyx_t_1, &__pyx_t_10, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_id);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_id, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_in_flight);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_in_flight, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_10);
    __pyx_t_10 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":512
 * 
 *         for order_id, in_flight in cancellation_queue.iteritems():
 *             try:             # <<<<<<<<<<<<<<
 *                 if not await self.cancel_order(order_id):
 *                     # this order did not exist on the exchange
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":513
 *         for order_id, in_flight in cancellation_queue.iteritems():
 *             try:
 *                 if not await self.cancel_order(order_id):             # <<<<<<<<<<<<<<
 *                     # this order did not exist on the exchange
 *                     cancel_verifier.cancel_one()
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_cur_scope->__pyx_v_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_order_id);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 513, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_7);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_7;
          __Pyx_XGIVEREF(__pyx_t_13);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_13;
          __Pyx_XGIVEREF(__pyx_t_14);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_14;
          __Pyx_XGIVEREF(__pyx_t_15);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_15;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
          __pyx_t_7 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_7);
          __pyx_t_13 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_13);
          __pyx_t_14 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_14);
          __pyx_t_15 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_15);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 513, __pyx_L11_error)
          __pyx_t_10 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_10);
        } else {
          __pyx_t_10 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_10) < 0) __PYX_ERR(0, 513, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_10);
        }
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 513, __pyx_L11_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_16 = ((!__pyx_t_3) != 0);
        if (__pyx_t_16) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":515
 *                 if not await self.cancel_order(order_id):
 *                     # this order did not exist on the exchange
 *                     cancel_verifier.cancel_one()             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 cancel_verifier.cancel_one()
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cancel_verifier, __pyx_n_s_cancel_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
            }
          }
          __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 515, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":513
 *         for order_id, in_flight in cancellation_queue.iteritems():
 *             try:
 *                 if not await self.cancel_order(order_id):             # <<<<<<<<<<<<<<
 *                     # this order did not exist on the exchange
 *                     cancel_verifier.cancel_one()
 */
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":512
 * 
 *         for order_id, in_flight in cancellation_queue.iteritems():
 *             try:             # <<<<<<<<<<<<<<
 *                 if not await self.cancel_order(order_id):
 *                     # this order did not exist on the exchange
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L18_try_end;
      __pyx_L11_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":516
 *                     # this order did not exist on the exchange
 *                     cancel_verifier.cancel_one()
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 cancel_verifier.cancel_one()
 * 
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_8) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_1, &__pyx_t_9) < 0) __PYX_ERR(0, 516, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":517
 *                     cancel_verifier.cancel_one()
 *             except Exception:
 *                 cancel_verifier.cancel_one()             # <<<<<<<<<<<<<<
 * 
 *         all_completed: bool = await cancel_verifier.wait_for_completion(timeout_seconds)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cancel_verifier, __pyx_n_s_cancel_one); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 517, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_11 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 517, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_exception_handled;
      }
      goto __pyx_L13_except_error;
      __pyx_L13_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":512
 * 
 *         for order_id, in_flight in cancellation_queue.iteritems():
 *             try:             # <<<<<<<<<<<<<<
 *                 if not await self.cancel_order(order_id):
 *                     # this order did not exist on the exchange
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      goto __pyx_L1_error;
      __pyx_L12_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_L18_try_end:;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":519
 *                 cancel_verifier.cancel_one()
 * 
 *         all_completed: bool = await cancel_verifier.wait_for_completion(timeout_seconds)             # <<<<<<<<<<<<<<
 *         self.c_remove_listener(ORDER_CANCELLED_EVENT, cancel_verifier)
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cancel_verifier, __pyx_n_s_wait_for_completion); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout_seconds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L23_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 519, __pyx_L1_error)
    __pyx_t_7 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_7);
  } else {
    __pyx_t_7 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_7) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  }
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_all_completed = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":520
 * 
 *         all_completed: bool = await cancel_verifier.wait_for_completion(timeout_seconds)
 *         self.c_remove_listener(ORDER_CANCELLED_EVENT, cancel_verifier)             # <<<<<<<<<<<<<<
 * 
 *         return [CancellationResult(order_id=order_id, success=success) for order_id, success in order_status.items()]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_cur_scope->__pyx_v_cancel_verifier) == Py_None) || likely(__Pyx_TypeTest(__pyx_cur_scope->__pyx_v_cancel_verifier, __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener))))) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_12, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_cur_scope->__pyx_v_cancel_verifier)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":522
 *         self.c_remove_listener(ORDER_CANCELLED_EVENT, cancel_verifier)
 * 
 *         return [CancellationResult(order_id=order_id, success=success) for order_id, success in order_status.items()]             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_fee(self,
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_order_status, 1, __pyx_n_s_items, (&__pyx_t_2), (&__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_9);
    __pyx_t_9 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_9, __pyx_t_2, &__pyx_t_5, &__pyx_t_1, &__pyx_t_10, NULL, __pyx_t_6);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr1__pyx_v_order_id);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr1__pyx_v_order_id, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr1__pyx_v_success);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr1__pyx_v_success, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_cur_scope->__pyx_8genexpr1__pyx_v_order_id) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_success, __pyx_cur_scope->__pyx_8genexpr1__pyx_v_success) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } /* exit inner scope */
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":493
 *             del self._in_flight_orders[order_id]
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         cancellation_queue = self._in_flight_orders.copy()
 *         if len(cancellation_queue) == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":524
 *         return [CancellationResult(order_id=order_id, success=success) for order_id, success in order_status.items()]
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price) {
  PyObject *__pyx_v_is_maker = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("c_get_fee", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":531
 *                           object amount,
 *                           object price):
 *         is_maker = order_type is OrderType.LIMIT             # <<<<<<<<<<<<<<
 *         return estimate_fee("loopring", is_maker)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_order_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_is_maker = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":532
 *                           object price):
 *         is_maker = order_type is OrderType.LIMIT
 *         return estimate_fee("loopring", is_maker)             # <<<<<<<<<<<<<<
 * 
 *     # ==========================================================
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_loopring, __pyx_v_is_maker};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_loopring, __pyx_v_is_maker};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_loopring);
    __Pyx_GIVEREF(__pyx_n_u_loopring);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_loopring);
    __Pyx_INCREF(__pyx_v_is_maker);
    __Pyx_GIVEREF(__pyx_v_is_maker);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_is_maker);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":524
 *         return [CancellationResult(order_id=order_id, success=success) for order_id, success in order_status.items()]
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_is_maker);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_35generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":538
 *     # ----------------------------------------------------------
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         await self._token_configuration._configure()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_34start_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_34start_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_33start_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_33start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 538, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_35generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_start_network, __pyx_n_s_LoopringExchange_start_network, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 538, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_35generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    case 2: goto __pyx_L5_resume_from_await;
    case 3: goto __pyx_L7_resume_from_await;
    case 4: goto __pyx_L14_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 538, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":539
 * 
 *     async def start_network(self):
 *         await self.stop_network()             # <<<<<<<<<<<<<<
 *         await self._token_configuration._configure()
 *         self._order_book_tracker.start()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 539, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 539, __pyx_L1_error)
    }
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":540
 *     async def start_network(self):
 *         await self.stop_network()
 *         await self._token_configuration._configure()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.start()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_configure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 540, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 540, __pyx_L1_error)
    }
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":541
 *         await self.stop_network()
 *         await self._token_configuration._configure()
 *         self._order_book_tracker.start()             # <<<<<<<<<<<<<<
 * 
 *         if self._trading_required:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":543
 *         self._order_book_tracker.start()
 * 
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             exchange_info = await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 * 
 */
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0);
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":544
 * 
 *         if self._trading_required:
 *             exchange_info = await self.api_request("GET", EXCHANGE_INFO_ROUTE)             # <<<<<<<<<<<<<<
 * 
 *             tokens = set()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_EXCHANGE_INFO_ROUTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_GET, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_GET, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_GET);
      __Pyx_GIVEREF(__pyx_n_u_GET);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_GET);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 3;
      return __pyx_r;
      __pyx_L7_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 544, __pyx_L1_error)
      __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
    } else {
      __pyx_t_1 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_exchange_info = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":546
 *             exchange_info = await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 * 
 *             tokens = set()             # <<<<<<<<<<<<<<
 *             for pair in self._trading_pairs:
 *                 (base, quote) = self.split_trading_pair(pair)
 */
    __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_tokens = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":547
 * 
 *             tokens = set()
 *             for pair in self._trading_pairs:             # <<<<<<<<<<<<<<
 *                 (base, quote) = self.split_trading_pair(pair)
 *                 tokens.add(self.token_configuration.get_tokenid(base))
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 547, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_trading_pairs; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    for (;;) {
      if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 547, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_pair);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_pair, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":548
 *             tokens = set()
 *             for pair in self._trading_pairs:
 *                 (base, quote) = self.split_trading_pair(pair)             # <<<<<<<<<<<<<<
 *                 tokens.add(self.token_configuration.get_tokenid(base))
 *                 tokens.add(self.token_configuration.get_tokenid(quote))
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_split_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_cur_scope->__pyx_v_pair) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_pair);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 548, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_3 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 2) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 548, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_base);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_base, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_quote);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_quote, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":549
 *             for pair in self._trading_pairs:
 *                 (base, quote) = self.split_trading_pair(pair)
 *                 tokens.add(self.token_configuration.get_tokenid(base))             # <<<<<<<<<<<<<<
 *                 tokens.add(self.token_configuration.get_tokenid(quote))
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_cur_scope->__pyx_v_base) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_base);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = PySet_Add(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_2); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 549, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":550
 *                 (base, quote) = self.split_trading_pair(pair)
 *                 tokens.add(self.token_configuration.get_tokenid(base))
 *                 tokens.add(self.token_configuration.get_tokenid(quote))             # <<<<<<<<<<<<<<
 * 
 *             for token in tokens:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_tokenid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_cur_scope->__pyx_v_quote) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_quote);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = PySet_Add(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_2); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":547
 * 
 *             tokens = set()
 *             for pair in self._trading_pairs:             # <<<<<<<<<<<<<<
 *                 (base, quote) = self.split_trading_pair(pair)
 *                 tokens.add(self.token_configuration.get_tokenid(base))
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":552
 *                 tokens.add(self.token_configuration.get_tokenid(quote))
 * 
 *             for token in tokens:             # <<<<<<<<<<<<<<
 *                 await self._get_next_order_id(token, force_sync = True)
 * 
 */
    __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_v_tokens, 1, (&__pyx_t_11), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    while (1) {
      __pyx_t_12 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_11, &__pyx_t_8, &__pyx_t_2, __pyx_t_6);
      if (unlikely(__pyx_t_12 == 0)) break;
      if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_token);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_token, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":553
 * 
 *             for token in tokens:
 *                 await self._get_next_order_id(token, force_sync = True)             # <<<<<<<<<<<<<<
 * 
 *         self._polling_update_task = safe_ensure_future(self._polling_update())
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_get_next_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_token);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_token);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_token);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_force_sync, Py_True) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_8;
        __pyx_cur_scope->__pyx_t_3 = __pyx_t_11;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 4;
        return __pyx_r;
        __pyx_L14_resume_from_await:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_8 = __pyx_cur_scope->__pyx_t_2;
        __pyx_t_11 = __pyx_cur_scope->__pyx_t_3;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 553, __pyx_L1_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 553, __pyx_L1_error)
        }
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":543
 *         self._order_book_tracker.start()
 * 
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             exchange_info = await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":555
 *                 await self._get_next_order_id(token, force_sync = True)
 * 
 *         self._polling_update_task = safe_ensure_future(self._polling_update())             # <<<<<<<<<<<<<<
 *         self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_polling_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_polling_update_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_polling_update_task);
  __pyx_cur_scope->__pyx_v_self->_polling_update_task = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":556
 * 
 *         self._polling_update_task = safe_ensure_future(self._polling_update())
 *         self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())             # <<<<<<<<<<<<<<
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
  __pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":557
 *         self._polling_update_task = safe_ensure_future(self._polling_update())
 *         self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())             # <<<<<<<<<<<<<<
 * 
 *     async def stop_network(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_user_stream_event_listener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
  __pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task = __pyx_t_1;
  __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":538
 *     # ----------------------------------------------------------
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         await self.stop_network()
 *         await self._token_configuration._configure()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_38generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":559
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         self._pending_approval_tx_hashes.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_37stop_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_37stop_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_36stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_36stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 559, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_38generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_stop_network, __pyx_n_s_LoopringExchange_stop_network, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_38generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 559, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":560
 * 
 *     async def stop_network(self):
 *         self._order_book_tracker.stop()             # <<<<<<<<<<<<<<
 *         self._pending_approval_tx_hashes.clear()
 *         self._polling_update_task = None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":561
 *     async def stop_network(self):
 *         self._order_book_tracker.stop()
 *         self._pending_approval_tx_hashes.clear()             # <<<<<<<<<<<<<<
 *         self._polling_update_task = None
 *         if self._user_stream_tracker_task is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_pending_approval_tx_hashes, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":562
 *         self._order_book_tracker.stop()
 *         self._pending_approval_tx_hashes.clear()
 *         self._polling_update_task = None             # <<<<<<<<<<<<<<
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_polling_update_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_polling_update_task);
  __pyx_cur_scope->__pyx_v_self->_polling_update_task = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":563
 *         self._pending_approval_tx_hashes.clear()
 *         self._polling_update_task = None
 *         if self._user_stream_tracker_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 */
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":564
 *         self._polling_update_task = None
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()             # <<<<<<<<<<<<<<
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":563
 *         self._pending_approval_tx_hashes.clear()
 *         self._polling_update_task = None
 *         if self._user_stream_tracker_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":565
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task.cancel()
 *         self._user_stream_tracker_task = None
 */
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task != Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":566
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()             # <<<<<<<<<<<<<<
 *         self._user_stream_tracker_task = None
 *         self._user_stream_event_listener_task = None
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":565
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task.cancel()
 *         self._user_stream_tracker_task = None
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":567
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()
 *         self._user_stream_tracker_task = None             # <<<<<<<<<<<<<<
 *         self._user_stream_event_listener_task = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
  __pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task = Py_None;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":568
 *             self._user_stream_event_listener_task.cancel()
 *         self._user_stream_tracker_task = None
 *         self._user_stream_event_listener_task = None             # <<<<<<<<<<<<<<
 * 
 *     async def check_network(self) -> NetworkStatus:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
  __pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task = Py_None;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":559
 *         self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         self._pending_approval_tx_hashes.clear()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_41generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":570
 *         self._user_stream_event_listener_task = None
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_40check_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_40check_network(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_39check_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_39check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 570, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_41generator12, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_check_network, __pyx_n_s_LoopringExchange_check_network, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_41generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 570, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":571
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 *         except asyncio.CancelledError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":572
 *     async def check_network(self) -> NetworkStatus:
 *         try:
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)             # <<<<<<<<<<<<<<
 *         except asyncio.CancelledError:
 *             raise
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_EXCHANGE_INFO_ROUTE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_GET, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_n_u_GET, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L4_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 572, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_GET);
        __Pyx_GIVEREF(__pyx_n_u_GET);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_n_u_GET);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 572, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L10_resume_from_await:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 572, __pyx_L4_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 572, __pyx_L4_error)
        }
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":571
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 *         except asyncio.CancelledError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":573
 *         try:
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception:
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_9);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 573, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 573, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_9);
    __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 573, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":574
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 */
      __Pyx_GIVEREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ErrRestoreWithState(__pyx_t_9, __pyx_t_5, __pyx_t_4);
      __pyx_t_9 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; 
      __PYX_ERR(0, 574, __pyx_L6_except_error)
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":575
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception:             # <<<<<<<<<<<<<<
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_8) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_9) < 0) __PYX_ERR(0, 575, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":576
 *             raise
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 576, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_NOT_CONNECTED); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 576, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_except_return;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":571
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 *         except asyncio.CancelledError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L9_try_end:;
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":577
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":570
 *         self._user_stream_event_listener_task = None
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self.api_request("GET", EXCHANGE_INFO_ROUTE)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":583
 * 
 *     @property
 *     def tracking_states(self) -> Dict[str, any]:             # <<<<<<<<<<<<<<
 *         return {
 *             key: value.to_json()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_8genexpr2__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":584
 *     @property
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {             # <<<<<<<<<<<<<<
 *             key: value.to_json()
 *             for key, value in self._in_flight_orders.items()
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":586
 *         return {
 *             key: value.to_json()
 *             for key, value in self._in_flight_orders.items()             # <<<<<<<<<<<<<<
 *         }
 * 
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 586, __pyx_L5_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_items, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 586, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_key, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":585
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 *             key: value.to_json()             # <<<<<<<<<<<<<<
 *             for key, value in self._in_flight_orders.items()
 *         }
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_value, __pyx_n_s_to_json); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 585, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 585, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr2__pyx_v_key, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 585, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":583
 * 
 *     @property
 *     def tracking_states(self) -> Dict[str, any]:             # <<<<<<<<<<<<<<
 *         return {
 *             key: value.to_json()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.tracking_states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":589
 *         }
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         for order_id, in_flight_repr in saved_states.iteritems():
 *             in_flight_json: Dict[Str, Any] = json.loads(in_flight_repr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_43restore_tracking_states(PyObject *__pyx_v_self, PyObject *__pyx_v_saved_states); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_43restore_tracking_states(PyObject *__pyx_v_self, PyObject *__pyx_v_saved_states) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_tracking_states (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_42restore_tracking_states(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_saved_states));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_42restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_saved_states) {
  PyObject *__pyx_v_order_id = NULL;
  PyObject *__pyx_v_in_flight_repr = NULL;
  PyObject *__pyx_v_in_flight_json = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("restore_tracking_states", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":590
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         for order_id, in_flight_repr in saved_states.iteritems():             # <<<<<<<<<<<<<<
 *             in_flight_json: Dict[Str, Any] = json.loads(in_flight_repr)
 *             self._in_flight_orders[order_id] = LoopringInFlightOrder.from_json(self, in_flight_json)
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_saved_states == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 590, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_saved_states, 0, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_order_id, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_in_flight_repr, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":591
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         for order_id, in_flight_repr in saved_states.iteritems():
 *             in_flight_json: Dict[Str, Any] = json.loads(in_flight_repr)             # <<<<<<<<<<<<<<
 *             self._in_flight_orders[order_id] = LoopringInFlightOrder.from_json(self, in_flight_json)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_json); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_loads); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_in_flight_repr) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_in_flight_repr);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_in_flight_json, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":592
 *         for order_id, in_flight_repr in saved_states.iteritems():
 *             in_flight_json: Dict[Str, Any] = json.loads(in_flight_repr)
 *             self._in_flight_orders[order_id] = LoopringInFlightOrder.from_json(self, in_flight_json)             # <<<<<<<<<<<<<<
 * 
 *     def start_tracking(self, in_flight_order):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder), __pyx_n_s_from_json); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_in_flight_json};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_in_flight_json};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_in_flight_json);
      __Pyx_GIVEREF(__pyx_v_in_flight_json);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_v_in_flight_json);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 592, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->_in_flight_orders, __pyx_v_order_id, __pyx_t_6) < 0)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":589
 *         }
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         for order_id, in_flight_repr in saved_states.iteritems():
 *             in_flight_json: Dict[Str, Any] = json.loads(in_flight_repr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_in_flight_repr);
  __Pyx_XDECREF(__pyx_v_in_flight_json);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":594
 *             self._in_flight_orders[order_id] = LoopringInFlightOrder.from_json(self, in_flight_json)
 * 
 *     def start_tracking(self, in_flight_order):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders[in_flight_order.client_order_id] = in_flight_order
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_45start_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_in_flight_order); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_45start_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_in_flight_order) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_tracking (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_44start_tracking(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_in_flight_order));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_44start_tracking(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_in_flight_order) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("start_tracking", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":595
 * 
 *     def start_tracking(self, in_flight_order):
 *         self._in_flight_orders[in_flight_order.client_order_id] = in_flight_order             # <<<<<<<<<<<<<<
 * 
 *     def stop_tracking(self, client_order_id):
 */
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 595, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_flight_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_self->_in_flight_orders, __pyx_t_1, __pyx_v_in_flight_order) < 0)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":594
 *             self._in_flight_orders[order_id] = LoopringInFlightOrder.from_json(self, in_flight_json)
 * 
 *     def start_tracking(self, in_flight_order):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders[in_flight_order.client_order_id] = in_flight_order
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.start_tracking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":597
 *         self._in_flight_orders[in_flight_order.client_order_id] = in_flight_order
 * 
 *     def stop_tracking(self, client_order_id):             # <<<<<<<<<<<<<<
 *         if client_order_id in self._in_flight_orders:
 *             del self._in_flight_orders[client_order_id]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_47stop_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_client_order_id); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_47stop_tracking(PyObject *__pyx_v_self, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_tracking (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_46stop_tracking(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_client_order_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_46stop_tracking(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("stop_tracking", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":598
 * 
 *     def stop_tracking(self, client_order_id):
 *         if client_order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[client_order_id]
 * 
 */
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 598, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_client_order_id, __pyx_v_self->_in_flight_orders, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":599
 *     def stop_tracking(self, client_order_id):
 *         if client_order_id in self._in_flight_orders:
 *             del self._in_flight_orders[client_order_id]             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 599, __pyx_L1_error)
    }
    if (unlikely(PyDict_DelItem(__pyx_v_self->_in_flight_orders, __pyx_v_client_order_id) < 0)) __PYX_ERR(0, 599, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":598
 * 
 *     def stop_tracking(self, client_order_id):
 *         if client_order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[client_order_id]
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":597
 *         self._in_flight_orders[in_flight_order.client_order_id] = in_flight_order
 * 
 *     def stop_tracking(self, client_order_id):             # <<<<<<<<<<<<<<
 *         if client_order_id in self._in_flight_orders:
 *             del self._in_flight_orders[client_order_id]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.stop_tracking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":604
 *     # updates to orders and balances
 * 
 *     def _update_inflight_order(self, tracked_order: LoopringInFlightOrder, event: Dict[str, Any]):             # <<<<<<<<<<<<<<
 *         issuable_events: List[MarketEvent] = tracked_order.update(event)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_49_update_inflight_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_49_update_inflight_order(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *__pyx_v_tracked_order = 0;
  PyObject *__pyx_v_event = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_inflight_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tracked_order,&__pyx_n_s_event,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tracked_order)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_update_inflight_order", 1, 2, 2, 1); __PYX_ERR(0, 604, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_update_inflight_order") < 0)) __PYX_ERR(0, 604, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_tracked_order = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *)values[0]);
    __pyx_v_event = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_update_inflight_order", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 604, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_inflight_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tracked_order), __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder, 1, "tracked_order", 0))) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_48_update_inflight_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_tracked_order, __pyx_v_event);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_48_update_inflight_order(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *__pyx_v_tracked_order, PyObject *__pyx_v_event) {
  PyObject *__pyx_v_issuable_events = NULL;
  PyObject *__pyx_v_market_event = NULL;
  PyObject *__pyx_v_new_amount = NULL;
  PyObject *__pyx_v_new_price = NULL;
  PyObject *__pyx_v_new_fee = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int64_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_UCS4 __pyx_t_19;
  __Pyx_RefNannySetupContext("_update_inflight_order", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":605
 * 
 *     def _update_inflight_order(self, tracked_order: LoopringInFlightOrder, event: Dict[str, Any]):
 *         issuable_events: List[MarketEvent] = tracked_order.update(event)             # <<<<<<<<<<<<<<
 * 
 *         # Issue relevent events
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_event) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_event);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_issuable_events = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":608
 * 
 *         # Issue relevent events
 *         for (market_event, new_amount, new_price, new_fee) in issuable_events:             # <<<<<<<<<<<<<<
 *             if market_event == MarketEvent.OrderCancelled:
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 */
  if (likely(PyList_CheckExact(__pyx_v_issuable_events)) || PyTuple_CheckExact(__pyx_v_issuable_events)) {
    __pyx_t_1 = __pyx_v_issuable_events; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_issuable_events); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 608, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 608, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 608, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      __pyx_t_9 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 4) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 608, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_market_event, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_amount, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_price, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_fee, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":609
 *         # Issue relevent events
 *         for (market_event, new_amount, new_price, new_fee) in issuable_events:
 *             if market_event == MarketEvent.OrderCancelled:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 *                 self.stop_tracking(tracked_order.client_order_id)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_market_event, __pyx_t_8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":610
 *         for (market_event, new_amount, new_price, new_fee) in issuable_events:
 *             if market_event == MarketEvent.OrderCancelled:
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")             # <<<<<<<<<<<<<<
 *                 self.stop_tracking(tracked_order.client_order_id)
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Successfully_cancelled_order, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":611
 *             if market_event == MarketEvent.OrderCancelled:
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 *                 self.stop_tracking(tracked_order.client_order_id)             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,
 *                                      OrderCancelledEvent(self._current_timestamp,
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_stop_tracking); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_tracked_order->__pyx_base.client_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_tracked_order->__pyx_base.client_order_id);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":612
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 *                 self.stop_tracking(tracked_order.client_order_id)
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          tracked_order.client_order_id))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":613
 *                 self.stop_tracking(tracked_order.client_order_id)
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,
 *                                      OrderCancelledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFilled:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 613, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":614
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          tracked_order.client_order_id))             # <<<<<<<<<<<<<<
 *             elif market_event == MarketEvent.OrderFilled:
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,
 */
      __pyx_t_8 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_13, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":612
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 *                 self.stop_tracking(tracked_order.client_order_id)
 *                 self.c_trigger_event(ORDER_CANCELLED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          tracked_order.client_order_id))
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":609
 *         # Issue relevent events
 *         for (market_event, new_amount, new_price, new_fee) in issuable_events:
 *             if market_event == MarketEvent.OrderCancelled:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 *                 self.stop_tracking(tracked_order.client_order_id)
 */
      goto __pyx_L7;
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":615
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFilled:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,
 *                                      OrderFilledEvent(self._current_timestamp,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_market_event, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":616
 *                                                          tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFilled:
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderFilledEvent(self._current_timestamp,
 *                                                       tracked_order.client_order_id,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ORDER_FILLED_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":617
 *             elif market_event == MarketEvent.OrderFilled:
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,
 *                                      OrderFilledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                       tracked_order.client_order_id,
 *                                                       tracked_order.trading_pair,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":624
 *                                                       new_price,
 *                                                       new_amount,
 *                                                       TradeFee(Decimal(0), [(tracked_order.fee_asset, new_fee)]),             # <<<<<<<<<<<<<<
 *                                                       tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderExpired:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_9 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_int_0);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
      __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_tracked_order->__pyx_base.fee_asset);
      __Pyx_INCREF(__pyx_v_new_fee);
      __Pyx_GIVEREF(__pyx_v_new_fee);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_new_fee);
      __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_14);
      PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_14);
      __pyx_t_14 = 0;
      __pyx_t_14 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_9, __pyx_t_15};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_9, __pyx_t_15};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_13, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_13, __pyx_t_15);
        __pyx_t_9 = 0;
        __pyx_t_15 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":625
 *                                                       new_amount,
 *                                                       TradeFee(Decimal(0), [(tracked_order.fee_asset, new_fee)]),
 *                                                       tracked_order.client_order_id))             # <<<<<<<<<<<<<<
 *             elif market_event == MarketEvent.OrderExpired:
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,
 */
      __pyx_t_8 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[10] = {__pyx_t_8, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_v_tracked_order->__pyx_base.trading_pair, __pyx_v_tracked_order->__pyx_base.trade_type, __pyx_v_tracked_order->__pyx_base.order_type, __pyx_v_new_price, __pyx_v_new_amount, __pyx_t_6, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[10] = {__pyx_t_8, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_v_tracked_order->__pyx_base.trading_pair, __pyx_v_tracked_order->__pyx_base.trade_type, __pyx_v_tracked_order->__pyx_base.order_type, __pyx_v_new_price, __pyx_v_new_amount, __pyx_t_6, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(9+__pyx_t_13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_13, __pyx_t_3);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.trading_pair);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.trading_pair);
        PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.trading_pair);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.trade_type);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.trade_type);
        PyTuple_SET_ITEM(__pyx_t_16, 3+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.trade_type);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.order_type);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.order_type);
        PyTuple_SET_ITEM(__pyx_t_16, 4+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.order_type);
        __Pyx_INCREF(__pyx_v_new_price);
        __Pyx_GIVEREF(__pyx_v_new_price);
        PyTuple_SET_ITEM(__pyx_t_16, 5+__pyx_t_13, __pyx_v_new_price);
        __Pyx_INCREF(__pyx_v_new_amount);
        __Pyx_GIVEREF(__pyx_v_new_amount);
        PyTuple_SET_ITEM(__pyx_t_16, 6+__pyx_t_13, __pyx_v_new_amount);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_16, 7+__pyx_t_13, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        PyTuple_SET_ITEM(__pyx_t_16, 8+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
        __pyx_t_3 = 0;
        __pyx_t_6 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_16, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":616
 *                                                          tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFilled:
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderFilledEvent(self._current_timestamp,
 *                                                       tracked_order.client_order_id,
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":615
 *                                      OrderCancelledEvent(self._current_timestamp,
 *                                                          tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFilled:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_FILLED_EVENT,
 *                                      OrderFilledEvent(self._current_timestamp,
 */
      goto __pyx_L7;
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":626
 *                                                       TradeFee(Decimal(0), [(tracked_order.fee_asset, new_fee)]),
 *                                                       tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderExpired:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,
 *                                      OrderExpiredEvent(self._current_timestamp,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderExpired); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_market_event, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":627
 *                                                       tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderExpired:
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderExpiredEvent(self._current_timestamp,
 *                                                        tracked_order.client_order_id))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ORDER_EXPIRED_EVENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_2); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":628
 *             elif market_event == MarketEvent.OrderExpired:
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,
 *                                      OrderExpiredEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                        tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFailure:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_OrderExpiredEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":629
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,
 *                                      OrderExpiredEvent(self._current_timestamp,
 *                                                        tracked_order.client_order_id))             # <<<<<<<<<<<<<<
 *             elif market_event == MarketEvent.OrderFailure:
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,
 */
      __pyx_t_6 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.client_order_id};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_13, __pyx_t_16);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
        __pyx_t_16 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":627
 *                                                       tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderExpired:
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,             # <<<<<<<<<<<<<<
 *                                      OrderExpiredEvent(self._current_timestamp,
 *                                                        tracked_order.client_order_id))
 */
      __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":626
 *                                                       TradeFee(Decimal(0), [(tracked_order.fee_asset, new_fee)]),
 *                                                       tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderExpired:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_EXPIRED_EVENT,
 *                                      OrderExpiredEvent(self._current_timestamp,
 */
      goto __pyx_L7;
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":630
 *                                      OrderExpiredEvent(self._current_timestamp,
 *                                                        tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFailure:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,
 *                                      MarketOrderFailureEvent(self._current_timestamp,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_market_event, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":631
 *                                                        tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFailure:
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,             # <<<<<<<<<<<<<<
 *                                      MarketOrderFailureEvent(self._current_timestamp,
 *                                                              tracked_order.client_order_id,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ORDER_FAILURE_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":632
 *             elif market_event == MarketEvent.OrderFailure:
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,
 *                                      MarketOrderFailureEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                              tracked_order.client_order_id,
 *                                                              tracked_order.order_type))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":634
 *                                      MarketOrderFailureEvent(self._current_timestamp,
 *                                                              tracked_order.client_order_id,
 *                                                              tracked_order.order_type))             # <<<<<<<<<<<<<<
 * 
 *             # Complete the order if relevent
 */
      __pyx_t_16 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_v_tracked_order->__pyx_base.order_type};
        __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_v_tracked_order->__pyx_base.order_type};
        __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_16) {
          __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_16); __pyx_t_16 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_13, __pyx_t_3);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
        __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.order_type);
        __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.order_type);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.order_type);
        __pyx_t_3 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":631
 *                                                        tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFailure:
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,             # <<<<<<<<<<<<<<
 *                                      MarketOrderFailureEvent(self._current_timestamp,
 *                                                              tracked_order.client_order_id,
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":630
 *                                      OrderExpiredEvent(self._current_timestamp,
 *                                                        tracked_order.client_order_id))
 *             elif market_event == MarketEvent.OrderFailure:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(ORDER_FAILURE_EVENT,
 *                                      MarketOrderFailureEvent(self._current_timestamp,
 */
    }
    __pyx_L7:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":637
 * 
 *             # Complete the order if relevent
 *             if tracked_order.is_done:             # <<<<<<<<<<<<<<
 *                 if not tracked_order.is_failure:
 *                     if tracked_order.trade_type is TradeType.BUY:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_is_done); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":638
 *             # Complete the order if relevent
 *             if tracked_order.is_done:
 *                 if not tracked_order.is_failure:             # <<<<<<<<<<<<<<
 *                     if tracked_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_is_failure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_17 = ((!__pyx_t_11) != 0);
      if (__pyx_t_17) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":639
 *             if tracked_order.is_done:
 *                 if not tracked_order.is_failure:
 *                     if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BUY); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_17 = (__pyx_v_tracked_order->__pyx_base.trade_type == __pyx_t_7);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = (__pyx_t_17 != 0);
        if (__pyx_t_11) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":640
 *                 if not tracked_order.is_failure:
 *                     if tracked_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "             # <<<<<<<<<<<<<<
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(BUY_ORDER_COMPLETED_EVENT,
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_18 = 0;
          __pyx_t_19 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_market_buy_order);
          __pyx_t_18 += 21;
          __Pyx_GIVEREF(__pyx_kp_u_The_market_buy_order);
          PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_The_market_buy_order);
          __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_19;
          __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
          __pyx_t_3 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_user);
          __pyx_t_18 += 40;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_user);
          PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_has_completed_according_to_user);
          __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 640, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":642
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(BUY_ORDER_COMPLETED_EVENT,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_order.client_order_id,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 642, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":643
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(BUY_ORDER_COMPLETED_EVENT,
 *                                              BuyOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                     tracked_order.client_order_id,
 *                                                                     tracked_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 643, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 643, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":645
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_order.client_order_id,
 *                                                                     tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_order.quote_asset,
 *                                                                     tracked_order.fee_asset,
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":646
 *                                                                     tracked_order.client_order_id,
 *                                                                     tracked_order.base_asset,
 *                                                                     tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                     tracked_order.fee_asset,
 *                                                                     tracked_order.executed_amount_base,
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 646, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":651
 *                                                                     tracked_order.executed_amount_quote,
 *                                                                     tracked_order.fee_paid,
 *                                                                     tracked_order.order_type))             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().info(f"The market sell order {tracked_order.client_order_id} has completed "
 */
          __pyx_t_8 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_13 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[10] = {__pyx_t_8, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_t_2, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.fee_asset, __pyx_v_tracked_order->__pyx_base.executed_amount_base, __pyx_v_tracked_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_order->__pyx_base.fee_paid, __pyx_v_tracked_order->__pyx_base.order_type};
            __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[10] = {__pyx_t_8, __pyx_t_3, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_t_2, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.fee_asset, __pyx_v_tracked_order->__pyx_base.executed_amount_base, __pyx_v_tracked_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_order->__pyx_base.fee_paid, __pyx_v_tracked_order->__pyx_base.order_type};
            __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          } else
          #endif
          {
            __pyx_t_15 = PyTuple_New(9+__pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (__pyx_t_8) {
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_8); __pyx_t_8 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_13, __pyx_t_3);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
            PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_13, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_13, __pyx_t_16);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
            PyTuple_SET_ITEM(__pyx_t_15, 4+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.fee_asset);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.executed_amount_base);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.executed_amount_base);
            PyTuple_SET_ITEM(__pyx_t_15, 5+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.executed_amount_base);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            PyTuple_SET_ITEM(__pyx_t_15, 6+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.fee_paid);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.fee_paid);
            PyTuple_SET_ITEM(__pyx_t_15, 7+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.fee_paid);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.order_type);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.order_type);
            PyTuple_SET_ITEM(__pyx_t_15, 8+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.order_type);
            __pyx_t_3 = 0;
            __pyx_t_2 = 0;
            __pyx_t_16 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":642
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(BUY_ORDER_COMPLETED_EVENT,             # <<<<<<<<<<<<<<
 *                                              BuyOrderCompletedEvent(self._current_timestamp,
 *                                                                     tracked_order.client_order_id,
 */
          __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 642, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":639
 *             if tracked_order.is_done:
 *                 if not tracked_order.is_failure:
 *                     if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 */
          goto __pyx_L10;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":653
 *                                                                     tracked_order.order_type))
 *                     else:
 *                         self.logger().info(f"The market sell order {tracked_order.client_order_id} has completed "             # <<<<<<<<<<<<<<
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(SELL_ORDER_COMPLETED_EVENT,
 */
        /*else*/ {
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_7 = (__pyx_t_16) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_18 = 0;
          __pyx_t_19 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_market_sell_order);
          __pyx_t_18 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_The_market_sell_order);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_The_market_sell_order);
          __pyx_t_16 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_19;
          __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_16);
          __pyx_t_16 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_user);
          __pyx_t_18 += 40;
          __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_user);
          PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_has_completed_according_to_user);
          __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_7, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":655
 *                         self.logger().info(f"The market sell order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(SELL_ORDER_COMPLETED_EVENT,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_SELL_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 655, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_12 = __Pyx_PyInt_As_int64_t(__pyx_t_6); if (unlikely((__pyx_t_12 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":656
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(SELL_ORDER_COMPLETED_EVENT,
 *                                              SellOrderCompletedEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                      tracked_order.client_order_id,
 *                                                                      tracked_order.base_asset,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":658
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id,
 *                                                                      tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_order.quote_asset,
 *                                                                      tracked_order.fee_asset,
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":659
 *                                                                      tracked_order.client_order_id,
 *                                                                      tracked_order.base_asset,
 *                                                                      tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                                      tracked_order.fee_asset,
 *                                                                      tracked_order.executed_amount_base,
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":664
 *                                                                      tracked_order.executed_amount_quote,
 *                                                                      tracked_order.fee_paid,
 *                                                                      tracked_order.order_type))             # <<<<<<<<<<<<<<
 *                 else:
 *                     # check if its a cancelled order
 */
          __pyx_t_3 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_13 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[10] = {__pyx_t_3, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_t_7, __pyx_t_2, __pyx_v_tracked_order->__pyx_base.fee_asset, __pyx_v_tracked_order->__pyx_base.executed_amount_base, __pyx_v_tracked_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_order->__pyx_base.fee_paid, __pyx_v_tracked_order->__pyx_base.order_type};
            __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 656, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_15)) {
            PyObject *__pyx_temp[10] = {__pyx_t_3, __pyx_t_16, __pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_t_7, __pyx_t_2, __pyx_v_tracked_order->__pyx_base.fee_asset, __pyx_v_tracked_order->__pyx_base.executed_amount_base, __pyx_v_tracked_order->__pyx_base.executed_amount_quote, __pyx_v_tracked_order->__pyx_base.fee_paid, __pyx_v_tracked_order->__pyx_base.order_type};
            __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_15, __pyx_temp+1-__pyx_t_13, 9+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 656, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(9+__pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 656, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (__pyx_t_3) {
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_13, __pyx_t_16);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.client_order_id);
            PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.client_order_id);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_13, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_13, __pyx_t_2);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.fee_asset);
            PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.fee_asset);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.executed_amount_base);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.executed_amount_base);
            PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.executed_amount_base);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            PyTuple_SET_ITEM(__pyx_t_8, 6+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.executed_amount_quote);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.fee_paid);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.fee_paid);
            PyTuple_SET_ITEM(__pyx_t_8, 7+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.fee_paid);
            __Pyx_INCREF(__pyx_v_tracked_order->__pyx_base.order_type);
            __Pyx_GIVEREF(__pyx_v_tracked_order->__pyx_base.order_type);
            PyTuple_SET_ITEM(__pyx_t_8, 8+__pyx_t_13, __pyx_v_tracked_order->__pyx_base.order_type);
            __pyx_t_16 = 0;
            __pyx_t_7 = 0;
            __pyx_t_2 = 0;
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 656, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":655
 *                         self.logger().info(f"The market sell order {tracked_order.client_order_id} has completed "
 *                                            f"according to user stream.")
 *                         self.c_trigger_event(SELL_ORDER_COMPLETED_EVENT,             # <<<<<<<<<<<<<<
 *                                              SellOrderCompletedEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id,
 */
          __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_12, __pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 655, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __pyx_L10:;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":638
 *             # Complete the order if relevent
 *             if tracked_order.is_done:
 *                 if not tracked_order.is_failure:             # <<<<<<<<<<<<<<
 *                     if tracked_order.trade_type is TradeType.BUY:
 *                         self.logger().info(f"The market buy order {tracked_order.client_order_id} has completed "
 */
        goto __pyx_L9;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":669
 *                     # if its a cancelled order, check in flight orders
 *                     # if present in in flight orders issue cancel and stop tracking order
 *                     if tracked_order.is_cancelled:             # <<<<<<<<<<<<<<
 *                         if tracked_order.client_order_id in self._in_flight_orders:
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")
 */
      /*else*/ {
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tracked_order), __pyx_n_s_is_cancelled); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 669, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 669, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (__pyx_t_11) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":670
 *                     # if present in in flight orders issue cancel and stop tracking order
 *                     if tracked_order.is_cancelled:
 *                         if tracked_order.client_order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")
 *                     else:
 */
          if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
            __PYX_ERR(0, 670, __pyx_L1_error)
          }
          __pyx_t_11 = (__Pyx_PyDict_ContainsTF(__pyx_v_tracked_order->__pyx_base.client_order_id, __pyx_v_self->_in_flight_orders, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 670, __pyx_L1_error)
          __pyx_t_17 = (__pyx_t_11 != 0);
          if (__pyx_t_17) {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":671
 *                     if tracked_order.is_cancelled:
 *                         if tracked_order.client_order_id in self._in_flight_orders:
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().info(f"The market order {tracked_order.client_order_id} has failed according to "
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_2 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_18 = 0;
            __pyx_t_19 = 127;
            __Pyx_INCREF(__pyx_kp_u_Successfully_cancelled_order);
            __pyx_t_18 += 29;
            __Pyx_GIVEREF(__pyx_kp_u_Successfully_cancelled_order);
            PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Successfully_cancelled_order);
            __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_19;
            __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
            __pyx_t_2 = 0;
            __Pyx_INCREF(__pyx_kp_u__14);
            __pyx_t_18 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__14);
            PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u__14);
            __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_15 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":670
 *                     # if present in in flight orders issue cancel and stop tracking order
 *                     if tracked_order.is_cancelled:
 *                         if tracked_order.client_order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")
 *                     else:
 */
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":669
 *                     # if its a cancelled order, check in flight orders
 *                     # if present in in flight orders issue cancel and stop tracking order
 *                     if tracked_order.is_cancelled:             # <<<<<<<<<<<<<<
 *                         if tracked_order.client_order_id in self._in_flight_orders:
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")
 */
          goto __pyx_L11;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":673
 *                             self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}.")
 *                     else:
 *                         self.logger().info(f"The market order {tracked_order.client_order_id} has failed according to "             # <<<<<<<<<<<<<<
 *                                            f"order status API.")
 * 
 */
        /*else*/ {
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_8 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_18 = 0;
          __pyx_t_19 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_market_order);
          __pyx_t_18 += 17;
          __Pyx_GIVEREF(__pyx_kp_u_The_market_order);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_The_market_order);
          __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_tracked_order->__pyx_base.client_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_19;
          __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_kp_u_has_failed_according_to_order_s);
          __pyx_t_18 += 42;
          __Pyx_GIVEREF(__pyx_kp_u_has_failed_according_to_order_s);
          PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_has_failed_according_to_order_s);
          __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
            }
          }
          __pyx_t_15 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __pyx_L11:;
      }
      __pyx_L9:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":676
 *                                            f"order status API.")
 * 
 *                 self.c_stop_tracking_order(tracked_order.client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):
 */
      __pyx_t_15 = __pyx_v_tracked_order->__pyx_base.client_order_id;
      __Pyx_INCREF(__pyx_t_15);
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), ((PyObject*)__pyx_t_15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":637
 * 
 *             # Complete the order if relevent
 *             if tracked_order.is_done:             # <<<<<<<<<<<<<<
 *                 if not tracked_order.is_failure:
 *                     if tracked_order.trade_type is TradeType.BUY:
 */
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":608
 * 
 *         # Issue relevent events
 *         for (market_event, new_amount, new_price, new_fee) in issuable_events:             # <<<<<<<<<<<<<<
 *             if market_event == MarketEvent.OrderCancelled:
 *                 self.logger().info(f"Successfully cancelled order {tracked_order.client_order_id}")
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":604
 *     # updates to orders and balances
 * 
 *     def _update_inflight_order(self, tracked_order: LoopringInFlightOrder, event: Dict[str, Any]):             # <<<<<<<<<<<<<<
 *         issuable_events: List[MarketEvent] = tracked_order.update(event)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_inflight_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_issuable_events);
  __Pyx_XDECREF(__pyx_v_market_event);
  __Pyx_XDECREF(__pyx_v_new_amount);
  __Pyx_XDECREF(__pyx_v_new_price);
  __Pyx_XDECREF(__pyx_v_new_fee);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_52generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":678
 *                 self.c_stop_tracking_order(tracked_order.client_order_id)
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):             # <<<<<<<<<<<<<<
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_51_set_balances(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_51_set_balances(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_updates = 0;
  PyObject *__pyx_v_is_snapshot = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_balances (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_updates,&__pyx_n_s_is_snapshot,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_updates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_snapshot);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set_balances") < 0)) __PYX_ERR(0, 678, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_updates = values[0];
    __pyx_v_is_snapshot = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_balances", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 678, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._set_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_50_set_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_updates, __pyx_v_is_snapshot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_50_set_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_updates, PyObject *__pyx_v_is_snapshot) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_balances", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 678, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_updates = __pyx_v_updates;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_updates);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_updates);
  __pyx_cur_scope->__pyx_v_is_snapshot = __pyx_v_is_snapshot;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_snapshot);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_snapshot);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_52generator13, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_set_balances, __pyx_n_s_LoopringExchange__set_balances, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._set_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_52generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  char const *__pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_balances", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_await;
    case 2: goto __pyx_L13_resume_from_await;
    case 3: goto __pyx_L31_resume_from_await;
    case 4: goto __pyx_L32_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 678, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":679
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):
 *         try:             # <<<<<<<<<<<<<<
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":680
 *     async def _set_balances(self, updates, is_snapshot=True):
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())             # <<<<<<<<<<<<<<
 *             if len(tokens) == 0:
 *                 await self.token_configuration._configure()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 680, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_tokens); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 680, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 680, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 680, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_cur_scope->__pyx_v_tokens = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":681
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:             # <<<<<<<<<<<<<<
 *                 await self.token_configuration._configure()
 *                 tokens = set(self.token_configuration.get_tokens())
 */
      __pyx_t_7 = PySet_GET_SIZE(__pyx_cur_scope->__pyx_v_tokens); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 681, __pyx_L4_error)
      __pyx_t_8 = ((__pyx_t_7 == 0) != 0);
      if (__pyx_t_8) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":682
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:
 *                 await self.token_configuration._configure()             # <<<<<<<<<<<<<<
 *                 tokens = set(self.token_configuration.get_tokens())
 *             async with self._lock:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 682, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_configure); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 682, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 682, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L11_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 682, __pyx_L4_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 682, __pyx_L4_error)
          }
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":683
 *             if len(tokens) == 0:
 *                 await self.token_configuration._configure()
 *                 tokens = set(self.token_configuration.get_tokens())             # <<<<<<<<<<<<<<
 *             async with self._lock:
 *                 completed_tokens = set()
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 683, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_tokens); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_6 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 683, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 683, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tokens);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tokens, ((PyObject*)__pyx_t_4));
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":681
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:             # <<<<<<<<<<<<<<
 *                 await self.token_configuration._configure()
 *                 tokens = set(self.token_configuration.get_tokens())
 */
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":684
 *                 await self.token_configuration._configure()
 *                 tokens = set(self.token_configuration.get_tokens())
 *             async with self._lock:             # <<<<<<<<<<<<<<
 *                 completed_tokens = set()
 *                 for data in updates:
 */
      /*with:*/ {
        __pyx_t_9 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_self->_lock, __pyx_n_s_aexit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 684, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_cur_scope->__pyx_v_self->_lock, __pyx_n_s_aenter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 684, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L13_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 684, __pyx_L12_error)
          __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
        } else {
          __pyx_t_4 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 684, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*try:*/ {
          {
            __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":685
 *                 tokens = set(self.token_configuration.get_tokens())
 *             async with self._lock:
 *                 completed_tokens = set()             # <<<<<<<<<<<<<<
 *                 for data in updates:
 *                     padded_total_amount: str = data['total']
 */
              __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              __pyx_cur_scope->__pyx_v_completed_tokens = ((PyObject*)__pyx_t_4);
              __pyx_t_4 = 0;

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":686
 *             async with self._lock:
 *                 completed_tokens = set()
 *                 for data in updates:             # <<<<<<<<<<<<<<
 *                     padded_total_amount: str = data['total']
 *                     token_id: int = data['tokenId']
 */
              if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_updates)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_updates)) {
                __pyx_t_4 = __pyx_cur_scope->__pyx_v_updates; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_updates); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 686, __pyx_L17_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_4))) {
                    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L17_error)
                    #else
                    __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 686, __pyx_L17_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    #endif
                  } else {
                    if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 686, __pyx_L17_error)
                    #else
                    __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 686, __pyx_L17_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    #endif
                  }
                } else {
                  __pyx_t_6 = __pyx_t_13(__pyx_t_4);
                  if (unlikely(!__pyx_t_6)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 686, __pyx_L17_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_6);
                }
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_data);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":687
 *                 completed_tokens = set()
 *                 for data in updates:
 *                     padded_total_amount: str = data['total']             # <<<<<<<<<<<<<<
 *                     token_id: int = data['tokenId']
 *                     completed_tokens.add(token_id)
 */
                __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_total); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 687, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_6);
                if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 687, __pyx_L17_error)
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_padded_total_amount);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_padded_total_amount, ((PyObject*)__pyx_t_6));
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":688
 *                 for data in updates:
 *                     padded_total_amount: str = data['total']
 *                     token_id: int = data['tokenId']             # <<<<<<<<<<<<<<
 *                     completed_tokens.add(token_id)
 *                     padded_amount_locked: string = data['locked']
 */
                __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_tokenId); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 688, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_token_id);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_token_id, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":689
 *                     padded_total_amount: str = data['total']
 *                     token_id: int = data['tokenId']
 *                     completed_tokens.add(token_id)             # <<<<<<<<<<<<<<
 *                     padded_amount_locked: string = data['locked']
 * 
 */
                __pyx_t_14 = PySet_Add(__pyx_cur_scope->__pyx_v_completed_tokens, __pyx_cur_scope->__pyx_v_token_id); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 689, __pyx_L17_error)

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":690
 *                     token_id: int = data['tokenId']
 *                     completed_tokens.add(token_id)
 *                     padded_amount_locked: string = data['locked']             # <<<<<<<<<<<<<<
 * 
 *                     token_symbol: str = self._token_configuration.get_symbol(token_id)
 */
                __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_locked); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_padded_amount_locked);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_padded_amount_locked, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":692
 *                     padded_amount_locked: string = data['locked']
 * 
 *                     token_symbol: str = self._token_configuration.get_symbol(token_id)             # <<<<<<<<<<<<<<
 *                     total_amount: Decimal = self._token_configuration.unpad(padded_total_amount, token_id)
 *                     amount_locked: Decimal = self._token_configuration.unpad(padded_amount_locked, token_id)
 */
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_symbol); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_15 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                  __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                  if (likely(__pyx_t_15)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                    __Pyx_INCREF(__pyx_t_15);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_5, function);
                  }
                }
                __pyx_t_6 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_cur_scope->__pyx_v_token_id) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_token_id);
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 692, __pyx_L17_error)
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_token_symbol);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_token_symbol, ((PyObject*)__pyx_t_6));
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":693
 * 
 *                     token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                     total_amount: Decimal = self._token_configuration.unpad(padded_total_amount, token_id)             # <<<<<<<<<<<<<<
 *                     amount_locked: Decimal = self._token_configuration.unpad(padded_amount_locked, token_id)
 * 
 */
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_unpad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_15 = NULL;
                __pyx_t_16 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                  __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                  if (likely(__pyx_t_15)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                    __Pyx_INCREF(__pyx_t_15);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_5, function);
                    __pyx_t_16 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_cur_scope->__pyx_v_padded_total_amount, __pyx_cur_scope->__pyx_v_token_id};
                  __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L17_error)
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_GOTREF(__pyx_t_6);
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_cur_scope->__pyx_v_padded_total_amount, __pyx_cur_scope->__pyx_v_token_id};
                  __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L17_error)
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_GOTREF(__pyx_t_6);
                } else
                #endif
                {
                  __pyx_t_17 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  if (__pyx_t_15) {
                    __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
                  }
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_padded_total_amount);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_padded_total_amount);
                  PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_16, __pyx_cur_scope->__pyx_v_padded_total_amount);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_token_id);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_token_id);
                  PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_16, __pyx_cur_scope->__pyx_v_token_id);
                  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_total_amount);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_total_amount, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":694
 *                     token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                     total_amount: Decimal = self._token_configuration.unpad(padded_total_amount, token_id)
 *                     amount_locked: Decimal = self._token_configuration.unpad(padded_amount_locked, token_id)             # <<<<<<<<<<<<<<
 * 
 *                     self._account_balances[token_symbol] = total_amount
 */
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_unpad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 694, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_17 = NULL;
                __pyx_t_16 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                  __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
                  if (likely(__pyx_t_17)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                    __Pyx_INCREF(__pyx_t_17);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_5, function);
                    __pyx_t_16 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_cur_scope->__pyx_v_padded_amount_locked, __pyx_cur_scope->__pyx_v_token_id};
                  __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 694, __pyx_L17_error)
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_GOTREF(__pyx_t_6);
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_cur_scope->__pyx_v_padded_amount_locked, __pyx_cur_scope->__pyx_v_token_id};
                  __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 694, __pyx_L17_error)
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_GOTREF(__pyx_t_6);
                } else
                #endif
                {
                  __pyx_t_15 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 694, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  if (__pyx_t_17) {
                    __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_17); __pyx_t_17 = NULL;
                  }
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_padded_amount_locked);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_padded_amount_locked);
                  PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_16, __pyx_cur_scope->__pyx_v_padded_amount_locked);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_token_id);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_token_id);
                  PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_16, __pyx_cur_scope->__pyx_v_token_id);
                  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 694, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_amount_locked);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_amount_locked, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":696
 *                     amount_locked: Decimal = self._token_configuration.unpad(padded_amount_locked, token_id)
 * 
 *                     self._account_balances[token_symbol] = total_amount             # <<<<<<<<<<<<<<
 *                     self._account_available_balances[token_symbol] = total_amount - amount_locked
 * 
 */
                if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                  __PYX_ERR(0, 696, __pyx_L17_error)
                }
                if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_cur_scope->__pyx_v_token_symbol, __pyx_cur_scope->__pyx_v_total_amount) < 0)) __PYX_ERR(0, 696, __pyx_L17_error)

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":697
 * 
 *                     self._account_balances[token_symbol] = total_amount
 *                     self._account_available_balances[token_symbol] = total_amount - amount_locked             # <<<<<<<<<<<<<<
 * 
 *                 if is_snapshot:
 */
                __pyx_t_6 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_total_amount, __pyx_cur_scope->__pyx_v_amount_locked); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 697, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_6);
                if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                  __PYX_ERR(0, 697, __pyx_L17_error)
                }
                if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_cur_scope->__pyx_v_token_symbol, __pyx_t_6) < 0)) __PYX_ERR(0, 697, __pyx_L17_error)
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":686
 *             async with self._lock:
 *                 completed_tokens = set()
 *                 for data in updates:             # <<<<<<<<<<<<<<
 *                     padded_total_amount: str = data['total']
 *                     token_id: int = data['tokenId']
 */
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":699
 *                     self._account_available_balances[token_symbol] = total_amount - amount_locked
 * 
 *                 if is_snapshot:             # <<<<<<<<<<<<<<
 *                     # Tokens with 0 balance aren't returned, so set any missing tokens to 0 balance
 *                     for token_id in tokens - completed_tokens:
 */
              __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_snapshot); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 699, __pyx_L17_error)
              if (__pyx_t_8) {

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":701
 *                 if is_snapshot:
 *                     # Tokens with 0 balance aren't returned, so set any missing tokens to 0 balance
 *                     for token_id in tokens - completed_tokens:             # <<<<<<<<<<<<<<
 *                         token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                         self._account_balances[token_symbol] = Decimal(0)
 */
                __pyx_t_4 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_tokens, __pyx_cur_scope->__pyx_v_completed_tokens); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 701, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
                  __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 701, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 701, __pyx_L17_error)
                }
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_6))) {
                      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 701, __pyx_L17_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 701, __pyx_L17_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    } else {
                      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 701, __pyx_L17_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 701, __pyx_L17_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    }
                  } else {
                    __pyx_t_4 = __pyx_t_13(__pyx_t_6);
                    if (unlikely(!__pyx_t_4)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(0, 701, __pyx_L17_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_4);
                  }
                  __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_token_id);
                  __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_token_id, __pyx_t_4);
                  __Pyx_GIVEREF(__pyx_t_4);
                  __pyx_t_4 = 0;

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":702
 *                     # Tokens with 0 balance aren't returned, so set any missing tokens to 0 balance
 *                     for token_id in tokens - completed_tokens:
 *                         token_symbol: str = self._token_configuration.get_symbol(token_id)             # <<<<<<<<<<<<<<
 *                         self._account_balances[token_symbol] = Decimal(0)
 *                         self._account_available_balances[token_symbol] = Decimal(0)
 */
                  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_token_configuration, __pyx_n_s_get_symbol); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 702, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_15 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_15)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_15);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_cur_scope->__pyx_v_token_id) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_token_id);
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 702, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 702, __pyx_L17_error)
                  __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_token_symbol);
                  __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_token_symbol, ((PyObject*)__pyx_t_4));
                  __Pyx_GIVEREF(__pyx_t_4);
                  __pyx_t_4 = 0;

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":703
 *                     for token_id in tokens - completed_tokens:
 *                         token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                         self._account_balances[token_symbol] = Decimal(0)             # <<<<<<<<<<<<<<
 *                         self._account_available_balances[token_symbol] = Decimal(0)
 * 
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_15 = NULL;
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_15)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_15);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_0);
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(0, 703, __pyx_L17_error)
                  }
                  if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_cur_scope->__pyx_v_token_symbol, __pyx_t_4) < 0)) __PYX_ERR(0, 703, __pyx_L17_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":704
 *                         token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                         self._account_balances[token_symbol] = Decimal(0)
 *                         self._account_available_balances[token_symbol] = Decimal(0)             # <<<<<<<<<<<<<<
 * 
 *         except Exception as e:
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 704, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_15 = NULL;
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
                    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
                    if (likely(__pyx_t_15)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                      __Pyx_INCREF(__pyx_t_15);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_5, function);
                    }
                  }
                  __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_0);
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 704, __pyx_L17_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
                    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                    __PYX_ERR(0, 704, __pyx_L17_error)
                  }
                  if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_cur_scope->__pyx_v_token_symbol, __pyx_t_4) < 0)) __PYX_ERR(0, 704, __pyx_L17_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":701
 *                 if is_snapshot:
 *                     # Tokens with 0 balance aren't returned, so set any missing tokens to 0 balance
 *                     for token_id in tokens - completed_tokens:             # <<<<<<<<<<<<<<
 *                         token_symbol: str = self._token_configuration.get_symbol(token_id)
 *                         self._account_balances[token_symbol] = Decimal(0)
 */
                }
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":699
 *                     self._account_available_balances[token_symbol] = total_amount - amount_locked
 * 
 *                 if is_snapshot:             # <<<<<<<<<<<<<<
 *                     # Tokens with 0 balance aren't returned, so set any missing tokens to 0 balance
 *                     for token_id in tokens - completed_tokens:
 */
              }

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":684
 *                 await self.token_configuration._configure()
 *                 tokens = set(self.token_configuration.get_tokens())
 *             async with self._lock:             # <<<<<<<<<<<<<<
 *                 completed_tokens = set()
 *                 for data in updates:
 */
            }
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L22_try_end;
            __pyx_L17_error:;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._set_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 684, __pyx_L19_except_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_15 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 684, __pyx_L19_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_15, NULL);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 684, __pyx_L19_except_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_XGOTREF(__pyx_r);
              if (likely(__pyx_r)) {
                __Pyx_XGIVEREF(__pyx_t_1);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                __Pyx_XGIVEREF(__pyx_t_2);
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
                __Pyx_XGIVEREF(__pyx_t_3);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
                __Pyx_XGIVEREF(__pyx_t_4);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
                __Pyx_XGIVEREF(__pyx_t_5);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_5;
                __Pyx_XGIVEREF(__pyx_t_6);
                __pyx_cur_scope->__pyx_t_5 = __pyx_t_6;
                __Pyx_XGIVEREF(__pyx_t_9);
                __pyx_cur_scope->__pyx_t_6 = __pyx_t_9;
                __Pyx_XGIVEREF(__pyx_t_10);
                __pyx_cur_scope->__pyx_t_7 = __pyx_t_10;
                __Pyx_XGIVEREF(__pyx_t_11);
                __pyx_cur_scope->__pyx_t_8 = __pyx_t_11;
                __Pyx_XGIVEREF(__pyx_t_12);
                __pyx_cur_scope->__pyx_t_9 = __pyx_t_12;
                __Pyx_XGIVEREF(__pyx_t_18);
                __pyx_cur_scope->__pyx_t_10 = __pyx_t_18;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                __Pyx_Coroutine_SwapException(__pyx_generator);
                /* return from generator, awaiting value */
                __pyx_generator->resume_label = 3;
                return __pyx_r;
                __pyx_L31_resume_from_await:;
                __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_1);
                __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
                __pyx_cur_scope->__pyx_t_1 = 0;
                __Pyx_XGOTREF(__pyx_t_2);
                __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_3);
                __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_4);
                __pyx_t_5 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_5);
                __pyx_t_6 = __pyx_cur_scope->__pyx_t_5;
                __pyx_cur_scope->__pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_t_6);
                __pyx_t_9 = __pyx_cur_scope->__pyx_t_6;
                __pyx_cur_scope->__pyx_t_6 = 0;
                __Pyx_XGOTREF(__pyx_t_9);
                __pyx_t_10 = __pyx_cur_scope->__pyx_t_7;
                __pyx_cur_scope->__pyx_t_7 = 0;
                __Pyx_XGOTREF(__pyx_t_10);
                __pyx_t_11 = __pyx_cur_scope->__pyx_t_8;
                __pyx_cur_scope->__pyx_t_8 = 0;
                __Pyx_XGOTREF(__pyx_t_11);
                __pyx_t_12 = __pyx_cur_scope->__pyx_t_9;
                __pyx_cur_scope->__pyx_t_9 = 0;
                __Pyx_XGOTREF(__pyx_t_12);
                __pyx_t_18 = __pyx_cur_scope->__pyx_t_10;
                __pyx_cur_scope->__pyx_t_10 = 0;
                __Pyx_XGOTREF(__pyx_t_18);
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 684, __pyx_L19_except_error)
                __pyx_t_15 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_15);
              } else {
                __pyx_t_15 = NULL;
                if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_15) < 0) __PYX_ERR(0, 684, __pyx_L19_except_error)
                __Pyx_GOTREF(__pyx_t_15);
              }
              __pyx_t_18 = __pyx_t_15;
              __pyx_t_15 = 0;
              __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              if (__pyx_t_8 < 0) __PYX_ERR(0, 684, __pyx_L19_except_error)
              __pyx_t_19 = ((!(__pyx_t_8 != 0)) != 0);
              if (__pyx_t_19) {
                __Pyx_GIVEREF(__pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_4);
                __Pyx_XGIVEREF(__pyx_t_5);
                __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_4, __pyx_t_5);
                __pyx_t_6 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
                __PYX_ERR(0, 684, __pyx_L19_except_error)
              }
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L18_exception_handled;
            }
            __pyx_L19_except_error:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            goto __pyx_L4_error;
            __pyx_L18_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            __pyx_L22_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_9) {
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__5, NULL);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 684, __pyx_L4_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_12);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XGOTREF(__pyx_r);
              if (likely(__pyx_r)) {
                __Pyx_XGIVEREF(__pyx_t_1);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                __Pyx_XGIVEREF(__pyx_t_2);
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
                __Pyx_XGIVEREF(__pyx_t_3);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
                __Pyx_XGIVEREF(__pyx_t_9);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_9;
                __Pyx_XGIVEREF(__pyx_t_12);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_12;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                /* return from generator, awaiting value */
                __pyx_generator->resume_label = 4;
                return __pyx_r;
                __pyx_L32_resume_from_await:;
                __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_1);
                __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
                __pyx_cur_scope->__pyx_t_1 = 0;
                __Pyx_XGOTREF(__pyx_t_2);
                __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_3);
                __pyx_t_9 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_9);
                __pyx_t_12 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_12);
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 684, __pyx_L4_error)
                __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
              } else {
                __pyx_t_5 = NULL;
                if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 684, __pyx_L4_error)
                __Pyx_GOTREF(__pyx_t_5);
              }
              __pyx_t_12 = __pyx_t_5;
              __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            goto __pyx_L16;
          }
          __pyx_L16:;
        }
        goto __pyx_L33;
        __pyx_L12_error:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L4_error;
        __pyx_L33:;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":679
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):
 *         try:             # <<<<<<<<<<<<<<
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":706
 *                         self._account_available_balances[token_symbol] = Decimal(0)
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Could not set balance {repr(e)}")
 * 
 */
    __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_16) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._set_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 706, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_v_e = __pyx_t_4;
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":707
 * 
 *         except Exception as e:
 *             self.logger().error(f"Could not set balance {repr(e)}")             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_21 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
          }
        }
        __pyx_t_17 = (__pyx_t_21) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_21) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_error); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyObject_Repr(__pyx_cur_scope->__pyx_v_e); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_21 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_empty_unicode); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Could_not_set_balance, __pyx_t_21); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __pyx_t_21 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
          }
        }
        __pyx_t_15 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_21, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_17);
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 707, __pyx_L39_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":706
 *                         self._account_available_balances[token_symbol] = Decimal(0)
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             self.logger().error(f"Could not set balance {repr(e)}")
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
          __pyx_cur_scope->__pyx_v_e = NULL;
          goto __pyx_L40;
        }
        __pyx_L39_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_assign
          __pyx_t_9 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_18 = 0; __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_18, &__pyx_t_24);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_12, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_24);
          __pyx_t_16 = __pyx_lineno; __pyx_t_22 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
          {
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
            __pyx_cur_scope->__pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_18, __pyx_t_24);
          }
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ErrRestore(__pyx_t_9, __pyx_t_12, __pyx_t_11);
          __pyx_t_9 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_18 = 0; __pyx_t_24 = 0;
          __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_22; __pyx_filename = __pyx_t_23;
          goto __pyx_L6_except_error;
        }
        __pyx_L40:;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":679
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):
 *         try:             # <<<<<<<<<<<<<<
 *             tokens = set(self.token_configuration.get_tokens())
 *             if len(tokens) == 0:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L9_try_end:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":678
 *                 self.c_stop_tracking_order(tracked_order.client_order_id)
 * 
 *     async def _set_balances(self, updates, is_snapshot=True):             # <<<<<<<<<<<<<<
 *         try:
 *             tokens = set(self.token_configuration.get_tokens())
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("_set_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_55generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":712
 *     # User stream updates
 * 
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_54_iter_user_event_queue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_54_iter_user_event_queue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_user_event_queue (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_53_iter_user_event_queue(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_53_iter_user_event_queue(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_user_event_queue", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 712, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_AsyncGen_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_55generator14, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_user_event_queue, __pyx_n_s_LoopringExchange__iter_user_even, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._iter_user_event_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_55generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_user_event_queue", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_yield;
    case 3: goto __pyx_L20_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 712, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":713
 * 
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()
 */
  while (1) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":714
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":715
 *         while True:
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()             # <<<<<<<<<<<<<<
 *             except asyncio.CancelledError:
 *                 raise
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker, __pyx_n_s_user_stream); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 715, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from async generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 715, __pyx_L6_error)
          __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
        } else {
          __pyx_t_4 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 715, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from async generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __Pyx__PyAsyncGenValueWrapperNew(__pyx_r);
        __pyx_L15_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 715, __pyx_L6_error)

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":714
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":716
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 716, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 716, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_5);
      __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
      if (__pyx_t_9) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._iter_user_event_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 716, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":717
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network(
 */
        __Pyx_GIVEREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_4);
        __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 717, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":718
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network(
 *                     "Unknown error. Retrying after 1 seconds.",
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._iter_user_event_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 718, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":719
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unknown error. Retrying after 1 seconds.",
 *                     exc_info=True,
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 719, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_network); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":721
 *                 self.logger().network(
 *                     "Unknown error. Retrying after 1 seconds.",
 *                     exc_info=True,             # <<<<<<<<<<<<<<
 *                     app_warning_msg="Could not fetch user events from Loopring. Check API key and network connection."
 *                 )
 */
        __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 721, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 721, __pyx_L8_except_error)
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_app_warning_msg, __pyx_kp_u_Could_not_fetch_user_events_from) < 0) __PYX_ERR(0, 721, __pyx_L8_except_error)

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":719
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unknown error. Retrying after 1 seconds.",
 *                     exc_info=True,
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__22, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 719, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":724
 *                     app_warning_msg="Could not fetch user events from Loopring. Check API key and network connection."
 *                 )
 *                 await asyncio.sleep(1.0)             # <<<<<<<<<<<<<<
 * 
 *     async def _user_stream_event_listener(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 724, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_sleep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 724, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_10 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_float_1_0) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_float_1_0);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 724, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from async generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 724, __pyx_L8_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 724, __pyx_L8_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":714
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":712
 *     # User stream updates
 * 
 *     async def _iter_user_event_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_iter_user_event_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_58generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":726
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for event_message in self._iter_user_event_queue():
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_57_user_stream_event_listener(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_57_user_stream_event_listener(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_user_stream_event_listener (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_56_user_stream_event_listener(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_56_user_stream_event_listener(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_user_stream_event_listener", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 726, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_58generator15, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_user_stream_event_listener, __pyx_n_s_LoopringExchange__user_stream_ev, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_58generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_user_stream_event_listener", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_await;
    case 2: goto __pyx_L16_resume_from_await;
    case 3: goto __pyx_L22_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 726, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":727
 * 
 *     async def _user_stream_event_listener(self):
 *         async for event_message in self._iter_user_event_queue():             # <<<<<<<<<<<<<<
 *             try:
 *                 event: Dict[str, Any] = event_message
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_iter_user_event_queue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Coroutine_GetAsyncIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    __pyx_t_1 = __Pyx_Coroutine_AsyncIterNext(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L6_resume_from_await:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      if (unlikely(!__pyx_sent_value)) {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || ( exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {
          PyErr_Clear();
          break;
        }
        __PYX_ERR(0, 727, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || ( exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {
        PyErr_Clear();
        break;
      }
      __pyx_t_1 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_event_message);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_event_message, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":728
 *     async def _user_stream_event_listener(self):
 *         async for event_message in self._iter_user_event_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 event: Dict[str, Any] = event_message
 *                 topic: str = event['topic']['topic']
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":729
 *         async for event_message in self._iter_user_event_queue():
 *             try:
 *                 event: Dict[str, Any] = event_message             # <<<<<<<<<<<<<<
 *                 topic: str = event['topic']['topic']
 *                 data: Dict[str, Any] = event['data']
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_event_message);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_event);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_event, __pyx_cur_scope->__pyx_v_event_message);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_event_message);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":730
 *             try:
 *                 event: Dict[str, Any] = event_message
 *                 topic: str = event['topic']['topic']             # <<<<<<<<<<<<<<
 *                 data: Dict[str, Any] = event['data']
 *                 if topic == 'account':
 */
        __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_event, __pyx_n_u_topic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_topic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 730, __pyx_L7_error)
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_topic);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_topic, ((PyObject*)__pyx_t_3));
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":731
 *                 event: Dict[str, Any] = event_message
 *                 topic: str = event['topic']['topic']
 *                 data: Dict[str, Any] = event['data']             # <<<<<<<<<<<<<<
 *                 if topic == 'account':
 *                     data['total'] = data['totalAmount']
 */
        __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_event, __pyx_n_u_data); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_data);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":732
 *                 topic: str = event['topic']['topic']
 *                 data: Dict[str, Any] = event['data']
 *                 if topic == 'account':             # <<<<<<<<<<<<<<
 *                     data['total'] = data['totalAmount']
 *                     data['locked'] = data['amountLocked']
 */
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_topic, __pyx_n_u_account, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 732, __pyx_L7_error)
        __pyx_t_8 = (__pyx_t_7 != 0);
        if (__pyx_t_8) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":733
 *                 data: Dict[str, Any] = event['data']
 *                 if topic == 'account':
 *                     data['total'] = data['totalAmount']             # <<<<<<<<<<<<<<
 *                     data['locked'] = data['amountLocked']
 *                     await self._set_balances([data], is_snapshot=False)
 */
          __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_totalAmount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_total, __pyx_t_3) < 0)) __PYX_ERR(0, 733, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":734
 *                 if topic == 'account':
 *                     data['total'] = data['totalAmount']
 *                     data['locked'] = data['amountLocked']             # <<<<<<<<<<<<<<
 *                     await self._set_balances([data], is_snapshot=False)
 *                 elif topic == 'order':
 */
          __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_amountLocked); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_locked, __pyx_t_3) < 0)) __PYX_ERR(0, 734, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":735
 *                     data['total'] = data['totalAmount']
 *                     data['locked'] = data['amountLocked']
 *                     await self._set_balances([data], is_snapshot=False)             # <<<<<<<<<<<<<<
 *                 elif topic == 'order':
 *                     client_order_id: str = data['clientOrderId']
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_set_balances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_data);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_data);
          PyList_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_data);
          __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_snapshot, Py_False) < 0) __PYX_ERR(0, 735, __pyx_L7_error)
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 735, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_2);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
            __Pyx_XGIVEREF(__pyx_t_4);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_6);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 2;
            return __pyx_r;
            __pyx_L16_resume_from_await:;
            __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_2);
            __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_6);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 735, __pyx_L7_error)
          } else {
            PyObject* exc_type = __Pyx_PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
              else __PYX_ERR(0, 735, __pyx_L7_error)
            }
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":732
 *                 topic: str = event['topic']['topic']
 *                 data: Dict[str, Any] = event['data']
 *                 if topic == 'account':             # <<<<<<<<<<<<<<
 *                     data['total'] = data['totalAmount']
 *                     data['locked'] = data['amountLocked']
 */
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":736
 *                     data['locked'] = data['amountLocked']
 *                     await self._set_balances([data], is_snapshot=False)
 *                 elif topic == 'order':             # <<<<<<<<<<<<<<
 *                     client_order_id: str = data['clientOrderId']
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)
 */
        __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_topic, __pyx_n_u_order_2, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 736, __pyx_L7_error)
        __pyx_t_7 = (__pyx_t_8 != 0);
        if (__pyx_t_7) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":737
 *                     await self._set_balances([data], is_snapshot=False)
 *                 elif topic == 'order':
 *                     client_order_id: str = data['clientOrderId']             # <<<<<<<<<<<<<<
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)
 * 
 */
          __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_clientOrderId); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 737, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 737, __pyx_L7_error)
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_client_order_id);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_client_order_id, ((PyObject*)__pyx_t_10));
          __Pyx_GIVEREF(__pyx_t_10);
          __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":738
 *                 elif topic == 'order':
 *                     client_order_id: str = data['clientOrderId']
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)             # <<<<<<<<<<<<<<
 * 
 *                     if tracked_order is None:
 */
          if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 738, __pyx_L7_error)
          }
          __pyx_t_10 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_client_order_id, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 738, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder))))) __PYX_ERR(0, 738, __pyx_L7_error)
          __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order));
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder *)__pyx_t_10));
          __Pyx_GIVEREF(__pyx_t_10);
          __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":740
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)
 * 
 *                     if tracked_order is None:             # <<<<<<<<<<<<<<
 *                         self.logger().debug(f"Unrecognized order ID from user stream: {client_order_id}.")
 *                         self.logger().debug(f"Event: {event_message}")
 */
          __pyx_t_7 = (((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order) == Py_None);
          __pyx_t_8 = (__pyx_t_7 != 0);
          if (__pyx_t_8) {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":741
 * 
 *                     if tracked_order is None:
 *                         self.logger().debug(f"Unrecognized order ID from user stream: {client_order_id}.")             # <<<<<<<<<<<<<<
 *                         self.logger().debug(f"Event: {event_message}")
 *                         continue
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
              }
            }
            __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_debug); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_11 = 0;
            __pyx_t_12 = 127;
            __Pyx_INCREF(__pyx_kp_u_Unrecognized_order_ID_from_user);
            __pyx_t_11 += 40;
            __Pyx_GIVEREF(__pyx_kp_u_Unrecognized_order_ID_from_user);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Unrecognized_order_ID_from_user);
            __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_12;
            __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u__14);
            __pyx_t_11 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__14);
            PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__14);
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
              }
            }
            __pyx_t_10 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 741, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":742
 *                     if tracked_order is None:
 *                         self.logger().debug(f"Unrecognized order ID from user stream: {client_order_id}.")
 *                         self.logger().debug(f"Event: {event_message}")             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_debug); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_event_message, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Event_2, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 742, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":743
 *                         self.logger().debug(f"Unrecognized order ID from user stream: {client_order_id}.")
 *                         self.logger().debug(f"Event: {event_message}")
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     # update the tracked order
 */
            goto __pyx_L13_try_continue;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":740
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)
 * 
 *                     if tracked_order is None:             # <<<<<<<<<<<<<<
 *                         self.logger().debug(f"Unrecognized order ID from user stream: {client_order_id}.")
 *                         self.logger().debug(f"Event: {event_message}")
 */
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":746
 * 
 *                     # update the tracked order
 *                     self._update_inflight_order(tracked_order, data)             # <<<<<<<<<<<<<<
 *                 elif topic == 'sub':
 *                     pass
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_inflight_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = NULL;
          __pyx_t_13 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_13 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_1, ((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order), __pyx_cur_scope->__pyx_v_data};
            __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L7_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_10);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[3] = {__pyx_t_1, ((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order), __pyx_cur_scope->__pyx_v_data};
            __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L7_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_10);
          } else
          #endif
          {
            __pyx_t_9 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_9);
            if (__pyx_t_1) {
              __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
            }
            __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order));
            __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order));
            PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_13, ((PyObject *)__pyx_cur_scope->__pyx_v_tracked_order));
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_data);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_data);
            PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_13, __pyx_cur_scope->__pyx_v_data);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":736
 *                     data['locked'] = data['amountLocked']
 *                     await self._set_balances([data], is_snapshot=False)
 *                 elif topic == 'order':             # <<<<<<<<<<<<<<
 *                     client_order_id: str = data['clientOrderId']
 *                     tracked_order: LoopringInFlightOrder = self._in_flight_orders.get(client_order_id)
 */
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":747
 *                     # update the tracked order
 *                     self._update_inflight_order(tracked_order, data)
 *                 elif topic == 'sub':             # <<<<<<<<<<<<<<
 *                     pass
 *                 elif topic == 'unsub':
 */
        __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_topic, __pyx_n_u_sub, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 747, __pyx_L7_error)
        __pyx_t_7 = (__pyx_t_8 != 0);
        if (__pyx_t_7) {
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":749
 *                 elif topic == 'sub':
 *                     pass
 *                 elif topic == 'unsub':             # <<<<<<<<<<<<<<
 *                     pass
 *                 else:
 */
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_topic, __pyx_n_u_unsub, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 749, __pyx_L7_error)
        __pyx_t_8 = (__pyx_t_7 != 0);
        if (__pyx_t_8) {
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":752
 *                     pass
 *                 else:
 *                     self.logger().debug(f"Unrecognized user stream event topic: {topic}.")             # <<<<<<<<<<<<<<
 * 
 *             except asyncio.CancelledError:
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_debug); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = 0;
          __pyx_t_12 = 127;
          __Pyx_INCREF(__pyx_kp_u_Unrecognized_user_stream_event_t);
          __pyx_t_11 += 38;
          __Pyx_GIVEREF(__pyx_kp_u_Unrecognized_user_stream_event_t);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Unrecognized_user_stream_event_t);
          __pyx_t_1 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_topic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_12;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_INCREF(__pyx_kp_u__14);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__14);
          PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__14);
          __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 752, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_L15:;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":728
 *     async def _user_stream_event_listener(self):
 *         async for event_message in self._iter_user_event_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 event: Dict[str, Any] = event_message
 *                 topic: str = event['topic']['topic']
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":754
 *                     self.logger().debug(f"Unrecognized user stream event topic: {topic}.")
 * 
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 754, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_10, __pyx_t_14);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_9, __pyx_t_1);
      __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_1 = 0;
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 754, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":755
 * 
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 */
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_9, __pyx_t_10);
        __pyx_t_1 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; 
        __PYX_ERR(0, 755, __pyx_L9_except_error)
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":756
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 *                 await asyncio.sleep(5.0)
 */
      __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_13) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_1) < 0) __PYX_ERR(0, 756, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":757
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(5.0)
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_14 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__23, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 757, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":758
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 *                 await asyncio.sleep(5.0)             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------
 */
        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 758, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_sleep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_15 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_14, __pyx_float_5_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_5_0);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 758, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_15);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_10;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L22_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          __pyx_t_10 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_10);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 758, __pyx_L9_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 758, __pyx_L9_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":728
 *     async def _user_stream_event_listener(self):
 *         async for event_message in self._iter_user_event_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 event: Dict[str, Any] = event_message
 *                 topic: str = event['topic']['topic']
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L13_try_continue:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L4_continue;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_L14_try_end:;
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":727
 * 
 *     async def _user_stream_event_listener(self):
 *         async for event_message in self._iter_user_event_queue():             # <<<<<<<<<<<<<<
 *             try:
 *                 event: Dict[str, Any] = event_message
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":726
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for event_message in self._iter_user_event_queue():
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("_user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_61generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":763
 *     # Polling Updates
 * 
 *     async def _polling_update(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_60_polling_update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_60_polling_update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_polling_update (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_59_polling_update(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_59_polling_update(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_polling_update", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 763, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_61generator16, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_polling_update, __pyx_n_s_LoopringExchange__polling_update, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 763, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._polling_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_61generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_polling_update", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 763, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":764
 * 
 *     async def _polling_update(self):
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 */
  while (1) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":765
 *     async def _polling_update(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":766
 *         while True:
 *             try:
 *                 self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *                 await self._poll_notifier.wait()
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Event); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 766, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __pyx_cur_scope->__pyx_v_self->_poll_notifier = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":767
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()             # <<<<<<<<<<<<<<
 * 
 *                 await asyncio.gather(
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_poll_notifier, __pyx_n_s_wait); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 767, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 767, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 767, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 767, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":769
 *                 await self._poll_notifier.wait()
 * 
 *                 await asyncio.gather(             # <<<<<<<<<<<<<<
 *                     self._update_balances(),
 *                     self._update_trading_rules(),
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 769, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_gather); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":770
 * 
 *                 await asyncio.gather(
 *                     self._update_balances(),             # <<<<<<<<<<<<<<
 *                     self._update_trading_rules(),
 *                     self._update_order_status(),
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_balances); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":771
 *                 await asyncio.gather(
 *                     self._update_balances(),
 *                     self._update_trading_rules(),             # <<<<<<<<<<<<<<
 *                     self._update_order_status(),
 *                 )
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_trading_rules); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 771, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 771, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":772
 *                     self._update_balances(),
 *                     self._update_trading_rules(),
 *                     self._update_order_status(),             # <<<<<<<<<<<<<<
 *                 )
 *             except asyncio.CancelledError:
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_order_status); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 772, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 772, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_11 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_6, __pyx_t_7, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 769, __pyx_L6_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_6, __pyx_t_7, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 769, __pyx_L6_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 769, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (__pyx_t_9) {
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_11, __pyx_t_8);
          __pyx_t_6 = 0;
          __pyx_t_7 = 0;
          __pyx_t_8 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 769, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L15_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 769, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 769, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":765
 *     async def _polling_update(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":774
 *                     self._update_order_status(),
 *                 )
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception as e:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_10);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 774, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 774, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_10);
      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_10 = 0;
      if (__pyx_t_11) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._polling_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 774, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":775
 *                 )
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception as e:
 *                 self.logger().warning("Failed to fetch updates on Loopring. Check network connection.")
 */
        __Pyx_GIVEREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_10, __pyx_t_5, __pyx_t_4);
        __pyx_t_10 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 775, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":776
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 self.logger().warning("Failed to fetch updates on Loopring. Check network connection.")
 *                 self.logger().info(e)
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_11) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._polling_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_10) < 0) __PYX_ERR(0, 776, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_cur_scope->__pyx_v_e = __pyx_t_5;
        /*try:*/ {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":777
 *                 raise
 *             except Exception as e:
 *                 self.logger().warning("Failed to fetch updates on Loopring. Check network connection.")             # <<<<<<<<<<<<<<
 *                 self.logger().info(e)
 * 
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_warning); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_kp_u_Failed_to_fetch_updates_on_Loopr) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_Failed_to_fetch_updates_on_Loopr);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":778
 *             except Exception as e:
 *                 self.logger().warning("Failed to fetch updates on Loopring. Check network connection.")
 *                 self.logger().info(e)             # <<<<<<<<<<<<<<
 * 
 *     async def _update_balances(self):
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 778, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 778, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 778, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_6, __pyx_cur_scope->__pyx_v_e) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_cur_scope->__pyx_v_e);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 778, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":776
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 self.logger().warning("Failed to fetch updates on Loopring. Check network connection.")
 *                 self.logger().info(e)
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
            __pyx_cur_scope->__pyx_v_e = NULL;
            goto __pyx_L24;
          }
          __pyx_L23_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_assign
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_11 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
            {
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
              __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
              __pyx_cur_scope->__pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
            __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
            __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
            goto __pyx_L8_except_error;
          }
          __pyx_L24:;
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":765
 *     async def _polling_update(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":763
 *     # Polling Updates
 * 
 *     async def _polling_update(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_polling_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_64generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":780
 *                 self.logger().info(e)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         balances_response = await self.api_request("GET", f"{BALANCES_INFO_ROUTE}?accountId={self._loopring_accountid}")
 *         await self._set_balances(balances_response)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_63_update_balances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_63_update_balances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_62_update_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_62_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 780, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_64generator17, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_balances, __pyx_n_s_LoopringExchange__update_balance, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_64generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    case 2: goto __pyx_L5_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 780, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":781
 * 
 *     async def _update_balances(self):
 *         balances_response = await self.api_request("GET", f"{BALANCES_INFO_ROUTE}?accountId={self._loopring_accountid}")             # <<<<<<<<<<<<<<
 *         await self._set_balances(balances_response)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BALANCES_INFO_ROUTE); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_accountId_2);
  __pyx_t_4 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_accountId_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u_accountId_2);
  __pyx_t_7 = __Pyx_PyUnicode_From_int(__pyx_cur_scope->__pyx_v_self->_loopring_accountid, 0, ' ', 'd'); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_GET, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_u_GET, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_n_u_GET);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_8, __pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_8, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 781, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_balances_response = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":782
 *     async def _update_balances(self):
 *         balances_response = await self.api_request("GET", f"{BALANCES_INFO_ROUTE}?accountId={self._loopring_accountid}")
 *         await self._set_balances(balances_response)             # <<<<<<<<<<<<<<
 * 
 *     async def _update_trading_rules(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_set_balances); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_cur_scope->__pyx_v_balances_response) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_balances_response);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 2;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 782, __pyx_L1_error)
  } else {
    PyObject* exc_type = __Pyx_PyErr_Occurred();
    if (exc_type) {
      if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
      else __PYX_ERR(0, 782, __pyx_L1_error)
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":780
 *                 self.logger().info(e)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         balances_response = await self.api_request("GET", f"{BALANCES_INFO_ROUTE}?accountId={self._loopring_accountid}")
 *         await self._set_balances(balances_response)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_update_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_67generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":784
 *         await self._set_balances(balances_response)
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         markets_info, tokens_info = await asyncio.gather(
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_66_update_trading_rules(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_66_update_trading_rules(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_65_update_trading_rules(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_65_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 784, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_67generator18, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_trading_rules, __pyx_n_s_LoopringExchange__update_trading, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_67generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 784, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":785
 * 
 *     async def _update_trading_rules(self):
 *         markets_info, tokens_info = await asyncio.gather(             # <<<<<<<<<<<<<<
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 *             self.api_request("GET", TOKENS_INFO_ROUTE)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gather); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":786
 *     async def _update_trading_rules(self):
 *         markets_info, tokens_info = await asyncio.gather(
 *             self.api_request("GET", MARKETS_INFO_ROUTE),             # <<<<<<<<<<<<<<
 *             self.api_request("GET", TOKENS_INFO_ROUTE)
 *         )
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_MARKETS_INFO_ROUTE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_GET, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_GET, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_n_u_GET);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":787
 *         markets_info, tokens_info = await asyncio.gather(
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 *             self.api_request("GET", TOKENS_INFO_ROUTE)             # <<<<<<<<<<<<<<
 *         )
 *         # Loopring fees not available from api
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TOKENS_INFO_ROUTE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_GET, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_GET, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_n_u_GET);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_n_u_GET);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 785, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 785, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_9);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_9 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_9);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_4), 2) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 785, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":785
 * 
 *     async def _update_trading_rules(self):
 *         markets_info, tokens_info = await asyncio.gather(             # <<<<<<<<<<<<<<
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 *             self.api_request("GET", TOKENS_INFO_ROUTE)
 */
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_markets_info = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_cur_scope->__pyx_v_tokens_info = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":791
 *         # Loopring fees not available from api
 * 
 *         tokens_info = {t['tokenId']: t for t in tokens_info}             # <<<<<<<<<<<<<<
 * 
 *         for market in markets_info['markets']:
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_tokens_info)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_tokens_info)) {
      __pyx_t_9 = __pyx_cur_scope->__pyx_v_tokens_info; __Pyx_INCREF(__pyx_t_9); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_tokens_info); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 791, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 791, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_3); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 791, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_12(__pyx_t_9);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 791, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_t);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_t, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_t, __pyx_n_u_tokenId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_3, (PyObject*)__pyx_cur_scope->__pyx_8genexpr3__pyx_v_t))) __PYX_ERR(0, 791, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } /* exit inner scope */
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tokens_info);
  __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":793
 *         tokens_info = {t['tokenId']: t for t in tokens_info}
 * 
 *         for market in markets_info['markets']:             # <<<<<<<<<<<<<<
 *             if market['enabled'] is True:
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_markets_info, __pyx_n_u_markets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9); __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 793, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_11); __Pyx_INCREF(__pyx_t_1); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_12(__pyx_t_9);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 793, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_market);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_market, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":794
 * 
 *         for market in markets_info['markets']:
 *             if market['enabled'] is True:             # <<<<<<<<<<<<<<
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_enabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = (__pyx_t_1 == Py_True);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = (__pyx_t_13 != 0);
    if (__pyx_t_14) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":795
 *         for market in markets_info['markets']:
 *             if market['enabled'] is True:
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']             # <<<<<<<<<<<<<<
 * 
 *                 try:
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_baseTokenId); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_quoteTokenId); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_baseid);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_baseid, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_quoteid);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_quoteid, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":797
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._trading_rules[market["market"]] = TradingRule(
 *                         trading_pair=market["market"],
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_17);
        /*try:*/ {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":799
 *                 try:
 *                     self._trading_rules[market["market"]] = TradingRule(
 *                         trading_pair=market["market"],             # <<<<<<<<<<<<<<
 *                         min_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['minimum'], baseid),
 *                         max_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['maximum'], baseid),
 */
          __pyx_t_3 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pair, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":800
 *                     self._trading_rules[market["market"]] = TradingRule(
 *                         trading_pair=market["market"],
 *                         min_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['minimum'], baseid),             # <<<<<<<<<<<<<<
 *                         max_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['maximum'], baseid),
 *                         min_price_increment=Decimal(f"1e-{market['precisionForPrice']}"),
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_unpad); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 800, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_cur_scope->__pyx_v_baseid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_orderAmounts); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 800, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_u_minimum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_7 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_4, __pyx_cur_scope->__pyx_v_baseid};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_4, __pyx_cur_scope->__pyx_v_baseid};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 800, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (__pyx_t_8) {
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_t_4);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_baseid);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_baseid);
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_cur_scope->__pyx_v_baseid);
            __pyx_t_4 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_order_size, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":801
 *                         trading_pair=market["market"],
 *                         min_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['minimum'], baseid),
 *                         max_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['maximum'], baseid),             # <<<<<<<<<<<<<<
 *                         min_price_increment=Decimal(f"1e-{market['precisionForPrice']}"),
 *                         min_base_amount_increment=Decimal(f"1e-{tokens_info[baseid]['precision']}"),
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unpad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 801, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_cur_scope->__pyx_v_baseid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_orderAmounts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 801, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_maximum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 801, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_7 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_2, __pyx_cur_scope->__pyx_v_baseid};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_2, __pyx_cur_scope->__pyx_v_baseid};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 801, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_2);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_baseid);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_baseid);
            PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_cur_scope->__pyx_v_baseid);
            __pyx_t_2 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_max_order_size, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":802
 *                         min_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['minimum'], baseid),
 *                         max_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['maximum'], baseid),
 *                         min_price_increment=Decimal(f"1e-{market['precisionForPrice']}"),             # <<<<<<<<<<<<<<
 *                         min_base_amount_increment=Decimal(f"1e-{tokens_info[baseid]['precision']}"),
 *                         min_quote_amount_increment=Decimal(f"1e-{tokens_info[quoteid]['precision']}"),
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_precisionForPrice); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 802, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 802, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_price_increment, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":803
 *                         max_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['maximum'], baseid),
 *                         min_price_increment=Decimal(f"1e-{market['precisionForPrice']}"),
 *                         min_base_amount_increment=Decimal(f"1e-{tokens_info[baseid]['precision']}"),             # <<<<<<<<<<<<<<
 *                         min_quote_amount_increment=Decimal(f"1e-{tokens_info[quoteid]['precision']}"),
 *                         min_notional_size = self.token_configuration.unpad(tokens_info[quoteid]['orderAmounts']['minimum'], quoteid),
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_cur_scope->__pyx_v_baseid); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_n_u_precision); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_base_amount_increment, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":804
 *                         min_price_increment=Decimal(f"1e-{market['precisionForPrice']}"),
 *                         min_base_amount_increment=Decimal(f"1e-{tokens_info[baseid]['precision']}"),
 *                         min_quote_amount_increment=Decimal(f"1e-{tokens_info[quoteid]['precision']}"),             # <<<<<<<<<<<<<<
 *                         min_notional_size = self.token_configuration.unpad(tokens_info[quoteid]['orderAmounts']['minimum'], quoteid),
 *                         supports_limit_orders = True,
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_cur_scope->__pyx_v_quoteid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_precision); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_quote_amount_increment, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":805
 *                         min_base_amount_increment=Decimal(f"1e-{tokens_info[baseid]['precision']}"),
 *                         min_quote_amount_increment=Decimal(f"1e-{tokens_info[quoteid]['precision']}"),
 *                         min_notional_size = self.token_configuration.unpad(tokens_info[quoteid]['orderAmounts']['minimum'], quoteid),             # <<<<<<<<<<<<<<
 *                         supports_limit_orders = True,
 *                         supports_market_orders = False
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_token_configuration); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 805, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_unpad); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 805, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_tokens_info, __pyx_cur_scope->__pyx_v_quoteid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 805, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_orderAmounts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_minimum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 805, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_7 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_7 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_cur_scope->__pyx_v_quoteid};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_cur_scope->__pyx_v_quoteid};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L12_error)
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          {
            __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_t_5);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_quoteid);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_quoteid);
            PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_cur_scope->__pyx_v_quoteid);
            __pyx_t_5 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_min_notional_size, __pyx_t_1) < 0) __PYX_ERR(0, 799, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":806
 *                         min_quote_amount_increment=Decimal(f"1e-{tokens_info[quoteid]['precision']}"),
 *                         min_notional_size = self.token_configuration.unpad(tokens_info[quoteid]['orderAmounts']['minimum'], quoteid),
 *                         supports_limit_orders = True,             # <<<<<<<<<<<<<<
 *                         supports_market_orders = False
 *                     )
 */
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_supports_limit_orders, Py_True) < 0) __PYX_ERR(0, 799, __pyx_L12_error)

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":807
 *                         min_notional_size = self.token_configuration.unpad(tokens_info[quoteid]['orderAmounts']['minimum'], quoteid),
 *                         supports_limit_orders = True,
 *                         supports_market_orders = False             # <<<<<<<<<<<<<<
 *                     )
 *                 except Exception as e:
 */
          if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_supports_market_orders, Py_False) < 0) __PYX_ERR(0, 799, __pyx_L12_error)

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":798
 * 
 *                 try:
 *                     self._trading_rules[market["market"]] = TradingRule(             # <<<<<<<<<<<<<<
 *                         trading_pair=market["market"],
 *                         min_order_size = self.token_configuration.unpad(tokens_info[baseid]['orderAmounts']['minimum'], baseid),
 */
          __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 798, __pyx_L12_error)
          }
          __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_market, __pyx_n_u_market); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 798, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":797
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._trading_rules[market["market"]] = TradingRule(
 *                         trading_pair=market["market"],
 */
        }
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        goto __pyx_L19_try_end;
        __pyx_L12_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":809
 *                         supports_market_orders = False
 *                     )
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().debug("Error updating trading rules")
 *                     self.logger().debug(str(e))
 */
        __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_7) {
          __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_8) < 0) __PYX_ERR(0, 809, __pyx_L14_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_v_e = __pyx_t_3;
          /*try:*/ {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":810
 *                     )
 *                 except Exception as e:
 *                     self.logger().debug("Error updating trading rules")             # <<<<<<<<<<<<<<
 *                     self.logger().debug(str(e))
 * 
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 810, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_debug); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_kp_u_Error_updating_trading_rules) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_Error_updating_trading_rules);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 810, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":811
 *                 except Exception as e:
 *                     self.logger().debug("Error updating trading rules")
 *                     self.logger().debug(str(e))             # <<<<<<<<<<<<<<
 * 
 *     async def _update_order_status(self):
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 811, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_debug); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 811, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_cur_scope->__pyx_v_e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 811, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":809
 *                         supports_market_orders = False
 *                     )
 *                 except Exception as e:             # <<<<<<<<<<<<<<
 *                     self.logger().debug("Error updating trading rules")
 *                     self.logger().debug(str(e))
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
              __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
              __pyx_cur_scope->__pyx_v_e = NULL;
              goto __pyx_L26;
            }
            __pyx_L25_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_assign
              __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_23);
              __Pyx_XGOTREF(__pyx_t_24);
              __Pyx_XGOTREF(__pyx_t_25);
              __pyx_t_7 = __pyx_lineno; __pyx_t_18 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
              {
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
                __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
                __pyx_cur_scope->__pyx_v_e = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_23);
                __Pyx_XGIVEREF(__pyx_t_24);
                __Pyx_XGIVEREF(__pyx_t_25);
                __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
              }
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
              __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
              __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_18; __pyx_filename = __pyx_t_19;
              goto __pyx_L14_except_error;
            }
            __pyx_L26:;
          }
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L13_exception_handled;
        }
        goto __pyx_L14_except_error;
        __pyx_L14_except_error:;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":797
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 * 
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._trading_rules[market["market"]] = TradingRule(
 *                         trading_pair=market["market"],
 */
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        goto __pyx_L1_error;
        __pyx_L13_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        __pyx_L19_try_end:;
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":794
 * 
 *         for market in markets_info['markets']:
 *             if market['enabled'] is True:             # <<<<<<<<<<<<<<
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 * 
 */
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":793
 *         tokens_info = {t['tokenId']: t for t in tokens_info}
 * 
 *         for market in markets_info['markets']:             # <<<<<<<<<<<<<<
 *             if market['enabled'] is True:
 *                 baseid, quoteid = market['baseTokenId'], market['quoteTokenId']
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":784
 *         await self._set_balances(balances_response)
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         markets_info, tokens_info = await asyncio.gather(
 *             self.api_request("GET", MARKETS_INFO_ROUTE),
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("_update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_70generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":813
 *                     self.logger().debug(str(e))
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         tracked_orders = self._in_flight_orders.copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_69_update_order_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_69_update_order_status(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_order_status (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_68_update_order_status(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_68_update_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_order_status", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 813, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_70generator19, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_order_status, __pyx_n_s_LoopringExchange__update_order_s, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_70generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  Py_UCS4 __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int64_t __pyx_t_21;
  int __pyx_t_22;
  char const *__pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_order_status", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L16_resume_from_await;
    case 2: goto __pyx_L25_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 813, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":814
 * 
 *     async def _update_order_status(self):
 *         tracked_orders = self._in_flight_orders.copy()             # <<<<<<<<<<<<<<
 * 
 *         for client_order_id, tracked_order in tracked_orders.iteritems():
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "copy");
    __PYX_ERR(0, 814, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_cur_scope->__pyx_v_self->_in_flight_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_tracked_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":816
 *         tracked_orders = self._in_flight_orders.copy()
 * 
 *         for client_order_id, tracked_order in tracked_orders.iteritems():             # <<<<<<<<<<<<<<
 *             loopring_order_id = tracked_order.exchange_order_id
 *             if loopring_order_id is None:
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_cur_scope->__pyx_v_tracked_orders == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 816, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_tracked_orders, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_client_order_id);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":817
 * 
 *         for client_order_id, tracked_order in tracked_orders.iteritems():
 *             loopring_order_id = tracked_order.exchange_order_id             # <<<<<<<<<<<<<<
 *             if loopring_order_id is None:
 *                 # Thisorderisstillpendingacknowledgementfromtheexchange
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_loopring_order_id);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_loopring_order_id, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":818
 *         for client_order_id, tracked_order in tracked_orders.iteritems():
 *             loopring_order_id = tracked_order.exchange_order_id
 *             if loopring_order_id is None:             # <<<<<<<<<<<<<<
 *                 # Thisorderisstillpendingacknowledgementfromtheexchange
 *                 if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 */
    __pyx_t_8 = (__pyx_cur_scope->__pyx_v_loopring_order_id == Py_None);
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":820
 *             if loopring_order_id is None:
 *                 # Thisorderisstillpendingacknowledgementfromtheexchange
 *                 if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                     # this order should have a loopring_order_id at this point. If it doesn't, we should cancel it
 *                     # as we won't be able to poll for updates
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_created_at); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_time); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_time); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = PyNumber_Subtract(__pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_9) {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":823
 *                     # this order should have a loopring_order_id at this point. If it doesn't, we should cancel it
 *                     # as we won't be able to poll for updates
 *                     try:             # <<<<<<<<<<<<<<
 *                         await self.cancel_order(client_order_id)
 *                     except Exception:
 */
        {
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":824
 *                     # as we won't be able to poll for updates
 *                     try:
 *                         await self.cancel_order(client_order_id)             # <<<<<<<<<<<<<<
 *                     except Exception:
 *                         pass
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_cancel_order); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 824, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_6, __pyx_cur_scope->__pyx_v_client_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_cur_scope->__pyx_v_client_order_id);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 824, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_1);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
              __Pyx_XGIVEREF(__pyx_t_12);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_12;
              __Pyx_XGIVEREF(__pyx_t_13);
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_13;
              __Pyx_XGIVEREF(__pyx_t_14);
              __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 1;
              return __pyx_r;
              __pyx_L16_resume_from_await:;
              __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_1);
              __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
              __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
              __pyx_t_12 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_12);
              __pyx_t_13 = __pyx_cur_scope->__pyx_t_5;
              __pyx_cur_scope->__pyx_t_5 = 0;
              __Pyx_XGOTREF(__pyx_t_13);
              __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
              __pyx_cur_scope->__pyx_t_6 = 0;
              __Pyx_XGOTREF(__pyx_t_14);
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 824, __pyx_L8_error)
            } else {
              PyObject* exc_type = __Pyx_PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
                else __PYX_ERR(0, 824, __pyx_L8_error)
              }
            }

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":823
 *                     # this order should have a loopring_order_id at this point. If it doesn't, we should cancel it
 *                     # as we won't be able to poll for updates
 *                     try:             # <<<<<<<<<<<<<<
 *                         await self.cancel_order(client_order_id)
 *                     except Exception:
 */
          }
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L15_try_end;
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":825
 *                     try:
 *                         await self.cancel_order(client_order_id)
 *                     except Exception:             # <<<<<<<<<<<<<<
 *                         pass
 *                 continue
 */
          __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
          if (__pyx_t_7) {
            __Pyx_ErrRestore(0,0,0);
            goto __pyx_L9_exception_handled;
          }
          goto __pyx_L10_except_error;
          __pyx_L10_except_error:;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":823
 *                     # this order should have a loopring_order_id at this point. If it doesn't, we should cancel it
 *                     # as we won't be able to poll for updates
 *                     try:             # <<<<<<<<<<<<<<
 *                         await self.cancel_order(client_order_id)
 *                     except Exception:
 */
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          __pyx_L15_try_end:;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":820
 *             if loopring_order_id is None:
 *                 # Thisorderisstillpendingacknowledgementfromtheexchange
 *                 if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                     # this order should have a loopring_order_id at this point. If it doesn't, we should cancel it
 *                     # as we won't be able to poll for updates
 */
      }

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":827
 *                     except Exception:
 *                         pass
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
      goto __pyx_L4_continue;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":818
 *         for client_order_id, tracked_order in tracked_orders.iteritems():
 *             loopring_order_id = tracked_order.exchange_order_id
 *             if loopring_order_id is None:             # <<<<<<<<<<<<<<
 *                 # Thisorderisstillpendingacknowledgementfromtheexchange
 *                 if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 */
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":829
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 loopring_order_request = await self.api_request("GET",
 *                                                                 GET_ORDER_ROUTE,
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":830
 * 
 *             try:
 *                 loopring_order_request = await self.api_request("GET",             # <<<<<<<<<<<<<<
 *                                                                 GET_ORDER_ROUTE,
 *                                                                 params={
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 830, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":831
 *             try:
 *                 loopring_order_request = await self.api_request("GET",
 *                                                                 GET_ORDER_ROUTE,             # <<<<<<<<<<<<<<
 *                                                                 params={
 *                                                                     "accountId": self._loopring_accountid,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_GET_ORDER_ROUTE); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 831, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":830
 * 
 *             try:
 *                 loopring_order_request = await self.api_request("GET",             # <<<<<<<<<<<<<<
 *                                                                 GET_ORDER_ROUTE,
 *                                                                 params={
 */
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 830, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_n_u_GET);
        __Pyx_GIVEREF(__pyx_n_u_GET);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_u_GET);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":832
 *                 loopring_order_request = await self.api_request("GET",
 *                                                                 GET_ORDER_ROUTE,
 *                                                                 params={             # <<<<<<<<<<<<<<
 *                                                                     "accountId": self._loopring_accountid,
 *                                                                     "orderHash": tracked_order.exchange_order_id
 */
        __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 832, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":833
 *                                                                 GET_ORDER_ROUTE,
 *                                                                 params={
 *                                                                     "accountId": self._loopring_accountid,             # <<<<<<<<<<<<<<
 *                                                                     "orderHash": tracked_order.exchange_order_id
 *                                                                 })
 */
        __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 833, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->_loopring_accountid); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 833, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_accountId, __pyx_t_15) < 0) __PYX_ERR(0, 833, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":834
 *                                                                 params={
 *                                                                     "accountId": self._loopring_accountid,
 *                                                                     "orderHash": tracked_order.exchange_order_id             # <<<<<<<<<<<<<<
 *                                                                 })
 *                 data = loopring_order_request
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 834, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_orderHash, __pyx_t_15) < 0) __PYX_ERR(0, 833, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_params, __pyx_t_11) < 0) __PYX_ERR(0, 832, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":830
 * 
 *             try:
 *                 loopring_order_request = await self.api_request("GET",             # <<<<<<<<<<<<<<
 *                                                                 GET_ORDER_ROUTE,
 *                                                                 params={
 */
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 830, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_12);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_12;
          __Pyx_XGIVEREF(__pyx_t_13);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_13;
          __Pyx_XGIVEREF(__pyx_t_14);
          __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L25_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_t_12 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_12);
          __pyx_t_13 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_13);
          __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
          __pyx_cur_scope->__pyx_t_6 = 0;
          __Pyx_XGOTREF(__pyx_t_14);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 830, __pyx_L17_error)
          __pyx_t_11 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_11);
        } else {
          __pyx_t_11 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_11) < 0) __PYX_ERR(0, 830, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_loopring_order_request);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_loopring_order_request, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":836
 *                                                                     "orderHash": tracked_order.exchange_order_id
 *                                                                 })
 *                 data = loopring_order_request             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().warning(f"Failed to fetch tracked Loopring order "
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_loopring_order_request);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_data);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_cur_scope->__pyx_v_loopring_order_request);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_loopring_order_request);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":829
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 loopring_order_request = await self.api_request("GET",
 *                                                                 GET_ORDER_ROUTE,
 */
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L24_try_end;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":837
 *                                                                 })
 *                 data = loopring_order_request
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().warning(f"Failed to fetch tracked Loopring order "
 *                                       f"{client_order_id }({tracked_order.exchange_order_id}) from api (code: {loopring_order_request})")
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_6) < 0) __PYX_ERR(0, 837, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":838
 *                 data = loopring_order_request
 *             except Exception:
 *                 self.logger().warning(f"Failed to fetch tracked Loopring order "             # <<<<<<<<<<<<<<
 *                                       f"{client_order_id }({tracked_order.exchange_order_id}) from api (code: {loopring_order_request})")
 * 
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        __pyx_t_15 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_warning); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyTuple_New(7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_18 = 0;
        __pyx_t_19 = 127;
        __Pyx_INCREF(__pyx_kp_u_Failed_to_fetch_tracked_Loopring);
        __pyx_t_18 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_Failed_to_fetch_tracked_Loopring);
        PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_Failed_to_fetch_tracked_Loopring);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":839
 *             except Exception:
 *                 self.logger().warning(f"Failed to fetch tracked Loopring order "
 *                                       f"{client_order_id }({tracked_order.exchange_order_id}) from api (code: {loopring_order_request})")             # <<<<<<<<<<<<<<
 * 
 *                 # check if this error is because the api cliams to be unaware of this order. If so, and this order
 */
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 839, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_19;
        __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_18 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u__24);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 839, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 839, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_19;
        __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_INCREF(__pyx_kp_u_from_api_code);
        __pyx_t_18 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_from_api_code);
        PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_kp_u_from_api_code);
        if (unlikely(!__pyx_cur_scope->__pyx_v_loopring_order_request)) { __Pyx_RaiseUnboundLocalError("loopring_order_request"); __PYX_ERR(0, 839, __pyx_L19_except_error) }
        __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_loopring_order_request, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 839, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_19;
        __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_INCREF(__pyx_kp_u__12);
        __pyx_t_18 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__12);
        PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_kp_u__12);

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":838
 *                 data = loopring_order_request
 *             except Exception:
 *                 self.logger().warning(f"Failed to fetch tracked Loopring order "             # <<<<<<<<<<<<<<
 *                                       f"{client_order_id }({tracked_order.exchange_order_id}) from api (code: {loopring_order_request})")
 * 
 */
        __pyx_t_20 = __Pyx_PyUnicode_Join(__pyx_t_15, 7, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_20);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 838, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":843
 *                 # check if this error is because the api cliams to be unaware of this order. If so, and this order
 *                 # is reasonably old, mark the order as cancelled
 *                 print(loopring_order_request)             # <<<<<<<<<<<<<<
 *                 if loopring_order_request['resultInfo']['code'] == 107003:
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 */
        if (unlikely(!__pyx_cur_scope->__pyx_v_loopring_order_request)) { __Pyx_RaiseUnboundLocalError("loopring_order_request"); __PYX_ERR(0, 843, __pyx_L19_except_error) }
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_cur_scope->__pyx_v_loopring_order_request); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 843, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":844
 *                 # is reasonably old, mark the order as cancelled
 *                 print(loopring_order_request)
 *                 if loopring_order_request['resultInfo']['code'] == 107003:             # <<<<<<<<<<<<<<
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 */
        if (unlikely(!__pyx_cur_scope->__pyx_v_loopring_order_request)) { __Pyx_RaiseUnboundLocalError("loopring_order_request"); __PYX_ERR(0, 844, __pyx_L19_except_error) }
        __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_loopring_order_request, __pyx_n_u_resultInfo); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_code); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 844, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_16, __pyx_int_107003, 0x1A1FB, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L19_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 844, __pyx_L19_except_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_9) {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":845
 *                 print(loopring_order_request)
 *                 if loopring_order_request['resultInfo']['code'] == 107003:
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_created_at); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_time); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_16 = (__pyx_t_20) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyNumber_Int(__pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_20 = PyNumber_Subtract(__pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = PyObject_RichCompare(__pyx_t_5, __pyx_t_20, Py_LT); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 845, __pyx_L19_except_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_9) {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":846
 *                 if loopring_order_request['resultInfo']['code'] == 107003:
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")             # <<<<<<<<<<<<<<
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 *                         self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_20 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_warning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __pyx_t_20 = PyTuple_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_18 = 0;
            __pyx_t_19 = 127;
            __Pyx_INCREF(__pyx_kp_u_marking);
            __pyx_t_18 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_marking);
            PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_kp_u_marking);
            __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_19 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_19) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_19;
            __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_15);
            __pyx_t_15 = 0;
            __Pyx_INCREF(__pyx_kp_u_as_cancelled);
            __pyx_t_18 += 13;
            __Pyx_GIVEREF(__pyx_kp_u_as_cancelled);
            PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_kp_u_as_cancelled);
            __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_20, 3, __pyx_t_18, __pyx_t_19); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __pyx_t_20 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_20)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_20);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_16 = (__pyx_t_20) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_20, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15);
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 846, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":847
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                         self.stop_tracking(client_order_id)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_now); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 847, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_20);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_20, function);
              }
            }
            __pyx_t_15 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 847, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __pyx_t_20 = NULL;
            __pyx_t_7 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_20)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_20);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_7 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[3] = {__pyx_t_20, __pyx_t_15, __pyx_cur_scope->__pyx_v_client_order_id};
              __pyx_t_16 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 847, __pyx_L19_except_error)
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[3] = {__pyx_t_20, __pyx_t_15, __pyx_cur_scope->__pyx_v_client_order_id};
              __pyx_t_16 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 847, __pyx_L19_except_error)
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            {
              __pyx_t_17 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 847, __pyx_L19_except_error)
              __Pyx_GOTREF(__pyx_t_17);
              if (__pyx_t_20) {
                __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_20); __pyx_t_20 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_7, __pyx_t_15);
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_client_order_id);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_client_order_id);
              PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_7, __pyx_cur_scope->__pyx_v_client_order_id);
              __pyx_t_15 = 0;
              __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_17, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 847, __pyx_L19_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_cancellation_event);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_cancellation_event, __pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_16);
            __pyx_t_16 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":848
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 *                         self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)             # <<<<<<<<<<<<<<
 *                         self.stop_tracking(client_order_id)
 *                 continue
 */
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ORDER_CANCELLED_EVENT); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 848, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_21 = __Pyx_PyInt_As_int64_t(__pyx_t_16); if (unlikely((__pyx_t_21 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L19_except_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_21, __pyx_cur_scope->__pyx_v_cancellation_event); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 848, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":849
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 *                         self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                         self.stop_tracking(client_order_id)             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_tracking); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 849, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_16 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_cur_scope->__pyx_v_client_order_id) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_client_order_id);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 849, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":845
 *                 print(loopring_order_request)
 *                 if loopring_order_request['resultInfo']['code'] == 107003:
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 *                         cancellation_event = OrderCancelledEvent(now(), client_order_id)
 */
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":844
 *                 # is reasonably old, mark the order as cancelled
 *                 print(loopring_order_request)
 *                 if loopring_order_request['resultInfo']['code'] == 107003:             # <<<<<<<<<<<<<<
 *                     if tracked_order.created_at < (int(time.time()) - UNRECOGNIZED_ORDER_DEBOUCE):
 *                         self.logger().warning(f"marking {client_order_id} as cancelled")
 */
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":850
 *                         self.c_trigger_event(ORDER_CANCELLED_EVENT, cancellation_event)
 *                         self.stop_tracking(client_order_id)
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             try:
 */
        goto __pyx_L27_except_continue;
        __pyx_L27_except_continue:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L23_try_continue;
      }
      goto __pyx_L19_except_error;
      __pyx_L19_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":829
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 loopring_order_request = await self.api_request("GET",
 *                                                                 GET_ORDER_ROUTE,
 */
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L23_try_continue:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      goto __pyx_L4_continue;
      __pyx_L24_try_end:;
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":852
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 data["filledSize"] = data["volumes"]["baseFilled"]
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      /*try:*/ {

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":853
 * 
 *             try:
 *                 data["filledSize"] = data["volumes"]["baseFilled"]             # <<<<<<<<<<<<<<
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 *                 data["filledFee"] = data["volumes"]["fee"]
 */
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_volumes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 853, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_u_baseFilled); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 853, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_filledSize, __pyx_t_10) < 0)) __PYX_ERR(0, 853, __pyx_L30_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":854
 *             try:
 *                 data["filledSize"] = data["volumes"]["baseFilled"]
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]             # <<<<<<<<<<<<<<
 *                 data["filledFee"] = data["volumes"]["fee"]
 *                 self._update_inflight_order(tracked_order, data)
 */
        __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_volumes); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 854, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_10, __pyx_n_u_quoteFilled); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 854, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_filledVolume, __pyx_t_6) < 0)) __PYX_ERR(0, 854, __pyx_L30_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":855
 *                 data["filledSize"] = data["volumes"]["baseFilled"]
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 *                 data["filledFee"] = data["volumes"]["fee"]             # <<<<<<<<<<<<<<
 *                 self._update_inflight_order(tracked_order, data)
 *             except Exception as e:
 */
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_volumes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 855, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_n_u_fee); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 855, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_data, __pyx_n_u_filledFee, __pyx_t_10) < 0)) __PYX_ERR(0, 855, __pyx_L30_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":856
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 *                 data["filledFee"] = data["volumes"]["fee"]
 *                 self._update_inflight_order(tracked_order, data)             # <<<<<<<<<<<<<<
 *             except Exception as e:
 *                 self.logger().error(f"Failed to update Loopring order {tracked_order.exchange_order_id}")
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_inflight_order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 856, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_tracked_order, __pyx_cur_scope->__pyx_v_data};
          __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 856, __pyx_L30_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_10);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_tracked_order, __pyx_cur_scope->__pyx_v_data};
          __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 856, __pyx_L30_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_10);
        } else
        #endif
        {
          __pyx_t_16 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 856, __pyx_L30_error)
          __Pyx_GOTREF(__pyx_t_16);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tracked_order);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tracked_order);
          PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_7, __pyx_cur_scope->__pyx_v_tracked_order);
          __Pyx_INCREF(__pyx_cur_scope->__pyx_v_data);
          __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_data);
          PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_7, __pyx_cur_scope->__pyx_v_data);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 856, __pyx_L30_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":852
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 data["filledSize"] = data["volumes"]["baseFilled"]
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 */
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L37_try_end;
      __pyx_L30_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":857
 *                 data["filledFee"] = data["volumes"]["fee"]
 *                 self._update_inflight_order(tracked_order, data)
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"Failed to update Loopring order {tracked_order.exchange_order_id}")
 *                 self.logger().error(e)
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_6, &__pyx_t_16) < 0) __PYX_ERR(0, 857, __pyx_L32_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_cur_scope->__pyx_v_e = __pyx_t_6;
        /*try:*/ {

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":858
 *                 self._update_inflight_order(tracked_order, data)
 *             except Exception as e:
 *                 self.logger().error(f"Failed to update Loopring order {tracked_order.exchange_order_id}")             # <<<<<<<<<<<<<<
 *                 self.logger().error(e)
 * 
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_15 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_update_Loopring_order, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_11 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_5);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 858, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":859
 *             except Exception as e:
 *                 self.logger().error(f"Failed to update Loopring order {tracked_order.exchange_order_id}")
 *                 self.logger().error(e)             # <<<<<<<<<<<<<<
 * 
 *     # ==========================================================
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 859, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_17 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 859, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 859, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_11 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_cur_scope->__pyx_v_e) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_cur_scope->__pyx_v_e);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 859, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }

        /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":857
 *                 data["filledFee"] = data["volumes"]["fee"]
 *                 self._update_inflight_order(tracked_order, data)
 *             except Exception as e:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"Failed to update Loopring order {tracked_order.exchange_order_id}")
 *                 self.logger().error(e)
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
            __pyx_cur_scope->__pyx_v_e = NULL;
            goto __pyx_L44;
          }
          __pyx_L43_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_assign
            __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_27, &__pyx_t_28, &__pyx_t_29);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26) < 0)) __Pyx_ErrFetch(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);
            __Pyx_XGOTREF(__pyx_t_24);
            __Pyx_XGOTREF(__pyx_t_25);
            __Pyx_XGOTREF(__pyx_t_26);
            __Pyx_XGOTREF(__pyx_t_27);
            __Pyx_XGOTREF(__pyx_t_28);
            __Pyx_XGOTREF(__pyx_t_29);
            __pyx_t_7 = __pyx_lineno; __pyx_t_22 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
            {
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_e);
              __Pyx_DECREF(__pyx_cur_scope->__pyx_v_e);
              __pyx_cur_scope->__pyx_v_e = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_27);
              __Pyx_XGIVEREF(__pyx_t_28);
              __Pyx_XGIVEREF(__pyx_t_29);
              __Pyx_ExceptionReset(__pyx_t_27, __pyx_t_28, __pyx_t_29);
            }
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_XGIVEREF(__pyx_t_25);
            __Pyx_XGIVEREF(__pyx_t_26);
            __Pyx_ErrRestore(__pyx_t_24, __pyx_t_25, __pyx_t_26);
            __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0;
            __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_22; __pyx_filename = __pyx_t_23;
            goto __pyx_L32_except_error;
          }
          __pyx_L44:;
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L31_exception_handled;
      }
      goto __pyx_L32_except_error;
      __pyx_L32_except_error:;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":852
 *                 continue
 * 
 *             try:             # <<<<<<<<<<<<<<
 *                 data["filledSize"] = data["volumes"]["baseFilled"]
 *                 data["filledVolume"] = data["volumes"]["quoteFilled"]
 */
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      goto __pyx_L1_error;
      __pyx_L31_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_L37_try_end:;
    }
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":813
 *                     self.logger().debug(str(e))
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         tracked_orders = self._in_flight_orders.copy()
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("_update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":865
 *     # ----------------------------------------------------------
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         return self._trading_rules[trading_pair].min_price_increment
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_price_quantum", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":866
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 *         return self._trading_rules[trading_pair].min_price_increment             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 866, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min_price_increment); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":865
 *     # ----------------------------------------------------------
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         return self._trading_rules[trading_pair].min_price_increment
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_order_price_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":868
 *         return self._trading_rules[trading_pair].min_price_increment
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):             # <<<<<<<<<<<<<<
 *         return self._trading_rules[trading_pair].min_base_amount_increment
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_order_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_get_order_size_quantum", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":869
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):
 *         return self._trading_rules[trading_pair].min_base_amount_increment             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_price(self, str trading_pair, object price):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 869, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min_base_amount_increment); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":868
 *         return self._trading_rules[trading_pair].min_price_increment
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):             # <<<<<<<<<<<<<<
 *         return self._trading_rules[trading_pair].min_base_amount_increment
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_get_order_size_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":871
 *         return self._trading_rules[trading_pair].min_base_amount_increment
 * 
 *     cdef object c_quantize_order_price(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_price(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("c_quantize_order_price", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":872
 * 
 *     cdef object c_quantize_order_price(self, str trading_pair, object price):
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_price, __pyx_n_s_quantize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ROUND_DOWN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rounding, __pyx_t_4) < 0) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":871
 *         return self._trading_rules[trading_pair].min_base_amount_increment
 * 
 *     cdef object c_quantize_order_price(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_quantize_order_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":874
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount *__pyx_optional_args) {
  PyObject *__pyx_v_price = __pyx_k__25;
  PyObject *__pyx_v_current_price = 0;
  PyObject *__pyx_v_quantized_amount = NULL;
  PyObject *__pyx_v_rules = NULL;
  PyObject *__pyx_v_notional_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("c_quantize_order_amount", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_price = __pyx_optional_args->price;
    }
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":876
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)             # <<<<<<<<<<<<<<
 *         quantized_amount = amount.quantize(self.c_get_order_size_quantum(trading_pair, amount), rounding=ROUND_DOWN)
 *         rules = self._trading_rules[trading_pair]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_current_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":877
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)
 *         quantized_amount = amount.quantize(self.c_get_order_size_quantum(trading_pair, amount), rounding=ROUND_DOWN)             # <<<<<<<<<<<<<<
 *         rules = self._trading_rules[trading_pair]
 *         if quantized_amount < rules.min_order_size:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_amount, __pyx_n_s_quantize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_order_size_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ROUND_DOWN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rounding, __pyx_t_4) < 0) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_quantized_amount = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":878
 *             object current_price = self.c_get_price(trading_pair, False)
 *         quantized_amount = amount.quantize(self.c_get_order_size_quantum(trading_pair, amount), rounding=ROUND_DOWN)
 *         rules = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         if quantized_amount < rules.min_order_size:
 *             return s_decimal_0
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 878, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_rules = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":879
 *         quantized_amount = amount.quantize(self.c_get_order_size_quantum(trading_pair, amount), rounding=ROUND_DOWN)
 *         rules = self._trading_rules[trading_pair]
 *         if quantized_amount < rules.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rules, __pyx_n_s_min_order_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_quantized_amount, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":880
 *         rules = self._trading_rules[trading_pair]
 *         if quantized_amount < rules.min_order_size:
 *             return s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         if price == s_decimal_0:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":879
 *         quantized_amount = amount.quantize(self.c_get_order_size_quantum(trading_pair, amount), rounding=ROUND_DOWN)
 *         rules = self._trading_rules[trading_pair]
 *         if quantized_amount < rules.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":882
 *             return s_decimal_0
 * 
 *         if price == s_decimal_0:             # <<<<<<<<<<<<<<
 *             notional_size = current_price * quantized_amount
 *             if notional_size < rules.min_notional_size:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_price, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":883
 * 
 *         if price == s_decimal_0:
 *             notional_size = current_price * quantized_amount             # <<<<<<<<<<<<<<
 *             if notional_size < rules.min_notional_size:
 *                 return s_decimal_0
 */
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_current_price, __pyx_v_quantized_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_notional_size = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":884
 *         if price == s_decimal_0:
 *             notional_size = current_price * quantized_amount
 *             if notional_size < rules.min_notional_size:             # <<<<<<<<<<<<<<
 *                 return s_decimal_0
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rules, __pyx_n_s_min_notional_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_notional_size, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":885
 *             notional_size = current_price * quantized_amount
 *             if notional_size < rules.min_notional_size:
 *                 return s_decimal_0             # <<<<<<<<<<<<<<
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:
 *             return s_decimal_0
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":884
 *         if price == s_decimal_0:
 *             notional_size = current_price * quantized_amount
 *             if notional_size < rules.min_notional_size:             # <<<<<<<<<<<<<<
 *                 return s_decimal_0
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:
 */
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":882
 *             return s_decimal_0
 * 
 *         if price == s_decimal_0:             # <<<<<<<<<<<<<<
 *             notional_size = current_price * quantized_amount
 *             if notional_size < rules.min_notional_size:
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":886
 *             if notional_size < rules.min_notional_size:
 *                 return s_decimal_0
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_price, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_price, __pyx_v_quantized_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rules, __pyx_n_s_min_notional_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_t_6;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":887
 *                 return s_decimal_0
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:
 *             return s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         return quantized_amount
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":886
 *             if notional_size < rules.min_notional_size:
 *                 return s_decimal_0
 *         elif price > 0 and price * quantized_amount < rules.min_notional_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":889
 *             return s_decimal_0
 * 
 *         return quantized_amount             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_quantized_amount);
  __pyx_r = __pyx_v_quantized_amount;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":874
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_quantize_order_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current_price);
  __Pyx_XDECREF(__pyx_v_quantized_amount);
  __Pyx_XDECREF(__pyx_v_rules);
  __Pyx_XDECREF(__pyx_v_notional_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":891
 *         return quantized_amount
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_last_tick;
  int64_t __pyx_v_current_tick;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":893
 *     cdef c_tick(self, double timestamp):
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)
 * 
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)(__pyx_v_self->_last_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":894
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 * 
 *         self._tx_tracker.c_tick(timestamp)
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 894, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)(__pyx_v_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":896
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)
 * 
 *         self._tx_tracker.c_tick(timestamp)             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self->_tx_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_tx_tracker), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":897
 * 
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":898
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  __pyx_t_2 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":899
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = ((!__pyx_t_2) != 0);
    if (__pyx_t_5) {

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":900
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()             # <<<<<<<<<<<<<<
 *         self._last_timestamp = timestamp
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":899
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp
 */
    }

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":898
 *         self._tx_tracker.c_tick(timestamp)
 *         ExchangeBase.c_tick(self, timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":901
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *     def _encode_request(self, url, method, params):
 */
  __pyx_v_self->_last_timestamp = __pyx_v_timestamp;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":891
 *         return quantized_amount
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":903
 *         self._last_timestamp = timestamp
 * 
 *     def _encode_request(self, url, method, params):             # <<<<<<<<<<<<<<
 *         url = urllib.parse.quote(url, safe='')
 *         data = urllib.parse.quote("&".join([f"{k}={str(v)}" for k, v in params.items()]), safe='')
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_72_encode_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_72_encode_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_url = 0;
  PyObject *__pyx_v_method = 0;
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_encode_request (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_url,&__pyx_n_s_method,&__pyx_n_s_params,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_url)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_method)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_encode_request", 1, 3, 3, 1); __PYX_ERR(0, 903, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_encode_request", 1, 3, 3, 2); __PYX_ERR(0, 903, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_encode_request") < 0)) __PYX_ERR(0, 903, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_url = values[0];
    __pyx_v_method = values[1];
    __pyx_v_params = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_encode_request", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 903, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._encode_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_71_encode_request(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_url, __pyx_v_method, __pyx_v_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_71_encode_request(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_url, PyObject *__pyx_v_method, PyObject *__pyx_v_params) {
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_k = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  __Pyx_RefNannySetupContext("_encode_request", 0);
  __Pyx_INCREF(__pyx_v_url);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":904
 * 
 *     def _encode_request(self, url, method, params):
 *         url = urllib.parse.quote(url, safe='')             # <<<<<<<<<<<<<<
 *         data = urllib.parse.quote("&".join([f"{k}={str(v)}" for k, v in params.items()]), safe='')
 *         return "&".join([method, url, data])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_urllib); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_parse); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_url);
  __Pyx_GIVEREF(__pyx_v_url);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_url);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_safe, __pyx_kp_u__8) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_url, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":905
 *     def _encode_request(self, url, method, params):
 *         url = urllib.parse.quote(url, safe='')
 *         data = urllib.parse.quote("&".join([f"{k}={str(v)}" for k, v in params.items()]), safe='')             # <<<<<<<<<<<<<<
 *         return "&".join([method, url, data])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_urllib); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_parse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_params == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 905, __pyx_L5_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_params, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_6, &__pyx_t_5, &__pyx_t_1, &__pyx_t_8, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_k, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_v, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_8genexpr4__pyx_v_k, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u__27);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__27);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_kp_u__27);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_8genexpr4__pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 905, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v); __pyx_8genexpr4__pyx_v_v = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v); __pyx_8genexpr4__pyx_v_v = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__26, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_safe, __pyx_kp_u__8) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":906
 *         url = urllib.parse.quote(url, safe='')
 *         data = urllib.parse.quote("&".join([f"{k}={str(v)}" for k, v in params.items()]), safe='')
 *         return "&".join([method, url, data])             # <<<<<<<<<<<<<<
 * 
 *     async def api_request(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_method);
  __Pyx_GIVEREF(__pyx_v_method);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_method);
  __Pyx_INCREF(__pyx_v_url);
  __Pyx_GIVEREF(__pyx_v_url);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_url);
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_data);
  __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__26, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":903
 *         self._last_timestamp = timestamp
 * 
 *     def _encode_request(self, url, method, params):             # <<<<<<<<<<<<<<
 *         url = urllib.parse.quote(url, safe='')
 *         data = urllib.parse.quote("&".join([f"{k}={str(v)}" for k, v in params.items()]), safe='')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange._encode_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_url);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_75generator20(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":908
 *         return "&".join([method, url, data])
 * 
 *     async def api_request(self,             # <<<<<<<<<<<<<<
 *                           http_method: str,
 *                           url: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_74api_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_74api_request(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_http_method = 0;
  PyObject *__pyx_v_url = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_v_headers = 0;
  PyObject *__pyx_v_secure = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("api_request (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_http_method,&__pyx_n_s_url,&__pyx_n_s_data,&__pyx_n_s_params,&__pyx_n_s_headers,&__pyx_n_s_secure,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":911
 *                           http_method: str,
 *                           url: str,
 *                           data: Optional[Dict[str, Any]] = None,             # <<<<<<<<<<<<<<
 *                           params: Optional[Dict[str, Any]] = None,
 *                           headers: Optional[Dict[str, str]] = {},
 */
    values[2] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":912
 *                           url: str,
 *                           data: Optional[Dict[str, Any]] = None,
 *                           params: Optional[Dict[str, Any]] = None,             # <<<<<<<<<<<<<<
 *                           headers: Optional[Dict[str, str]] = {},
 *                           secure: bool = False) -> Dict[str, Any]:
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = __pyx_k__28;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":914
 *                           params: Optional[Dict[str, Any]] = None,
 *                           headers: Optional[Dict[str, str]] = {},
 *                           secure: bool = False) -> Dict[str, Any]:             # <<<<<<<<<<<<<<
 * 
 *         if self._shared_client is None:
 */
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_http_method)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_url)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("api_request", 0, 2, 6, 1); __PYX_ERR(0, 908, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_headers);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_secure);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "api_request") < 0)) __PYX_ERR(0, 908, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_http_method = ((PyObject*)values[0]);
    __pyx_v_url = ((PyObject*)values[1]);
    __pyx_v_data = values[2];
    __pyx_v_params = values[3];
    __pyx_v_headers = values[4];
    __pyx_v_secure = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("api_request", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 908, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_http_method), (&PyUnicode_Type), 1, "http_method", 1))) __PYX_ERR(0, 909, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_url), (&PyUnicode_Type), 1, "url", 1))) __PYX_ERR(0, 910, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_73api_request(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_http_method, __pyx_v_url, __pyx_v_data, __pyx_v_params, __pyx_v_headers, __pyx_v_secure);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":908
 *         return "&".join([method, url, data])
 * 
 *     async def api_request(self,             # <<<<<<<<<<<<<<
 *                           http_method: str,
 *                           url: str,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_73api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_url, PyObject *__pyx_v_data, PyObject *__pyx_v_params, PyObject *__pyx_v_headers, PyObject *__pyx_v_secure) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("api_request", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 908, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_http_method = __pyx_v_http_method;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
  __pyx_cur_scope->__pyx_v_url = __pyx_v_url;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_url);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_url);
  __pyx_cur_scope->__pyx_v_data = __pyx_v_data;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_data);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_data);
  __pyx_cur_scope->__pyx_v_params = __pyx_v_params;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_params);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_params);
  __pyx_cur_scope->__pyx_v_headers = __pyx_v_headers;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_headers);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_headers);
  __pyx_cur_scope->__pyx_v_secure = __pyx_v_secure;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_secure);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_secure);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_75generator20, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_api_request, __pyx_n_s_LoopringExchange_api_request, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!gen)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_75generator20(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("api_request", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_await;
    case 2: goto __pyx_L21_resume_from_await;
    case 3: goto __pyx_L22_resume_from_await;
    case 4: goto __pyx_L24_resume_from_await;
    case 5: goto __pyx_L28_resume_from_await;
    case 6: goto __pyx_L29_resume_from_await;
    case 7: goto __pyx_L30_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 908, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":916
 *                           secure: bool = False) -> Dict[str, Any]:
 * 
 *         if self._shared_client is None:             # <<<<<<<<<<<<<<
 *             self._shared_client = aiohttp.ClientSession()
 * 
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->_shared_client == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":917
 * 
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()             # <<<<<<<<<<<<<<
 * 
 *         if data is not None and http_method == "POST":
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_aiohttp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ClientSession); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_shared_client);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_shared_client);
    __pyx_cur_scope->__pyx_v_self->_shared_client = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":916
 *                           secure: bool = False) -> Dict[str, Any]:
 * 
 *         if self._shared_client is None:             # <<<<<<<<<<<<<<
 *             self._shared_client = aiohttp.ClientSession()
 * 
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":919
 *             self._shared_client = aiohttp.ClientSession()
 * 
 *         if data is not None and http_method == "POST":             # <<<<<<<<<<<<<<
 *             data = json.dumps(data).encode('utf8')
 *             headers = {"Content-Type": "application/json"}
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_data != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_http_method, __pyx_n_u_POST, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 919, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":920
 * 
 *         if data is not None and http_method == "POST":
 *             data = json.dumps(data).encode('utf8')             # <<<<<<<<<<<<<<
 *             headers = {"Content-Type": "application/json"}
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_json); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dumps); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_cur_scope->__pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_cur_scope->__pyx_v_data);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_u_utf8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_data);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":921
 *         if data is not None and http_method == "POST":
 *             data = json.dumps(data).encode('utf8')
 *             headers = {"Content-Type": "application/json"}             # <<<<<<<<<<<<<<
 * 
 *         headers.update(self._loopring_auth.generate_auth_dict())
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Content_Type, __pyx_kp_u_application_json) < 0) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_headers);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_headers, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":919
 *             self._shared_client = aiohttp.ClientSession()
 * 
 *         if data is not None and http_method == "POST":             # <<<<<<<<<<<<<<
 *             data = json.dumps(data).encode('utf8')
 *             headers = {"Content-Type": "application/json"}
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":923
 *             headers = {"Content-Type": "application/json"}
 * 
 *         headers.update(self._loopring_auth.generate_auth_dict())             # <<<<<<<<<<<<<<
 *         full_url = f"{self.API_REST_ENDPOINT}{url}"
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_headers, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_loopring_auth, __pyx_n_s_generate_auth_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":924
 * 
 *         headers.update(self._loopring_auth.generate_auth_dict())
 *         full_url = f"{self.API_REST_ENDPOINT}{url}"             # <<<<<<<<<<<<<<
 * 
 *         # Signs requests for secure requests
 */
  __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_self->API_REST_ENDPOINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_url); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_full_url = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":927
 * 
 *         # Signs requests for secure requests
 *         if secure:             # <<<<<<<<<<<<<<
 *             ordered_data = self._encode_request(full_url, http_method, params)
 *             hasher = hashlib.sha256()
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_secure); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 927, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":928
 *         # Signs requests for secure requests
 *         if secure:
 *             ordered_data = self._encode_request(full_url, http_method, params)             # <<<<<<<<<<<<<<
 *             hasher = hashlib.sha256()
 *             hasher.update(ordered_data.encode('utf-8'))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_encode_request); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_full_url, __pyx_cur_scope->__pyx_v_http_method, __pyx_cur_scope->__pyx_v_params};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_full_url, __pyx_cur_scope->__pyx_v_http_method, __pyx_cur_scope->__pyx_v_params};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_full_url);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_full_url);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_full_url);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_9, __pyx_cur_scope->__pyx_v_http_method);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_params);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_params);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_9, __pyx_cur_scope->__pyx_v_params);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_ordered_data = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":929
 *         if secure:
 *             ordered_data = self._encode_request(full_url, http_method, params)
 *             hasher = hashlib.sha256()             # <<<<<<<<<<<<<<
 *             hasher.update(ordered_data.encode('utf-8'))
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_hashlib); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sha256); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_hasher = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":930
 *             ordered_data = self._encode_request(full_url, http_method, params)
 *             hasher = hashlib.sha256()
 *             hasher.update(ordered_data.encode('utf-8'))             # <<<<<<<<<<<<<<
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_hasher, __pyx_n_s_update); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_ordered_data, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_utf_8);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":931
 *             hasher = hashlib.sha256()
 *             hasher.update(ordered_data.encode('utf-8'))
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD             # <<<<<<<<<<<<<<
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_hasher, __pyx_n_s_hexdigest); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_int_16);
    __Pyx_GIVEREF(__pyx_int_16);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_16);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_SNARK_SCALAR_FIELD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyNumber_Remainder(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_cur_scope->__pyx_v_msgHash = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":932
 *             hasher.update(ordered_data.encode('utf-8'))
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))             # <<<<<<<<<<<<<<
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PoseidonEdDSA); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sign); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FQ); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self->_loopring_private_key);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self->_loopring_private_key);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_cur_scope->__pyx_v_self->_loopring_private_key);
    __Pyx_INCREF(__pyx_int_16);
    __Pyx_GIVEREF(__pyx_int_16);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_int_16);
    __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_msgHash, __pyx_t_4};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_msgHash, __pyx_t_4};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_msgHash);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_msgHash);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_cur_scope->__pyx_v_msgHash);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_cur_scope->__pyx_v_signed = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":933
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed, __pyx_n_s_sig); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_R); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_5, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zfill); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_10, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_64);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":934
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 *             headers.update({"X-API-SIG": signature})
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed, __pyx_n_s_sig); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_R); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_10, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zfill); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_4, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_int_64);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":935
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])             # <<<<<<<<<<<<<<
 *             headers.update({"X-API-SIG": signature})
 *         async with self._shared_client.request(http_method, url=full_url,
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_signed, __pyx_n_s_sig); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_3, 2, 0, NULL, NULL, &__pyx_slice__9, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zfill); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_int_64) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_64);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":933
 *             msgHash = int(hasher.hexdigest(), 16) % SNARK_SCALAR_FIELD
 *             signed = PoseidonEdDSA.sign(msgHash, FQ(int(self._loopring_private_key, 16)))
 *             signature = "0x" + "".join([hex(int(signed.sig.R.x))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 */
    __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_10);
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = PyUnicode_Join(__pyx_kp_u__8, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_0x, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_signature = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":936
 *                                         hex(int(signed.sig.R.y))[2:].zfill(64),
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 *             headers.update({"X-API-SIG": signature})             # <<<<<<<<<<<<<<
 *         async with self._shared_client.request(http_method, url=full_url,
 *                                                timeout=API_CALL_TIMEOUT,
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_headers, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_kp_u_X_API_SIG, __pyx_cur_scope->__pyx_v_signature) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":927
 * 
 *         # Signs requests for secure requests
 *         if secure:             # <<<<<<<<<<<<<<
 *             ordered_data = self._encode_request(full_url, http_method, params)
 *             hasher = hashlib.sha256()
 */
  }

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":937
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 *             headers.update({"X-API-SIG": signature})
 *         async with self._shared_client.request(http_method, url=full_url,             # <<<<<<<<<<<<<<
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_shared_client, __pyx_n_s_request); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_cur_scope->__pyx_v_http_method);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_url, __pyx_cur_scope->__pyx_v_full_url) < 0) __PYX_ERR(0, 937, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":938
 *             headers.update({"X-API-SIG": signature})
 *         async with self._shared_client.request(http_method, url=full_url,
 *                                                timeout=API_CALL_TIMEOUT,             # <<<<<<<<<<<<<<
 *                                                data=data, params=params, headers=headers) as response:
 *             if response.status != 200:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_API_CALL_TIMEOUT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_timeout, __pyx_t_7) < 0) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":939
 *         async with self._shared_client.request(http_method, url=full_url,
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:             # <<<<<<<<<<<<<<
 *             if response.status != 200:
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_data, __pyx_cur_scope->__pyx_v_data) < 0) __PYX_ERR(0, 937, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_params, __pyx_cur_scope->__pyx_v_params) < 0) __PYX_ERR(0, 937, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_headers, __pyx_cur_scope->__pyx_v_headers) < 0) __PYX_ERR(0, 937, __pyx_L1_error)

    /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":937
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 *             headers.update({"X-API-SIG": signature})
 *         async with self._shared_client.request(http_method, url=full_url,             # <<<<<<<<<<<<<<
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_aexit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 937, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_aenter); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L9_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L9_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_7);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_t_11);
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L10_resume_from_await:;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_7);
      __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_t_11);
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 937, __pyx_L9_error)
      __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_5 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 937, __pyx_L9_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_10 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_v_response = __pyx_t_10;
          __pyx_t_10 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":940
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:
 *             if response.status != 200:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")
 *                 self.logger().info(await response.text())
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 940, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_10, __pyx_int_200, 0xC8, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 940, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 940, __pyx_L14_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_2) {

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":941
 *                                                data=data, params=params, headers=headers) as response:
 *             if response.status != 200:
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")             # <<<<<<<<<<<<<<
 *                 self.logger().info(await response.text())
 *                 data = await response.json()
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_10 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_15 = 0;
            __pyx_t_16 = 127;
            __Pyx_INCREF(__pyx_kp_u_Issue_with_Loopring_API);
            __pyx_t_15 += 24;
            __Pyx_GIVEREF(__pyx_kp_u_Issue_with_Loopring_API);
            PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Issue_with_Loopring_API);
            __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_http_method); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
            __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_to);
            __pyx_t_15 += 4;
            __Pyx_GIVEREF(__pyx_kp_u_to);
            PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_to);
            __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_url); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_16;
            __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u_response);
            __pyx_t_15 += 12;
            __Pyx_GIVEREF(__pyx_kp_u_response);
            PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_response);
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_10, 5, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_10, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 941, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":942
 *             if response.status != 200:
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")
 *                 self.logger().info(await response.text())             # <<<<<<<<<<<<<<
 *                 data = await response.json()
 *                 if 'resultInfo' in data:
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_10 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_text); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_3);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
              __Pyx_XGIVEREF(__pyx_t_7);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
              __Pyx_XGIVEREF(__pyx_t_11);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_11;
              __Pyx_XGIVEREF(__pyx_t_12);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_12;
              __Pyx_XGIVEREF(__pyx_t_13);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_13;
              __Pyx_XGIVEREF(__pyx_t_14);
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_14;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 2;
              return __pyx_r;
              __pyx_L21_resume_from_await:;
              __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_3);
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_7);
              __pyx_t_11 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_11);
              __pyx_t_12 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_12);
              __pyx_t_13 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_13);
              __pyx_t_14 = __pyx_cur_scope->__pyx_t_5;
              __pyx_cur_scope->__pyx_t_5 = 0;
              __Pyx_XGOTREF(__pyx_t_14);
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 942, __pyx_L14_error)
              __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
            } else {
              __pyx_t_5 = NULL;
              if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 942, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_5);
            }
            __pyx_t_10 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_10, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 942, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":943
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")
 *                 self.logger().info(await response.text())
 *                 data = await response.json()             # <<<<<<<<<<<<<<
 *                 if 'resultInfo' in data:
 *                     return data
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 943, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_7);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_11);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_11;
              __Pyx_XGIVEREF(__pyx_t_12);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_12;
              __Pyx_XGIVEREF(__pyx_t_13);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_13;
              __Pyx_XGIVEREF(__pyx_t_14);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_14;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 3;
              return __pyx_r;
              __pyx_L22_resume_from_await:;
              __pyx_t_11 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_11);
              __pyx_t_12 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_12);
              __pyx_t_13 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_13);
              __pyx_t_14 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_14);
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 943, __pyx_L14_error)
              __pyx_t_7 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_7);
            } else {
              __pyx_t_7 = NULL;
              if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_7) < 0) __PYX_ERR(0, 943, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_7);
            }
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_data);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_7);
            __pyx_t_7 = 0;

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":944
 *                 self.logger().info(await response.text())
 *                 data = await response.json()
 *                 if 'resultInfo' in data:             # <<<<<<<<<<<<<<
 *                     return data
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")
 */
            __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_resultInfo, __pyx_cur_scope->__pyx_v_data, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 944, __pyx_L14_error)
            __pyx_t_1 = (__pyx_t_2 != 0);
            if (__pyx_t_1) {

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":945
 *                 data = await response.json()
 *                 if 'resultInfo' in data:
 *                     return data             # <<<<<<<<<<<<<<
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")
 *             data = await response.json()
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_data);
              goto __pyx_L18_try_return;

              /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":944
 *                 self.logger().info(await response.text())
 *                 data = await response.json()
 *                 if 'resultInfo' in data:             # <<<<<<<<<<<<<<
 *                     return data
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")
 */
            }

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":946
 *                 if 'resultInfo' in data:
 *                     return data
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")             # <<<<<<<<<<<<<<
 *             data = await response.json()
 *             return data
 */
            __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_15 = 0;
            __pyx_t_16 = 127;
            __Pyx_INCREF(__pyx_kp_u_Error_fetching_data_from);
            __pyx_t_15 += 25;
            __Pyx_GIVEREF(__pyx_kp_u_Error_fetching_data_from);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Error_fetching_data_from);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_full_url);
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_cur_scope->__pyx_v_full_url) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_cur_scope->__pyx_v_full_url) : __pyx_t_16;
            __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_cur_scope->__pyx_v_full_url);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_full_url);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_cur_scope->__pyx_v_full_url);
            __Pyx_INCREF(__pyx_kp_u_HTTP_status_is);
            __pyx_t_15 += 17;
            __Pyx_GIVEREF(__pyx_kp_u_HTTP_status_is);
            PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_HTTP_status_is);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_16;
            __pyx_t_15 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u__14);
            __pyx_t_15 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__14);
            PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u__14);
            __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_7, 5, __pyx_t_15, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 946, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_Raise(__pyx_t_7, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __PYX_ERR(0, 946, __pyx_L14_error)

            /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":940
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:
 *             if response.status != 200:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Issue with Loopring API {http_method} to {url}, response: ")
 *                 self.logger().info(await response.text())
 */
          }

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":947
 *                     return data
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")
 *             data = await response.json()             # <<<<<<<<<<<<<<
 *             return data
 * 
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_12);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_13);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_13;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 4;
            return __pyx_r;
            __pyx_L24_resume_from_await:;
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_12);
            __pyx_t_13 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 947, __pyx_L14_error)
            __pyx_t_7 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_7);
          } else {
            __pyx_t_7 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_7) < 0) __PYX_ERR(0, 947, __pyx_L14_error)
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_data);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_data, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_7);
          __pyx_t_7 = 0;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":948
 *                 raise IOError(f"Error fetching data from {full_url}. HTTP status is {response.status}.")
 *             data = await response.json()
 *             return data             # <<<<<<<<<<<<<<
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_data);
          goto __pyx_L18_try_return;

          /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":937
 *                                         hex(int(signed.sig.s))[2:].zfill(64)])
 *             headers.update({"X-API-SIG": signature})
 *         async with self._shared_client.request(http_method, url=full_url,             # <<<<<<<<<<<<<<
 *                                                timeout=API_CALL_TIMEOUT,
 *                                                data=data, params=params, headers=headers) as response:
 */
        }
        __pyx_L14_error:;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_5, &__pyx_t_3) < 0) __PYX_ERR(0, 937, __pyx_L16_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L16_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, NULL);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 937, __pyx_L16_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_3);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
            __Pyx_XGIVEREF(__pyx_t_5);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_12);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_13);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_13;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_t_17);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_SwapException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 5;
            return __pyx_r;
            __pyx_L28_resume_from_await:;
            __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_5);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_12);
            __pyx_t_13 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_17);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 937, __pyx_L16_except_error)
            __pyx_t_10 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_10);
          } else {
            __pyx_t_10 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_10) < 0) __PYX_ERR(0, 937, __pyx_L16_except_error)
            __Pyx_GOTREF(__pyx_t_10);
          }
          __pyx_t_17 = __pyx_t_10;
          __pyx_t_10 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 937, __pyx_L16_except_error)
          __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_5, __pyx_t_3);
            __pyx_t_7 = 0; __pyx_t_5 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 937, __pyx_L16_except_error)
          }
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L15_exception_handled;
        }
        __pyx_L16_except_error:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L1_error;
        __pyx_L18_try_return:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L11_return;
        __pyx_L15_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_11) {
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__5, NULL);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 6;
            return __pyx_r;
            __pyx_L29_resume_from_await:;
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 937, __pyx_L1_error)
            __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
          } else {
            __pyx_t_3 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 937, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __pyx_t_14 = __pyx_t_3;
          __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        goto __pyx_L13;
      }
      __pyx_L11_return: {
        __Pyx_PyThreadState_assign
        __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_18);
        __Pyx_XGOTREF(__pyx_t_19);
        __pyx_t_20 = __pyx_r;
        __pyx_r = 0;
        if (__pyx_t_11) {
          __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__5, NULL);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_21);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_12);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_12;
            __Pyx_XGIVEREF(__pyx_t_13);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_13;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_t_17);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_17;
            __Pyx_XGIVEREF(__pyx_t_18);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_18;
            __Pyx_XGIVEREF(__pyx_t_19);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_19;
            __Pyx_XGIVEREF(__pyx_t_20);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_20;
            __Pyx_XGIVEREF(__pyx_t_21);
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_21;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 7;
            return __pyx_r;
            __pyx_L30_resume_from_await:;
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_12 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_12);
            __pyx_t_13 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_13);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_17);
            __pyx_t_18 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_18);
            __pyx_t_19 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_19);
            __pyx_t_20 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_20);
            __pyx_t_21 = __pyx_cur_scope->__pyx_t_8;
            __pyx_cur_scope->__pyx_t_8 = 0;
            __Pyx_XGOTREF(__pyx_t_21);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 937, __pyx_L1_error)
            __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
          } else {
            __pyx_t_3 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 937, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __pyx_t_21 = __pyx_t_3;
          __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        }
        __pyx_r = __pyx_t_20;
        __pyx_t_20 = 0;
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
        }
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
        __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
        goto __pyx_L0;
      }
      __pyx_L13:;
    }
    goto __pyx_L31;
    __pyx_L9_error:;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L1_error;
    __pyx_L31:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":908
 *         return "&".join([method, url, data])
 * 
 *     async def api_request(self,             # <<<<<<<<<<<<<<
 *                           http_method: str,
 *                           url: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":950
 *             return data
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_77get_order_book(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair); /*proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_77get_order_book(PyObject *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_book (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 950, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_76get_order_book(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject*)__pyx_v_trading_pair));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_76get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_order_book", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":951
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 *         return self.c_get_order_book(trading_pair)             # <<<<<<<<<<<<<<
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_book(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_trading_pair)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":950
 *             return data
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":953
 *         return self.c_get_order_book(trading_pair)
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_79get_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_79get_price(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, 1); __PYX_ERR(0, 953, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_price") < 0)) __PYX_ERR(0, 953, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_is_buy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 953, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 953, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_78get_price(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_78get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":954
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 *         return self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 954, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":953
 *         return self.c_get_order_book(trading_pair)
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":956
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_81buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_81buy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buy (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__29;
    values[3] = __pyx_k__30;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, 1); __PYX_ERR(0, 956, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "buy") < 0)) __PYX_ERR(0, 956, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 956, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_80buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_80buy(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy __pyx_t_2;
  __Pyx_RefNannySetupContext("buy", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":958
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_buy(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":956
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":960
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_83sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_83sell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sell (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__31;
    values[3] = __pyx_k__32;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, 1); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "sell") < 0)) __PYX_ERR(0, 960, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 960, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 960, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_82sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_82sell(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell __pyx_t_2;
  __Pyx_RefNannySetupContext("sell", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":962
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_sell(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":960
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":964
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_85cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_85cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_client_order_id = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, 1); __PYX_ERR(0, 964, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cancel") < 0)) __PYX_ERR(0, 964, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_client_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 964, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 964, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 964, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_84cancel(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_84cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cancel", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":965
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 *         return self.c_cancel(trading_pair, client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     def get_fee(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":964
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":967
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_87get_fee(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_87get_fee(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_base_currency = 0;
  PyObject *__pyx_v_quote_currency = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fee (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__33;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_base_currency)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quote_currency)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 1); __PYX_ERR(0, 967, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 2); __PYX_ERR(0, 967, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 3); __PYX_ERR(0, 967, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 4); __PYX_ERR(0, 967, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_price);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_fee") < 0)) __PYX_ERR(0, 967, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_base_currency = ((PyObject*)values[0]);
    __pyx_v_quote_currency = ((PyObject*)values[1]);
    __pyx_v_order_type = values[2];
    __pyx_v_order_side = values[3];
    __pyx_v_amount = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 967, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_currency), (&PyUnicode_Type), 1, "base_currency", 1))) __PYX_ERR(0, 968, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quote_currency), (&PyUnicode_Type), 1, "quote_currency", 1))) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_86get_fee(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_86get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_fee", 0);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":974
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":967
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pxd":22
 *         object _user_stream_tracker_task
 *         object _user_stream_event_listener_task
 *         public object _polling_update_task             # <<<<<<<<<<<<<<
 *         public object _token_configuration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_polling_update_task);
  __pyx_r = __pyx_v_self->_polling_update_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_polling_update_task);
  __Pyx_DECREF(__pyx_v_self->_polling_update_task);
  __pyx_v_self->_polling_update_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_polling_update_task);
  __Pyx_DECREF(__pyx_v_self->_polling_update_task);
  __pyx_v_self->_polling_update_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/loopring/loopring_exchange.pxd":23
 *         object _user_stream_event_listener_task
 *         public object _polling_update_task
 *         public object _token_configuration             # <<<<<<<<<<<<<<
 * 
 *         dict _trading_rules
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_token_configuration);
  __pyx_r = __pyx_v_self->_token_configuration;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_token_configuration);
  __Pyx_DECREF(__pyx_v_self->_token_configuration);
  __pyx_v_self->_token_configuration = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_token_configuration);
  __Pyx_DECREF(__pyx_v_self->_token_configuration);
  __pyx_v_self->_token_configuration = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_89__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_89__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_88__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_88__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_91__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_91__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_90__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_90__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":736
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":735
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":739
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":738
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":742
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":741
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":745
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":744
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":748
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":747
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":752
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":751
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":754
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":750
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":933
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":936
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":938
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":937
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":939
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":935
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":945
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 945, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":946
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 946, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 947, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":944
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":943
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":951
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 951, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":952
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 952, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 953, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":950
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":949
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":957
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 957, __pyx_L3_error)

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":958
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 958, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":959
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 959, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 959, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":956
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":955
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":981
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":996
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":984
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1006
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":999
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1013
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1009
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1020
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *p;
  PyObject *o = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;
  p->API_REST_ENDPOINT = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->WS_ENDPOINT = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  p->_shared_client = Py_None; Py_INCREF(Py_None);
  p->_loopring_auth = Py_None; Py_INCREF(Py_None);
  p->_loopring_exchangeid = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_loopring_private_key = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_sign_param = Py_None; Py_INCREF(Py_None);
  p->_user_stream_tracker = Py_None; Py_INCREF(Py_None);
  p->_user_stream_tracker_task = Py_None; Py_INCREF(Py_None);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  p->_polling_update_task = Py_None; Py_INCREF(Py_None);
  p->_token_configuration = Py_None; Py_INCREF(Py_None);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_lock = Py_None; Py_INCREF(Py_None);
  p->_exchange_rates = Py_None; Py_INCREF(Py_None);
  p->_pending_approval_tx_hashes = Py_None; Py_INCREF(Py_None);
  p->_in_flight_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_next_order_id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_id_lock = Py_None; Py_INCREF(Py_None);
  p->_loopring_tokenids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_trading_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_loopring_order_sign_param = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->API_REST_ENDPOINT);
  Py_CLEAR(p->WS_ENDPOINT);
  Py_CLEAR(p->_tx_tracker);
  Py_CLEAR(p->_poll_notifier);
  Py_CLEAR(p->_shared_client);
  Py_CLEAR(p->_loopring_auth);
  Py_CLEAR(p->_loopring_exchangeid);
  Py_CLEAR(p->_loopring_private_key);
  Py_CLEAR(p->_order_sign_param);
  Py_CLEAR(p->_user_stream_tracker);
  Py_CLEAR(p->_user_stream_tracker_task);
  Py_CLEAR(p->_user_stream_event_listener_task);
  Py_CLEAR(p->_polling_update_task);
  Py_CLEAR(p->_token_configuration);
  Py_CLEAR(p->_trading_rules);
  Py_CLEAR(p->_lock);
  Py_CLEAR(p->_exchange_rates);
  Py_CLEAR(p->_pending_approval_tx_hashes);
  Py_CLEAR(p->_in_flight_orders);
  Py_CLEAR(p->_next_order_id);
  Py_CLEAR(p->_order_id_lock);
  Py_CLEAR(p->_loopring_tokenids);
  Py_CLEAR(p->_trading_pairs);
  Py_CLEAR(p->_loopring_order_sign_param);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)o;
  e = ((likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) ? ((__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse) ? __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange)); if (e) return e;
  if (p->_tx_tracker) {
    e = (*v)(((PyObject *)p->_tx_tracker), a); if (e) return e;
  }
  if (p->_poll_notifier) {
    e = (*v)(p->_poll_notifier, a); if (e) return e;
  }
  if (p->_shared_client) {
    e = (*v)(p->_shared_client, a); if (e) return e;
  }
  if (p->_loopring_auth) {
    e = (*v)(p->_loopring_auth, a); if (e) return e;
  }
  if (p->_order_sign_param) {
    e = (*v)(p->_order_sign_param, a); if (e) return e;
  }
  if (p->_user_stream_tracker) {
    e = (*v)(p->_user_stream_tracker, a); if (e) return e;
  }
  if (p->_user_stream_tracker_task) {
    e = (*v)(p->_user_stream_tracker_task, a); if (e) return e;
  }
  if (p->_user_stream_event_listener_task) {
    e = (*v)(p->_user_stream_event_listener_task, a); if (e) return e;
  }
  if (p->_polling_update_task) {
    e = (*v)(p->_polling_update_task, a); if (e) return e;
  }
  if (p->_token_configuration) {
    e = (*v)(p->_token_configuration, a); if (e) return e;
  }
  if (p->_trading_rules) {
    e = (*v)(p->_trading_rules, a); if (e) return e;
  }
  if (p->_lock) {
    e = (*v)(p->_lock, a); if (e) return e;
  }
  if (p->_exchange_rates) {
    e = (*v)(p->_exchange_rates, a); if (e) return e;
  }
  if (p->_pending_approval_tx_hashes) {
    e = (*v)(p->_pending_approval_tx_hashes, a); if (e) return e;
  }
  if (p->_in_flight_orders) {
    e = (*v)(p->_in_flight_orders, a); if (e) return e;
  }
  if (p->_next_order_id) {
    e = (*v)(p->_next_order_id, a); if (e) return e;
  }
  if (p->_order_id_lock) {
    e = (*v)(p->_order_id_lock, a); if (e) return e;
  }
  if (p->_loopring_tokenids) {
    e = (*v)(p->_loopring_tokenids, a); if (e) return e;
  }
  if (p->_trading_pairs) {
    e = (*v)(p->_trading_pairs, a); if (e) return e;
  }
  if (p->_loopring_order_sign_param) {
    e = (*v)(p->_loopring_order_sign_param, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)o;
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) { if (__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange);
  tmp = ((PyObject*)p->_tx_tracker);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_poll_notifier);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_shared_client);
  p->_shared_client = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_loopring_auth);
  p->_loopring_auth = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_sign_param);
  p->_order_sign_param = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_tracker);
  p->_user_stream_tracker = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_tracker_task);
  p->_user_stream_tracker_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_event_listener_task);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_polling_update_task);
  p->_polling_update_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_token_configuration);
  p->_token_configuration = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_trading_rules);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_lock);
  p->_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_exchange_rates);
  p->_exchange_rates = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_pending_approval_tx_hashes);
  p->_pending_approval_tx_hashes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_orders);
  p->_in_flight_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_next_order_id);
  p->_next_order_id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_id_lock);
  p->_order_id_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_loopring_tokenids);
  p->_loopring_tokenids = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_trading_pairs);
  p->_trading_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_loopring_order_sign_param);
  p->_loopring_order_sign_param = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_4name_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_ready(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5ready_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_status_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11status_dict_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_token_configuration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19token_configuration_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_order_books(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11order_books_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_12limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_in_flight_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16in_flight_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_tracking_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_15tracking_states_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__polling_update_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__polling_update_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_polling_update_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__token_configuration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__token_configuration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_20_token_configuration_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange[] = {
  {"logger", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_1logger, METH_NOARGS, 0},
  {"get_active_exchange_markets", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_5get_active_exchange_markets, METH_NOARGS, 0},
  {"_get_next_order_id", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_8_get_next_order_id, METH_VARARGS|METH_KEYWORDS, 0},
  {"_serialize_order", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_11_serialize_order, METH_O, 0},
  {"supported_order_types", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_14supported_order_types, METH_NOARGS, 0},
  {"place_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_16place_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"execute_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_19execute_order, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_18execute_order},
  {"execute_buy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_22execute_buy, METH_VARARGS|METH_KEYWORDS, 0},
  {"execute_sell", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_25execute_sell, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancel_order", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_28cancel_order, METH_O, 0},
  {"cancel_all", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_31cancel_all, METH_O, 0},
  {"start_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_34start_network, METH_NOARGS, 0},
  {"stop_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_37stop_network, METH_NOARGS, 0},
  {"check_network", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_40check_network, METH_NOARGS, 0},
  {"restore_tracking_states", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_43restore_tracking_states, METH_O, 0},
  {"start_tracking", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_45start_tracking, METH_O, 0},
  {"stop_tracking", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_47stop_tracking, METH_O, 0},
  {"_update_inflight_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_49_update_inflight_order, METH_VARARGS|METH_KEYWORDS, 0},
  {"_set_balances", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_51_set_balances, METH_VARARGS|METH_KEYWORDS, 0},
  {"_iter_user_event_queue", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_54_iter_user_event_queue, METH_NOARGS, 0},
  {"_user_stream_event_listener", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_57_user_stream_event_listener, METH_NOARGS, 0},
  {"_polling_update", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_60_polling_update, METH_NOARGS, 0},
  {"_update_balances", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_63_update_balances, METH_NOARGS, 0},
  {"_update_trading_rules", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_66_update_trading_rules, METH_NOARGS, 0},
  {"_update_order_status", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_69_update_order_status, METH_NOARGS, 0},
  {"_encode_request", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_72_encode_request, METH_VARARGS|METH_KEYWORDS, 0},
  {"api_request", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_74api_request, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_order_book", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_77get_order_book, METH_O, 0},
  {"get_price", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_79get_price, METH_VARARGS|METH_KEYWORDS, 0},
  {"buy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_81buy, METH_VARARGS|METH_KEYWORDS, 0},
  {"sell", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_83sell, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_85cancel, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_fee", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_87get_fee, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_89__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_91__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange[] = {
  {(char *)"name", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_name, 0, (char *)0, 0},
  {(char *)"ready", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_ready, 0, (char *)0, 0},
  {(char *)"status_dict", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_status_dict, 0, (char *)0, 0},
  {(char *)"token_configuration", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_token_configuration, 0, (char *)0, 0},
  {(char *)"order_books", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_order_books, 0, (char *)0, 0},
  {(char *)"limit_orders", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_limit_orders, 0, (char *)0, 0},
  {(char *)"in_flight_orders", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_in_flight_orders, 0, (char *)0, 0},
  {(char *)"tracking_states", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_tracking_states, 0, (char *)0, 0},
  {(char *)"_polling_update_task", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__polling_update_task, __pyx_setprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__polling_update_task, (char *)0, 0},
  {(char *)"_token_configuration", __pyx_getprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__token_configuration, __pyx_setprop_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange__token_configuration, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchange", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *p;
  PyObject *o = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker);
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) ? ((__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse) ? __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker)); if (e) return e;
  if (p->_owner) {
    e = (*v)(((PyObject *)p->_owner), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) { if (__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker);
  tmp = ((PyObject*)p->_owner);
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.LoopringExchangeTransactionTracker", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct__wait_for_completion", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_1_get_active_exchange_markets", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_force_sync);
  Py_CLEAR(p->__pyx_v_next_id);
  Py_CLEAR(p->__pyx_v_response);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_token);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id *)o;
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_force_sync) {
    e = (*v)(p->__pyx_v_force_sync, a); if (e) return e;
  }
  if (p->__pyx_v_next_id) {
    e = (*v)(p->__pyx_v_next_id, a); if (e) return e;
  }
  if (p->__pyx_v_response) {
    e = (*v)(p->__pyx_v_response, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_token) {
    e = (*v)(p->__pyx_v_token, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_2__get_next_order_id", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order *)o;
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_3__serialize_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_base);
  Py_CLEAR(p->__pyx_v_baseid);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_eddsa);
  Py_CLEAR(p->__pyx_v_fq_obj);
  Py_CLEAR(p->__pyx_v_is_buy);
  Py_CLEAR(p->__pyx_v_msgHash);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_details);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_side);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_quote);
  Py_CLEAR(p->__pyx_v_quoteid);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_serialized_message);
  Py_CLEAR(p->__pyx_v_signed_message);
  Py_CLEAR(p->__pyx_v_token_s_id);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_validSince);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_base) {
    e = (*v)(p->__pyx_v_base, a); if (e) return e;
  }
  if (p->__pyx_v_baseid) {
    e = (*v)(p->__pyx_v_baseid, a); if (e) return e;
  }
  if (p->__pyx_v_fq_obj) {
    e = (*v)(p->__pyx_v_fq_obj, a); if (e) return e;
  }
  if (p->__pyx_v_is_buy) {
    e = (*v)(p->__pyx_v_is_buy, a); if (e) return e;
  }
  if (p->__pyx_v_msgHash) {
    e = (*v)(p->__pyx_v_msgHash, a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_details) {
    e = (*v)(p->__pyx_v_order_details, a); if (e) return e;
  }
  if (p->__pyx_v_order_id) {
    e = (*v)(p->__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_order_side) {
    e = (*v)(p->__pyx_v_order_side, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_quote) {
    e = (*v)(p->__pyx_v_quote, a); if (e) return e;
  }
  if (p->__pyx_v_quoteid) {
    e = (*v)(p->__pyx_v_quoteid, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_serialized_message) {
    e = (*v)(p->__pyx_v_serialized_message, a); if (e) return e;
  }
  if (p->__pyx_v_signed_message) {
    e = (*v)(p->__pyx_v_signed_message, a); if (e) return e;
  }
  if (p->__pyx_v_token_s_id) {
    e = (*v)(p->__pyx_v_token_s_id, a); if (e) return e;
  }
  if (p->__pyx_v_validSince) {
    e = (*v)(p->__pyx_v_validSince, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_4_place_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_base);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_created_at);
  Py_CLEAR(p->__pyx_v_creation_response);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_in_flight_order);
  Py_CLEAR(p->__pyx_v_loopring_order_hash);
  Py_CLEAR(p->__pyx_v_order_side);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_quote);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_status);
  Py_CLEAR(p->__pyx_v_token_sell_id);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_base) {
    e = (*v)(p->__pyx_v_base, a); if (e) return e;
  }
  if (p->__pyx_v_client_order_id) {
    e = (*v)(p->__pyx_v_client_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_created_at) {
    e = (*v)(p->__pyx_v_created_at, a); if (e) return e;
  }
  if (p->__pyx_v_creation_response) {
    e = (*v)(p->__pyx_v_creation_response, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_in_flight_order) {
    e = (*v)(p->__pyx_v_in_flight_order, a); if (e) return e;
  }
  if (p->__pyx_v_loopring_order_hash) {
    e = (*v)(p->__pyx_v_loopring_order_hash, a); if (e) return e;
  }
  if (p->__pyx_v_order_side) {
    e = (*v)(p->__pyx_v_order_side, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_quote) {
    e = (*v)(p->__pyx_v_quote, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_status) {
    e = (*v)(p->__pyx_v_status, a); if (e) return e;
  }
  if (p->__pyx_v_token_sell_id) {
    e = (*v)(p->__pyx_v_token_sell_id, a); if (e) return e;
  }
  if (p->__pyx_v_trading_pair) {
    e = (*v)(p->__pyx_v_trading_pair, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(p->__pyx_v_trading_rule, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_5_execute_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trading_pair);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_6_execute_buy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trading_pair);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_7_execute_sell", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cancellation_event);
  Py_CLEAR(p->__pyx_v_cancellation_payload);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_code);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_in_flight_order);
  Py_CLEAR(p->__pyx_v_res);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order *)o;
  if (p->__pyx_v_cancellation_event) {
    e = (*v)(p->__pyx_v_cancellation_event, a); if (e) return e;
  }
  if (p->__pyx_v_cancellation_payload) {
    e = (*v)(p->__pyx_v_cancellation_payload, a); if (e) return e;
  }
  if (p->__pyx_v_code) {
    e = (*v)(p->__pyx_v_code, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_in_flight_order) {
    e = (*v)(p->__pyx_v_in_flight_order, a); if (e) return e;
  }
  if (p->__pyx_v_res) {
    e = (*v)(p->__pyx_v_res, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_8_cancel_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_all_completed);
  Py_CLEAR(p->__pyx_v_cancel_verifier);
  Py_CLEAR(p->__pyx_v_cancellation_queue);
  Py_CLEAR(p->__pyx_v_in_flight);
  Py_CLEAR(p->__pyx_7genexpr__pyx_v_o);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_8genexpr1__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_status);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_set_cancellation_status);
  Py_CLEAR(p->__pyx_8genexpr1__pyx_v_success);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all *)o;
  if (p->__pyx_v_all_completed) {
    e = (*v)(p->__pyx_v_all_completed, a); if (e) return e;
  }
  if (p->__pyx_v_cancel_verifier) {
    e = (*v)(p->__pyx_v_cancel_verifier, a); if (e) return e;
  }
  if (p->__pyx_v_cancellation_queue) {
    e = (*v)(p->__pyx_v_cancellation_queue, a); if (e) return e;
  }
  if (p->__pyx_v_in_flight) {
    e = (*v)(p->__pyx_v_in_flight, a); if (e) return e;
  }
  if (p->__pyx_7genexpr__pyx_v_o) {
    e = (*v)(p->__pyx_7genexpr__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_8genexpr1__pyx_v_order_id) {
    e = (*v)(p->__pyx_8genexpr1__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_order_id) {
    e = (*v)(p->__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_order_status) {
    e = (*v)(p->__pyx_v_order_status, a); if (e) return e;
  }
  if (p->__pyx_v_s) {
    e = (*v)(p->__pyx_v_s, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_set_cancellation_status) {
    e = (*v)(p->__pyx_v_set_cancellation_status, a); if (e) return e;
  }
  if (p->__pyx_8genexpr1__pyx_v_success) {
    e = (*v)(p->__pyx_8genexpr1__pyx_v_success, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_9_cancel_all", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_base);
  Py_CLEAR(p->__pyx_v_exchange_info);
  Py_CLEAR(p->__pyx_v_pair);
  Py_CLEAR(p->__pyx_v_quote);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_token);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network *)o;
  if (p->__pyx_v_base) {
    e = (*v)(p->__pyx_v_base, a); if (e) return e;
  }
  if (p->__pyx_v_exchange_info) {
    e = (*v)(p->__pyx_v_exchange_info, a); if (e) return e;
  }
  if (p->__pyx_v_pair) {
    e = (*v)(p->__pyx_v_pair, a); if (e) return e;
  }
  if (p->__pyx_v_quote) {
    e = (*v)(p->__pyx_v_quote, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_token) {
    e = (*v)(p->__pyx_v_token, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_10_start_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_11_stop_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_12_check_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount_locked);
  Py_CLEAR(p->__pyx_v_completed_tokens);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_is_snapshot);
  Py_CLEAR(p->__pyx_v_padded_amount_locked);
  Py_CLEAR(p->__pyx_v_padded_total_amount);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_token_id);
  Py_CLEAR(p->__pyx_v_token_symbol);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_total_amount);
  Py_CLEAR(p->__pyx_v_updates);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  Py_CLEAR(p->__pyx_t_10);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances *)o;
  if (p->__pyx_v_amount_locked) {
    e = (*v)(p->__pyx_v_amount_locked, a); if (e) return e;
  }
  if (p->__pyx_v_completed_tokens) {
    e = (*v)(p->__pyx_v_completed_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_is_snapshot) {
    e = (*v)(p->__pyx_v_is_snapshot, a); if (e) return e;
  }
  if (p->__pyx_v_padded_amount_locked) {
    e = (*v)(p->__pyx_v_padded_amount_locked, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_token_id) {
    e = (*v)(p->__pyx_v_token_id, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_total_amount) {
    e = (*v)(p->__pyx_v_total_amount, a); if (e) return e;
  }
  if (p->__pyx_v_updates) {
    e = (*v)(p->__pyx_v_updates, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  if (p->__pyx_t_10) {
    e = (*v)(p->__pyx_t_10, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_13__set_balances", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_14__iter_user_event_queue", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_event);
  Py_CLEAR(p->__pyx_v_event_message);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_topic);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener *)o;
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_event) {
    e = (*v)(p->__pyx_v_event, a); if (e) return e;
  }
  if (p->__pyx_v_event_message) {
    e = (*v)(p->__pyx_v_event_message, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(((PyObject *)p->__pyx_v_tracked_order), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_15__user_stream_event_listener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update *)o;
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_16__polling_update", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_balances_response);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances *)o;
  if (p->__pyx_v_balances_response) {
    e = (*v)(p->__pyx_v_balances_response, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_17__update_balances", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_baseid);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_market);
  Py_CLEAR(p->__pyx_v_markets_info);
  Py_CLEAR(p->__pyx_v_quoteid);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_8genexpr3__pyx_v_t);
  Py_CLEAR(p->__pyx_v_tokens_info);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules *)o;
  if (p->__pyx_v_baseid) {
    e = (*v)(p->__pyx_v_baseid, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_market) {
    e = (*v)(p->__pyx_v_market, a); if (e) return e;
  }
  if (p->__pyx_v_markets_info) {
    e = (*v)(p->__pyx_v_markets_info, a); if (e) return e;
  }
  if (p->__pyx_v_quoteid) {
    e = (*v)(p->__pyx_v_quoteid, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_8genexpr3__pyx_v_t) {
    e = (*v)(p->__pyx_8genexpr3__pyx_v_t, a); if (e) return e;
  }
  if (p->__pyx_v_tokens_info) {
    e = (*v)(p->__pyx_v_tokens_info, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_18__update_trading_rules", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cancellation_event);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_loopring_order_id);
  Py_CLEAR(p->__pyx_v_loopring_order_request);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_v_tracked_orders);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status *)o;
  if (p->__pyx_v_cancellation_event) {
    e = (*v)(p->__pyx_v_cancellation_event, a); if (e) return e;
  }
  if (p->__pyx_v_client_order_id) {
    e = (*v)(p->__pyx_v_client_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_loopring_order_id) {
    e = (*v)(p->__pyx_v_loopring_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_loopring_order_request) {
    e = (*v)(p->__pyx_v_loopring_order_request, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_orders) {
    e = (*v)(p->__pyx_v_tracked_orders, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_19__update_order_status", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request[--__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_full_url);
  Py_CLEAR(p->__pyx_v_hasher);
  Py_CLEAR(p->__pyx_v_headers);
  Py_CLEAR(p->__pyx_v_http_method);
  Py_CLEAR(p->__pyx_v_msgHash);
  Py_CLEAR(p->__pyx_v_ordered_data);
  Py_CLEAR(p->__pyx_v_params);
  Py_CLEAR(p->__pyx_v_response);
  Py_CLEAR(p->__pyx_v_secure);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_signature);
  Py_CLEAR(p->__pyx_v_signed);
  Py_CLEAR(p->__pyx_v_url);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request[__pyx_freecount_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request *)o;
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_hasher) {
    e = (*v)(p->__pyx_v_hasher, a); if (e) return e;
  }
  if (p->__pyx_v_headers) {
    e = (*v)(p->__pyx_v_headers, a); if (e) return e;
  }
  if (p->__pyx_v_msgHash) {
    e = (*v)(p->__pyx_v_msgHash, a); if (e) return e;
  }
  if (p->__pyx_v_ordered_data) {
    e = (*v)(p->__pyx_v_ordered_data, a); if (e) return e;
  }
  if (p->__pyx_v_params) {
    e = (*v)(p->__pyx_v_params, a); if (e) return e;
  }
  if (p->__pyx_v_response) {
    e = (*v)(p->__pyx_v_response, a); if (e) return e;
  }
  if (p->__pyx_v_secure) {
    e = (*v)(p->__pyx_v_secure, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_signed) {
    e = (*v)(p->__pyx_v_signed, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.loopring.loopring_exchange.__pyx_scope_struct_20_api_request", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "EventListener",
    "ExchangeBase",
    "LoopringExchange",
    "LoopringExchangeTransactionTracker",
    "LoopringInFlightOrder",
    "OrderBook",
    "TradingRule",
    "TransactionTracker",
    "__pyx_ctuple_double",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long_struct",
    "__pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy",
    "__pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount",
    "__pyx_opt_args_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell",
    "__pyx_scope_struct_10_start_network",
    "__pyx_scope_struct_11_stop_network",
    "__pyx_scope_struct_12_check_network",
    "__pyx_scope_struct_13__set_balances",
    "__pyx_scope_struct_14__iter_user_event_queue",
    "__pyx_scope_struct_15__user_stream_event_listener",
    "__pyx_scope_struct_16__polling_update",
    "__pyx_scope_struct_17__update_balances",
    "__pyx_scope_struct_18__update_trading_rules",
    "__pyx_scope_struct_19__update_order_status",
    "__pyx_scope_struct_1_get_active_exchange_markets",
    "__pyx_scope_struct_20_api_request",
    "__pyx_scope_struct_2__get_next_order_id",
    "__pyx_scope_struct_3__serialize_order",
    "__pyx_scope_struct_4_place_order",
    "__pyx_scope_struct_5_execute_order",
    "__pyx_scope_struct_6_execute_buy",
    "__pyx_scope_struct_7_execute_sell",
    "__pyx_scope_struct_8_cancel_order",
    "__pyx_scope_struct_9_cancel_all",
    "__pyx_scope_struct__wait_for_completion",
    "int64_t",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_loopring_exchange(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_loopring_exchange},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "loopring_exchange",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0x, __pyx_k_0x, sizeof(__pyx_k_0x), 0, 1, 0, 0},
  {&__pyx_kp_u_0x0, __pyx_k_0x0, sizeof(__pyx_k_0x0), 0, 1, 0, 0},
  {&__pyx_kp_u_1e, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {&__pyx_n_s_ACCOUNT_INFO_ROUTE, __pyx_k_ACCOUNT_INFO_ROUTE, sizeof(__pyx_k_ACCOUNT_INFO_ROUTE), 0, 0, 1, 1},
  {&__pyx_n_s_API_CALL_TIMEOUT, __pyx_k_API_CALL_TIMEOUT, sizeof(__pyx_k_API_CALL_TIMEOUT), 0, 0, 1, 1},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_s_BALANCES_INFO_ROUTE, __pyx_k_BALANCES_INFO_ROUTE, sizeof(__pyx_k_BALANCES_INFO_ROUTE), 0, 0, 1, 1},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_n_s_BUY_ORDER_COMPLETED_EVENT, __pyx_k_BUY_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_BUY_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_BUY_ORDER_CREATED_EVENT, __pyx_k_BUY_ORDER_CREATED_EVENT, sizeof(__pyx_k_BUY_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompleted, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedEvent, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreated, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedEvent, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_kp_u_Cancel_order_returned_code, __pyx_k_Cancel_order_returned_code, sizeof(__pyx_k_Cancel_order_returned_code), 0, 1, 0, 0},
  {&__pyx_n_s_CancellationResult, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {&__pyx_n_s_CancelledError, __pyx_k_CancelledError, sizeof(__pyx_k_CancelledError), 0, 0, 1, 1},
  {&__pyx_n_s_ClientSession, __pyx_k_ClientSession, sizeof(__pyx_k_ClientSession), 0, 0, 1, 1},
  {&__pyx_kp_u_Content_Type, __pyx_k_Content_Type, sizeof(__pyx_k_Content_Type), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_fetch_user_events_from, __pyx_k_Could_not_fetch_user_events_from, sizeof(__pyx_k_Could_not_fetch_user_events_from), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_set_balance, __pyx_k_Could_not_set_balance, sizeof(__pyx_k_Could_not_set_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Created, __pyx_k_Created, sizeof(__pyx_k_Created), 0, 1, 0, 0},
  {&__pyx_n_u_DELETE, __pyx_k_DELETE, sizeof(__pyx_k_DELETE), 0, 1, 0, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_n_s_EXCHANGE_INFO_ROUTE, __pyx_k_EXCHANGE_INFO_ROUTE, sizeof(__pyx_k_EXCHANGE_INFO_ROUTE), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_fetching_data_from, __pyx_k_Error_fetching_data_from, sizeof(__pyx_k_Error_fetching_data_from), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_getting_the_next_order_id, __pyx_k_Error_getting_the_next_order_id, sizeof(__pyx_k_Error_getting_the_next_order_id), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_submitting, __pyx_k_Error_submitting, sizeof(__pyx_k_Error_submitting), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_updating_trading_rules, __pyx_k_Error_updating_trading_rules, sizeof(__pyx_k_Error_updating_trading_rules), 0, 1, 0, 0},
  {&__pyx_n_s_Event, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
  {&__pyx_kp_u_Event_2, __pyx_k_Event_2, sizeof(__pyx_k_Event_2), 0, 1, 0, 0},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_n_s_FQ, __pyx_k_FQ, sizeof(__pyx_k_FQ), 0, 0, 1, 1},
  {&__pyx_kp_u_Failed_to_cancel_order, __pyx_k_Failed_to_cancel_order, sizeof(__pyx_k_Failed_to_cancel_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_fetch_tracked_Loopring, __pyx_k_Failed_to_fetch_tracked_Loopring, sizeof(__pyx_k_Failed_to_fetch_tracked_Loopring), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_fetch_updates_on_Loopr, __pyx_k_Failed_to_fetch_updates_on_Loopr, sizeof(__pyx_k_Failed_to_fetch_updates_on_Loopr), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_update_Loopring_order, __pyx_k_Failed_to_update_Loopring_order, sizeof(__pyx_k_Failed_to_update_Loopring_order), 0, 1, 0, 0},
  {&__pyx_n_u_GET, __pyx_k_GET, sizeof(__pyx_k_GET), 0, 1, 0, 1},
  {&__pyx_n_s_GET_ORDER_ROUTE, __pyx_k_GET_ORDER_ROUTE, sizeof(__pyx_k_GET_ORDER_ROUTE), 0, 0, 1, 1},
  {&__pyx_kp_u_HTTP_status_is, __pyx_k_HTTP_status_is, sizeof(__pyx_k_HTTP_status_is), 0, 1, 0, 0},
  {&__pyx_n_s_HummingbotLogger, __pyx_k_HummingbotLogger, sizeof(__pyx_k_HummingbotLogger), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Issue_with_Loopring_API, __pyx_k_Issue_with_Loopring_API, sizeof(__pyx_k_Issue_with_Loopring_API), 0, 1, 0, 0},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_n_s_LIMIT_MAKER, __pyx_k_LIMIT_MAKER, sizeof(__pyx_k_LIMIT_MAKER), 0, 0, 1, 1},
  {&__pyx_kp_u_LIMIT_orders_are_not_supported, __pyx_k_LIMIT_orders_are_not_supported, sizeof(__pyx_k_LIMIT_orders_are_not_supported), 0, 1, 0, 0},
  {&__pyx_n_s_LatchingEventResponder, __pyx_k_LatchingEventResponder, sizeof(__pyx_k_LatchingEventResponder), 0, 0, 1, 1},
  {&__pyx_n_s_LatchingEventResponder___call, __pyx_k_LatchingEventResponder___call, sizeof(__pyx_k_LatchingEventResponder___call), 0, 0, 1, 1},
  {&__pyx_n_s_LatchingEventResponder___init, __pyx_k_LatchingEventResponder___init, sizeof(__pyx_k_LatchingEventResponder___init), 0, 0, 1, 1},
  {&__pyx_n_s_LatchingEventResponder__reduce, __pyx_k_LatchingEventResponder__reduce, sizeof(__pyx_k_LatchingEventResponder__reduce), 0, 0, 1, 1},
  {&__pyx_n_s_LatchingEventResponder_cancel_on, __pyx_k_LatchingEventResponder_cancel_on, sizeof(__pyx_k_LatchingEventResponder_cancel_on), 0, 0, 1, 1},
  {&__pyx_n_s_LatchingEventResponder_wait_for, __pyx_k_LatchingEventResponder_wait_for, sizeof(__pyx_k_LatchingEventResponder_wait_for), 0, 0, 1, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_Lock, __pyx_k_Lock, sizeof(__pyx_k_Lock), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringAPIOrderBookDataSource, __pyx_k_LoopringAPIOrderBookDataSource, sizeof(__pyx_k_LoopringAPIOrderBookDataSource), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringAPITokenConfigurationDat, __pyx_k_LoopringAPITokenConfigurationDat, sizeof(__pyx_k_LoopringAPITokenConfigurationDat), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringAuth, __pyx_k_LoopringAuth, sizeof(__pyx_k_LoopringAuth), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange, __pyx_k_LoopringExchange, sizeof(__pyx_k_LoopringExchange), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchangeTransactionTrack, __pyx_k_LoopringExchangeTransactionTrack, sizeof(__pyx_k_LoopringExchangeTransactionTrack), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__get_next_order, __pyx_k_LoopringExchange__get_next_order, sizeof(__pyx_k_LoopringExchange__get_next_order), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__iter_user_even, __pyx_k_LoopringExchange__iter_user_even, sizeof(__pyx_k_LoopringExchange__iter_user_even), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__polling_update, __pyx_k_LoopringExchange__polling_update, sizeof(__pyx_k_LoopringExchange__polling_update), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__serialize_orde, __pyx_k_LoopringExchange__serialize_orde, sizeof(__pyx_k_LoopringExchange__serialize_orde), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__set_balances, __pyx_k_LoopringExchange__set_balances, sizeof(__pyx_k_LoopringExchange__set_balances), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__update_balance, __pyx_k_LoopringExchange__update_balance, sizeof(__pyx_k_LoopringExchange__update_balance), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__update_order_s, __pyx_k_LoopringExchange__update_order_s, sizeof(__pyx_k_LoopringExchange__update_order_s), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__update_trading, __pyx_k_LoopringExchange__update_trading, sizeof(__pyx_k_LoopringExchange__update_trading), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange__user_stream_ev, __pyx_k_LoopringExchange__user_stream_ev, sizeof(__pyx_k_LoopringExchange__user_stream_ev), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_api_request, __pyx_k_LoopringExchange_api_request, sizeof(__pyx_k_LoopringExchange_api_request), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_cancel_all, __pyx_k_LoopringExchange_cancel_all, sizeof(__pyx_k_LoopringExchange_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_cancel_order, __pyx_k_LoopringExchange_cancel_order, sizeof(__pyx_k_LoopringExchange_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_check_network, __pyx_k_LoopringExchange_check_network, sizeof(__pyx_k_LoopringExchange_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_execute_buy, __pyx_k_LoopringExchange_execute_buy, sizeof(__pyx_k_LoopringExchange_execute_buy), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_execute_order, __pyx_k_LoopringExchange_execute_order, sizeof(__pyx_k_LoopringExchange_execute_order), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_execute_sell, __pyx_k_LoopringExchange_execute_sell, sizeof(__pyx_k_LoopringExchange_execute_sell), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_get_active_exch, __pyx_k_LoopringExchange_get_active_exch, sizeof(__pyx_k_LoopringExchange_get_active_exch), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_place_order, __pyx_k_LoopringExchange_place_order, sizeof(__pyx_k_LoopringExchange_place_order), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_start_network, __pyx_k_LoopringExchange_start_network, sizeof(__pyx_k_LoopringExchange_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringExchange_stop_network, __pyx_k_LoopringExchange_stop_network, sizeof(__pyx_k_LoopringExchange_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringOrderBookTracker, __pyx_k_LoopringOrderBookTracker, sizeof(__pyx_k_LoopringOrderBookTracker), 0, 0, 1, 1},
  {&__pyx_n_s_LoopringUserStreamTracker, __pyx_k_LoopringUserStreamTracker, sizeof(__pyx_k_LoopringUserStreamTracker), 0, 0, 1, 1},
  {&__pyx_n_s_MAINNET_API_REST_ENDPOINT, __pyx_k_MAINNET_API_REST_ENDPOINT, sizeof(__pyx_k_MAINNET_API_REST_ENDPOINT), 0, 0, 1, 1},
  {&__pyx_n_s_MAINNET_WS_ENDPOINT, __pyx_k_MAINNET_WS_ENDPOINT, sizeof(__pyx_k_MAINNET_WS_ENDPOINT), 0, 0, 1, 1},
  {&__pyx_n_u_MAKER_ONLY, __pyx_k_MAKER_ONLY, sizeof(__pyx_k_MAKER_ONLY), 0, 1, 0, 1},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_n_s_MARKETS_INFO_ROUTE, __pyx_k_MARKETS_INFO_ROUTE, sizeof(__pyx_k_MARKETS_INFO_ROUTE), 0, 0, 1, 1},
  {&__pyx_kp_u_MARKET_orders_are_not_supported, __pyx_k_MARKET_orders_are_not_supported, sizeof(__pyx_k_MARKET_orders_are_not_supported), 0, 1, 0, 0},
  {&__pyx_n_s_MAXIMUM_FILL_COUNT, __pyx_k_MAXIMUM_FILL_COUNT, sizeof(__pyx_k_MAXIMUM_FILL_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_MarketEvent, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketOrderFailureEvent, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {&__pyx_n_s_NEXT_ORDER_ID, __pyx_k_NEXT_ORDER_ID, sizeof(__pyx_k_NEXT_ORDER_ID), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_CONNECTED, __pyx_k_NOT_CONNECTED, sizeof(__pyx_k_NOT_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_u_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_order_book_exists_for, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_ORDER_CANCELLED_EVENT, __pyx_k_ORDER_CANCELLED_EVENT, sizeof(__pyx_k_ORDER_CANCELLED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_CANCEL_ROUTE, __pyx_k_ORDER_CANCEL_ROUTE, sizeof(__pyx_k_ORDER_CANCEL_ROUTE), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_EXPIRED_EVENT, __pyx_k_ORDER_EXPIRED_EVENT, sizeof(__pyx_k_ORDER_EXPIRED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_FAILURE_EVENT, __pyx_k_ORDER_FAILURE_EVENT, sizeof(__pyx_k_ORDER_FAILURE_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_FILLED_EVENT, __pyx_k_ORDER_FILLED_EVENT, sizeof(__pyx_k_ORDER_FILLED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_ROUTE, __pyx_k_ORDER_ROUTE, sizeof(__pyx_k_ORDER_ROUTE), 0, 0, 1, 1},
  {&__pyx_n_s_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {&__pyx_kp_u_Order, __pyx_k_Order, sizeof(__pyx_k_Order), 0, 1, 0, 0},
  {&__pyx_n_s_OrderCancelled, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledEvent, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpired, __pyx_k_OrderExpired, sizeof(__pyx_k_OrderExpired), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpiredEvent, __pyx_k_OrderExpiredEvent, sizeof(__pyx_k_OrderExpiredEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailure, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilled, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledEvent, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_kp_u_Order_amount, __pyx_k_Order_amount, sizeof(__pyx_k_Order_amount), 0, 1, 0, 0},
  {&__pyx_kp_u_Order_notional_value, __pyx_k_Order_notional_value, sizeof(__pyx_k_Order_notional_value), 0, 1, 0, 0},
  {&__pyx_n_u_POST, __pyx_k_POST, sizeof(__pyx_k_POST), 0, 1, 0, 1},
  {&__pyx_n_s_PoseidonEdDSA, __pyx_k_PoseidonEdDSA, sizeof(__pyx_k_PoseidonEdDSA), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_ROUND_DOWN, __pyx_k_ROUND_DOWN, sizeof(__pyx_k_ROUND_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_s_SELL_ORDER_COMPLETED_EVENT, __pyx_k_SELL_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_SELL_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_SELL_ORDER_CREATED_EVENT, __pyx_k_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_SNARK_SCALAR_FIELD, __pyx_k_SNARK_SCALAR_FIELD, sizeof(__pyx_k_SNARK_SCALAR_FIELD), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompleted, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedEvent, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreated, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedEvent, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_kp_u_Successfully_cancelled_order, __pyx_k_Successfully_cancelled_order, sizeof(__pyx_k_Successfully_cancelled_order), 0, 1, 0, 0},
  {&__pyx_n_s_TOKENS_INFO_ROUTE, __pyx_k_TOKENS_INFO_ROUTE, sizeof(__pyx_k_TOKENS_INFO_ROUTE), 0, 0, 1, 1},
  {&__pyx_kp_u_The_market_buy_order, __pyx_k_The_market_buy_order, sizeof(__pyx_k_The_market_buy_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_market_order, __pyx_k_The_market_order, sizeof(__pyx_k_The_market_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_market_sell_order, __pyx_k_The_market_sell_order, sizeof(__pyx_k_The_market_sell_order), 0, 1, 0, 0},
  {&__pyx_n_s_TimeoutError, __pyx_k_TimeoutError, sizeof(__pyx_k_TimeoutError), 0, 0, 1, 1},
  {&__pyx_n_s_TradeFee, __pyx_k_TradeFee, sizeof(__pyx_k_TradeFee), 0, 0, 1, 1},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE, __pyx_k_UNRECOGNIZED_ORDER_DEBOUCE, sizeof(__pyx_k_UNRECOGNIZED_ORDER_DEBOUCE), 0, 0, 1, 1},
  {&__pyx_kp_u_Unexpected_error_in_user_stream, __pyx_k_Unexpected_error_in_user_stream, sizeof(__pyx_k_Unexpected_error_in_user_stream), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_error_Retrying_after_1_s, __pyx_k_Unknown_error_Retrying_after_1_s, sizeof(__pyx_k_Unknown_error_Retrying_after_1_s), 0, 1, 0, 0},
  {&__pyx_kp_u_Unrecognized_order_ID_from_user, __pyx_k_Unrecognized_order_ID_from_user, sizeof(__pyx_k_Unrecognized_order_ID_from_user), 0, 1, 0, 0},
  {&__pyx_kp_u_Unrecognized_user_stream_event_t, __pyx_k_Unrecognized_user_stream_event_t, sizeof(__pyx_k_Unrecognized_user_stream_event_t), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Web3Wallet, __pyx_k_Web3Wallet, sizeof(__pyx_k_Web3Wallet), 0, 0, 1, 1},
  {&__pyx_kp_u_X_API_SIG, __pyx_k_X_API_SIG, sizeof(__pyx_k_X_API_SIG), 0, 1, 0, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 0},
  {&__pyx_n_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 1},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_n_u_account, __pyx_k_account, sizeof(__pyx_k_account), 0, 1, 0, 1},
  {&__pyx_n_u_accountId, __pyx_k_accountId, sizeof(__pyx_k_accountId), 0, 1, 0, 1},
  {&__pyx_kp_u_accountId_2, __pyx_k_accountId_2, sizeof(__pyx_k_accountId_2), 0, 1, 0, 0},
  {&__pyx_n_u_account_balances, __pyx_k_account_balances, sizeof(__pyx_k_account_balances), 0, 1, 0, 1},
  {&__pyx_n_s_aenter, __pyx_k_aenter, sizeof(__pyx_k_aenter), 0, 0, 1, 1},
  {&__pyx_n_s_aexit, __pyx_k_aexit, sizeof(__pyx_k_aexit), 0, 0, 1, 1},
  {&__pyx_n_s_aiohttp, __pyx_k_aiohttp, sizeof(__pyx_k_aiohttp), 0, 0, 1, 1},
  {&__pyx_n_s_aiter, __pyx_k_aiter, sizeof(__pyx_k_aiter), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_u_allOrNone, __pyx_k_allOrNone, sizeof(__pyx_k_allOrNone), 0, 1, 0, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_u_amountLocked, __pyx_k_amountLocked, sizeof(__pyx_k_amountLocked), 0, 1, 0, 1},
  {&__pyx_n_s_anext, __pyx_k_anext, sizeof(__pyx_k_anext), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_api_request, __pyx_k_api_request, sizeof(__pyx_k_api_request), 0, 0, 1, 1},
  {&__pyx_kp_u_api_v3_account, __pyx_k_api_v3_account, sizeof(__pyx_k_api_v3_account), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_exchange_markets, __pyx_k_api_v3_exchange_markets, sizeof(__pyx_k_api_v3_exchange_markets), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_exchange_tokens, __pyx_k_api_v3_exchange_tokens, sizeof(__pyx_k_api_v3_exchange_tokens), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_order, __pyx_k_api_v3_order, sizeof(__pyx_k_api_v3_order), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_order_2, __pyx_k_api_v3_order_2, sizeof(__pyx_k_api_v3_order_2), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_storageId, __pyx_k_api_v3_storageId, sizeof(__pyx_k_api_v3_storageId), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_timestamp, __pyx_k_api_v3_timestamp, sizeof(__pyx_k_api_v3_timestamp), 0, 1, 0, 0},
  {&__pyx_kp_u_api_v3_user_balances, __pyx_k_api_v3_user_balances, sizeof(__pyx_k_api_v3_user_balances), 0, 1, 0, 0},
  {&__pyx_n_s_app_warning_msg, __pyx_k_app_warning_msg, sizeof(__pyx_k_app_warning_msg), 0, 0, 1, 1},
  {&__pyx_kp_u_application_json, __pyx_k_application_json, sizeof(__pyx_k_application_json), 0, 1, 0, 0},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_as_cancelled, __pyx_k_as_cancelled, sizeof(__pyx_k_as_cancelled), 0, 1, 0, 0},
  {&__pyx_n_s_as_tuple, __pyx_k_as_tuple, sizeof(__pyx_k_as_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_tasks, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {&__pyx_kp_u_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {&__pyx_n_s_await, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {&__pyx_n_u_baseFilled, __pyx_k_baseFilled, sizeof(__pyx_k_baseFilled), 0, 1, 0, 1},
  {&__pyx_n_u_baseTokenId, __pyx_k_baseTokenId, sizeof(__pyx_k_baseTokenId), 0, 1, 0, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_s_binascii, __pyx_k_binascii, sizeof(__pyx_k_binascii), 0, 0, 1, 1},
  {&__pyx_kp_u_buy, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 0},
  {&__pyx_n_u_buyToken, __pyx_k_buyToken, sizeof(__pyx_k_buyToken), 0, 1, 0, 1},
  {&__pyx_n_s_c_did_timeout_tx, __pyx_k_c_did_timeout_tx, sizeof(__pyx_k_c_did_timeout_tx), 0, 0, 1, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_callback_2, __pyx_k_callback_2, sizeof(__pyx_k_callback_2), 0, 0, 1, 1},
  {&__pyx_n_s_cancel, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_all, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_all_locals_set_cancellati, __pyx_k_cancel_all_locals_set_cancellati, sizeof(__pyx_k_cancel_all_locals_set_cancellati), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_one, __pyx_k_cancel_one, sizeof(__pyx_k_cancel_one), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_check_network, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_u_clientOrderId, __pyx_k_clientOrderId, sizeof(__pyx_k_clientOrderId), 0, 1, 0, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_u_code, __pyx_k_code, sizeof(__pyx_k_code), 0, 1, 0, 1},
  {&__pyx_n_s_completed, __pyx_k_completed, sizeof(__pyx_k_completed), 0, 0, 1, 1},
  {&__pyx_n_s_configure, __pyx_k_configure, sizeof(__pyx_k_configure), 0, 0, 1, 1},
  {&__pyx_n_s_created_at, __pyx_k_created_at, sizeof(__pyx_k_created_at), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_u_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 1, 0, 1},
  {&__pyx_n_s_data_source, __pyx_k_data_source, sizeof(__pyx_k_data_source), 0, 0, 1, 1},
  {&__pyx_n_s_debug, __pyx_k_debug, sizeof(__pyx_k_debug), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_description, __pyx_k_description, sizeof(__pyx_k_description), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
  {&__pyx_n_u_eddsaSignature, __pyx_k_eddsaSignature, sizeof(__pyx_k_eddsaSignature), 0, 1, 0, 1},
  {&__pyx_n_u_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 1, 0, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_encode_request, __pyx_k_encode_request, sizeof(__pyx_k_encode_request), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_estimate_fee, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {&__pyx_n_s_ethsnarks_loopring, __pyx_k_ethsnarks_loopring, sizeof(__pyx_k_ethsnarks_loopring), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_u_exchange, __pyx_k_exchange, sizeof(__pyx_k_exchange), 0, 1, 0, 1},
  {&__pyx_n_s_exchange_order_id, __pyx_k_exchange_order_id, sizeof(__pyx_k_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_execute_buy, __pyx_k_execute_buy, sizeof(__pyx_k_execute_buy), 0, 0, 1, 1},
  {&__pyx_n_s_execute_order, __pyx_k_execute_order, sizeof(__pyx_k_execute_order), 0, 0, 1, 1},
  {&__pyx_n_s_execute_sell, __pyx_k_execute_sell, sizeof(__pyx_k_execute_sell), 0, 0, 1, 1},
  {&__pyx_n_s_exponent, __pyx_k_exponent, sizeof(__pyx_k_exponent), 0, 0, 1, 1},
  {&__pyx_n_u_false, __pyx_k_false, sizeof(__pyx_k_false), 0, 1, 0, 1},
  {&__pyx_n_u_fee, __pyx_k_fee, sizeof(__pyx_k_fee), 0, 1, 0, 1},
  {&__pyx_n_u_fillAmountBOrS, __pyx_k_fillAmountBOrS, sizeof(__pyx_k_fillAmountBOrS), 0, 1, 0, 1},
  {&__pyx_n_u_filledFee, __pyx_k_filledFee, sizeof(__pyx_k_filledFee), 0, 1, 0, 1},
  {&__pyx_n_u_filledSize, __pyx_k_filledSize, sizeof(__pyx_k_filledSize), 0, 1, 0, 1},
  {&__pyx_n_u_filledVolume, __pyx_k_filledVolume, sizeof(__pyx_k_filledVolume), 0, 1, 0, 1},
  {&__pyx_n_u_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 1, 0, 1},
  {&__pyx_kp_u_for, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
  {&__pyx_n_s_force_sync, __pyx_k_force_sync, sizeof(__pyx_k_force_sync), 0, 0, 1, 1},
  {&__pyx_kp_u_from_api_code, __pyx_k_from_api_code, sizeof(__pyx_k_from_api_code), 0, 1, 0, 0},
  {&__pyx_n_s_from_json, __pyx_k_from_json, sizeof(__pyx_k_from_json), 0, 0, 1, 1},
  {&__pyx_n_s_from_loopring_order, __pyx_k_from_loopring_order, sizeof(__pyx_k_from_loopring_order), 0, 0, 1, 1},
  {&__pyx_n_s_gather, __pyx_k_gather, sizeof(__pyx_k_gather), 0, 0, 1, 1},
  {&__pyx_n_s_generate_auth_dict, __pyx_k_generate_auth_dict, sizeof(__pyx_k_generate_auth_dict), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_exchange_markets, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {&__pyx_n_s_get_next_order_id, __pyx_k_get_next_order_id, sizeof(__pyx_k_get_next_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_symbol, __pyx_k_get_symbol, sizeof(__pyx_k_get_symbol), 0, 0, 1, 1},
  {&__pyx_n_s_get_tokenid, __pyx_k_get_tokenid, sizeof(__pyx_k_get_tokenid), 0, 0, 1, 1},
  {&__pyx_n_s_get_tokens, __pyx_k_get_tokens, sizeof(__pyx_k_get_tokens), 0, 0, 1, 1},
  {&__pyx_n_s_get_tracking_nonce, __pyx_k_get_tracking_nonce, sizeof(__pyx_k_get_tracking_nonce), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_u_has_completed_according_to_user, __pyx_k_has_completed_according_to_user, sizeof(__pyx_k_has_completed_according_to_user), 0, 1, 0, 0},
  {&__pyx_kp_u_has_failed_according_to_order_s, __pyx_k_has_failed_according_to_order_s, sizeof(__pyx_k_has_failed_according_to_order_s), 0, 1, 0, 0},
  {&__pyx_kp_u_has_timed_out_and_putatively_fa, __pyx_k_has_timed_out_and_putatively_fa, sizeof(__pyx_k_has_timed_out_and_putatively_fa), 0, 1, 0, 0},
  {&__pyx_n_u_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 1, 0, 1},
  {&__pyx_n_s_hashlib, __pyx_k_hashlib, sizeof(__pyx_k_hashlib), 0, 0, 1, 1},
  {&__pyx_n_s_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_hexdigest, __pyx_k_hexdigest, sizeof(__pyx_k_hexdigest), 0, 0, 1, 1},
  {&__pyx_n_s_http_method, __pyx_k_http_method, sizeof(__pyx_k_http_method), 0, 0, 1, 1},
  {&__pyx_kp_u_https_api3_loopring_io, __pyx_k_https_api3_loopring_io, sizeof(__pyx_k_https_api3_loopring_io), 0, 1, 0, 0},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_lo, __pyx_k_hummingbot_connector_exchange_lo, sizeof(__pyx_k_hummingbot_connector_exchange_lo), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_k_hummingbot_connector_exchange_lo_2, sizeof(__pyx_k_hummingbot_connector_exchange_lo_2), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_connector_exchange_lo_3, __pyx_k_hummingbot_connector_exchange_lo_3, sizeof(__pyx_k_hummingbot_connector_exchange_lo_3), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_lo_4, __pyx_k_hummingbot_connector_exchange_lo_4, sizeof(__pyx_k_hummingbot_connector_exchange_lo_4), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_lo_5, __pyx_k_hummingbot_connector_exchange_lo_5, sizeof(__pyx_k_hummingbot_connector_exchange_lo_5), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_lo_6, __pyx_k_hummingbot_connector_exchange_lo_6, sizeof(__pyx_k_hummingbot_connector_exchange_lo_6), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_lo_7, __pyx_k_hummingbot_connector_exchange_lo_7, sizeof(__pyx_k_hummingbot_connector_exchange_lo_7), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_async_util, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_k_hummingbot_core_utils_tracking_n, sizeof(__pyx_k_hummingbot_core_utils_tracking_n), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_logger, __pyx_k_hummingbot_logger, sizeof(__pyx_k_hummingbot_logger), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_wallet_ethereum_web3, __pyx_k_hummingbot_wallet_ethereum_web3, sizeof(__pyx_k_hummingbot_wallet_ethereum_web3), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_u_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 1, 0, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_cancelled, __pyx_k_is_cancelled, sizeof(__pyx_k_is_cancelled), 0, 0, 1, 1},
  {&__pyx_n_s_is_done, __pyx_k_is_done, sizeof(__pyx_k_is_done), 0, 0, 1, 1},
  {&__pyx_n_s_is_failure, __pyx_k_is_failure, sizeof(__pyx_k_is_failure), 0, 0, 1, 1},
  {&__pyx_kp_u_is_greater_than_the_maximum_all, __pyx_k_is_greater_than_the_maximum_all, sizeof(__pyx_k_is_greater_than_the_maximum_all), 0, 1, 0, 0},
  {&__pyx_kp_u_is_less_than_the_minimum_allowa, __pyx_k_is_less_than_the_minimum_allowa, sizeof(__pyx_k_is_less_than_the_minimum_allowa), 0, 1, 0, 0},
  {&__pyx_kp_u_is_less_than_the_minimum_allowa_2, __pyx_k_is_less_than_the_minimum_allowa_2, sizeof(__pyx_k_is_less_than_the_minimum_allowa_2), 0, 1, 0, 0},
  {&__pyx_n_s_is_set, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
  {&__pyx_n_s_is_snapshot, __pyx_k_is_snapshot, sizeof(__pyx_k_is_snapshot), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter_user_event_queue, __pyx_k_iter_user_event_queue, sizeof(__pyx_k_iter_user_event_queue), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_loads, __pyx_k_loads, sizeof(__pyx_k_loads), 0, 0, 1, 1},
  {&__pyx_n_u_locked, __pyx_k_locked, sizeof(__pyx_k_locked), 0, 1, 0, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_u_loopring, __pyx_k_loopring, sizeof(__pyx_k_loopring), 0, 1, 0, 1},
  {&__pyx_n_s_loopring_accountid, __pyx_k_loopring_accountid, sizeof(__pyx_k_loopring_accountid), 0, 0, 1, 1},
  {&__pyx_n_s_loopring_api_key, __pyx_k_loopring_api_key, sizeof(__pyx_k_loopring_api_key), 0, 0, 1, 1},
  {&__pyx_n_s_loopring_auth, __pyx_k_loopring_auth, sizeof(__pyx_k_loopring_auth), 0, 0, 1, 1},
  {&__pyx_n_s_loopring_exchangeaddress, __pyx_k_loopring_exchangeaddress, sizeof(__pyx_k_loopring_exchangeaddress), 0, 0, 1, 1},
  {&__pyx_n_s_loopring_private_key, __pyx_k_loopring_private_key, sizeof(__pyx_k_loopring_private_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 1, 0, 1},
  {&__pyx_n_u_markets, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 1, 0, 1},
  {&__pyx_kp_u_marking, __pyx_k_marking, sizeof(__pyx_k_marking), 0, 1, 0, 0},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_u_maxFeeBips, __pyx_k_maxFeeBips, sizeof(__pyx_k_maxFeeBips), 0, 1, 0, 1},
  {&__pyx_n_s_max_order_size, __pyx_k_max_order_size, sizeof(__pyx_k_max_order_size), 0, 0, 1, 1},
  {&__pyx_n_u_maximum, __pyx_k_maximum, sizeof(__pyx_k_maximum), 0, 1, 0, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_u_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 1, 0, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_min_base_amount_increment, __pyx_k_min_base_amount_increment, sizeof(__pyx_k_min_base_amount_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_notional_size, __pyx_k_min_notional_size, sizeof(__pyx_k_min_notional_size), 0, 0, 1, 1},
  {&__pyx_n_s_min_order_size, __pyx_k_min_order_size, sizeof(__pyx_k_min_order_size), 0, 0, 1, 1},
  {&__pyx_n_s_min_price_increment, __pyx_k_min_price_increment, sizeof(__pyx_k_min_price_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_quote_amount_increment, __pyx_k_min_quote_amount_increment, sizeof(__pyx_k_min_quote_amount_increment), 0, 0, 1, 1},
  {&__pyx_n_u_minimum, __pyx_k_minimum, sizeof(__pyx_k_minimum), 0, 1, 0, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_network, __pyx_k_network, sizeof(__pyx_k_network), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_now, __pyx_k_now, sizeof(__pyx_k_now), 0, 0, 1, 1},
  {&__pyx_n_s_num_d, __pyx_k_num_d, sizeof(__pyx_k_num_d), 0, 0, 1, 1},
  {&__pyx_n_s_num_expected, __pyx_k_num_expected, sizeof(__pyx_k_num_expected), 0, 0, 1, 1},
  {&__pyx_n_s_num_remaining, __pyx_k_num_remaining, sizeof(__pyx_k_num_remaining), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_oce, __pyx_k_oce, sizeof(__pyx_k_oce), 0, 0, 1, 1},
  {&__pyx_kp_u_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 0},
  {&__pyx_n_u_orderAmounts, __pyx_k_orderAmounts, sizeof(__pyx_k_orderAmounts), 0, 1, 0, 1},
  {&__pyx_n_u_orderHash, __pyx_k_orderHash, sizeof(__pyx_k_orderHash), 0, 1, 0, 1},
  {&__pyx_n_u_orderId, __pyx_k_orderId, sizeof(__pyx_k_orderId), 0, 1, 0, 1},
  {&__pyx_n_u_orderType, __pyx_k_orderType, sizeof(__pyx_k_orderType), 0, 1, 0, 1},
  {&__pyx_n_u_order_2, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 1, 0, 1},
  {&__pyx_n_s_order_books, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {&__pyx_n_u_order_books_initialized, __pyx_k_order_books_initialized, sizeof(__pyx_k_order_books_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_kp_u_order_in_status_CANCELLED_can_t, __pyx_k_order_in_status_CANCELLED_can_t, sizeof(__pyx_k_order_in_status_CANCELLED_can_t), 0, 1, 0, 0},
  {&__pyx_n_s_order_side, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {&__pyx_kp_u_order_to_Loopring_for, __pyx_k_order_to_Loopring_for, sizeof(__pyx_k_order_to_Loopring_for), 0, 1, 0, 0},
  {&__pyx_n_s_order_type, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_orderbook_tracker_data_source, __pyx_k_orderbook_tracker_data_source, sizeof(__pyx_k_orderbook_tracker_data_source), 0, 0, 1, 1},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {&__pyx_n_s_place_order, __pyx_k_place_order, sizeof(__pyx_k_place_order), 0, 0, 1, 1},
  {&__pyx_n_s_poll_interval, __pyx_k_poll_interval, sizeof(__pyx_k_poll_interval), 0, 0, 1, 1},
  {&__pyx_n_s_polling_update, __pyx_k_polling_update, sizeof(__pyx_k_polling_update), 0, 0, 1, 1},
  {&__pyx_n_b_poseidon, __pyx_k_poseidon, sizeof(__pyx_k_poseidon), 0, 0, 0, 1},
  {&__pyx_n_s_poseidon, __pyx_k_poseidon, sizeof(__pyx_k_poseidon), 0, 0, 1, 1},
  {&__pyx_n_s_poseidon_params, __pyx_k_poseidon_params, sizeof(__pyx_k_poseidon_params), 0, 0, 1, 1},
  {&__pyx_n_u_precision, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 1, 0, 1},
  {&__pyx_n_u_precisionForPrice, __pyx_k_precisionForPrice, sizeof(__pyx_k_precisionForPrice), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_u_processing, __pyx_k_processing, sizeof(__pyx_k_processing), 0, 1, 0, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_quantize, __pyx_k_quantize, sizeof(__pyx_k_quantize), 0, 0, 1, 1},
  {&__pyx_n_s_quote, __pyx_k_quote, sizeof(__pyx_k_quote), 0, 0, 1, 1},
  {&__pyx_n_u_quoteFilled, __pyx_k_quoteFilled, sizeof(__pyx_k_quoteFilled), 0, 1, 0, 1},
  {&__pyx_n_u_quoteTokenId, __pyx_k_quoteTokenId, sizeof(__pyx_k_quoteTokenId), 0, 1, 0, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_2, __pyx_k_reduce_2, sizeof(__pyx_k_reduce_2), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_request, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {&__pyx_kp_u_response, __pyx_k_response, sizeof(__pyx_k_response), 0, 1, 0, 0},
  {&__pyx_n_s_rest_api_url, __pyx_k_rest_api_url, sizeof(__pyx_k_rest_api_url), 0, 0, 1, 1},
  {&__pyx_n_u_resultInfo, __pyx_k_resultInfo, sizeof(__pyx_k_resultInfo), 0, 1, 0, 1},
  {&__pyx_n_s_rounding, __pyx_k_rounding, sizeof(__pyx_k_rounding), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_NaN, __pyx_k_s_decimal_NaN, sizeof(__pyx_k_s_decimal_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_s_logger, __pyx_k_s_logger, sizeof(__pyx_k_s_logger), 0, 0, 1, 1},
  {&__pyx_n_s_safe, __pyx_k_safe, sizeof(__pyx_k_safe), 0, 0, 1, 1},
  {&__pyx_n_s_safe_ensure_future, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {&__pyx_n_s_secure, __pyx_k_secure, sizeof(__pyx_k_secure), 0, 0, 1, 1},
  {&__pyx_n_s_security_target, __pyx_k_security_target, sizeof(__pyx_k_security_target), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_u_sell, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 0},
  {&__pyx_n_u_sellToken, __pyx_k_sellToken, sizeof(__pyx_k_sellToken), 0, 1, 0, 1},
  {&__pyx_n_u_sellTokenId, __pyx_k_sellTokenId, sizeof(__pyx_k_sellTokenId), 0, 1, 0, 1},
  {&__pyx_n_s_sell_buy_amounts, __pyx_k_sell_buy_amounts, sizeof(__pyx_k_sell_buy_amounts), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_serialize_order, __pyx_k_serialize_order, sizeof(__pyx_k_serialize_order), 0, 0, 1, 1},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_set_balances, __pyx_k_set_balances, sizeof(__pyx_k_set_balances), 0, 0, 1, 1},
  {&__pyx_n_s_set_cancellation_status, __pyx_k_set_cancellation_status, sizeof(__pyx_k_set_cancellation_status), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sha256, __pyx_k_sha256, sizeof(__pyx_k_sha256), 0, 0, 1, 1},
  {&__pyx_n_s_sig, __pyx_k_sig, sizeof(__pyx_k_sig), 0, 0, 1, 1},
  {&__pyx_n_s_sign, __pyx_k_sign, sizeof(__pyx_k_sign), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_split_trading_pair, __pyx_k_split_trading_pair, sizeof(__pyx_k_split_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_network, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_start_tracking, __pyx_k_start_tracking, sizeof(__pyx_k_start_tracking), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_u_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {&__pyx_n_s_status_dict, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_stop_tracking, __pyx_k_stop_tracking, sizeof(__pyx_k_stop_tracking), 0, 0, 1, 1},
  {&__pyx_n_u_storageId, __pyx_k_storageId, sizeof(__pyx_k_storageId), 0, 1, 0, 1},
  {&__pyx_n_u_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 1, 0, 1},
  {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_supports_limit_orders, __pyx_k_supports_limit_orders, sizeof(__pyx_k_supports_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_supports_market_orders, __pyx_k_supports_market_orders, sizeof(__pyx_k_supports_market_orders), 0, 0, 1, 1},
  {&__pyx_n_u_taker, __pyx_k_taker, sizeof(__pyx_k_taker), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_kp_u_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 1, 0, 0},
  {&__pyx_n_s_to_json, __pyx_k_to_json, sizeof(__pyx_k_to_json), 0, 0, 1, 1},
  {&__pyx_n_s_to_limit_order, __pyx_k_to_limit_order, sizeof(__pyx_k_to_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},
  {&__pyx_n_u_tokenId, __pyx_k_tokenId, sizeof(__pyx_k_tokenId), 0, 1, 0, 1},
  {&__pyx_n_s_token_configuration, __pyx_k_token_configuration, sizeof(__pyx_k_token_configuration), 0, 0, 1, 1},
  {&__pyx_n_u_topic, __pyx_k_topic, sizeof(__pyx_k_topic), 0, 1, 0, 1},
  {&__pyx_n_u_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 1, 0, 1},
  {&__pyx_n_u_totalAmount, __pyx_k_totalAmount, sizeof(__pyx_k_totalAmount), 0, 1, 0, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_order, __pyx_k_tracked_order, sizeof(__pyx_k_tracked_order), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pairs, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_trading_required, __pyx_k_trading_required, sizeof(__pyx_k_trading_required), 0, 0, 1, 1},
  {&__pyx_n_u_trading_rule_initialized, __pyx_k_trading_rule_initialized, sizeof(__pyx_k_trading_rule_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_unpad, __pyx_k_unpad, sizeof(__pyx_k_unpad), 0, 0, 1, 1},
  {&__pyx_n_u_unsub, __pyx_k_unsub, sizeof(__pyx_k_unsub), 0, 1, 0, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_balances, __pyx_k_update_balances, sizeof(__pyx_k_update_balances), 0, 0, 1, 1},
  {&__pyx_n_s_update_exchange_order_id, __pyx_k_update_exchange_order_id, sizeof(__pyx_k_update_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_update_inflight_order, __pyx_k_update_inflight_order, sizeof(__pyx_k_update_inflight_order), 0, 0, 1, 1},
  {&__pyx_n_s_update_order_status, __pyx_k_update_order_status, sizeof(__pyx_k_update_order_status), 0, 0, 1, 1},
  {&__pyx_n_s_update_trading_rules, __pyx_k_update_trading_rules, sizeof(__pyx_k_update_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_updates, __pyx_k_updates, sizeof(__pyx_k_updates), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_urllib, __pyx_k_urllib, sizeof(__pyx_k_urllib), 0, 0, 1, 1},
  {&__pyx_n_s_user_stream, __pyx_k_user_stream, sizeof(__pyx_k_user_stream), 0, 0, 1, 1},
  {&__pyx_n_s_user_stream_event_listener, __pyx_k_user_stream_event_listener, sizeof(__pyx_k_user_stream_event_listener), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_uuid, __pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 0, 1, 1},
  {&__pyx_n_u_validSince, __pyx_k_validSince, sizeof(__pyx_k_validSince), 0, 1, 0, 1},
  {&__pyx_n_u_validUntil, __pyx_k_validUntil, sizeof(__pyx_k_validUntil), 0, 1, 0, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_u_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 1, 0, 1},
  {&__pyx_n_u_volumes, __pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 1, 0, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {&__pyx_n_s_wait_for, __pyx_k_wait_for, sizeof(__pyx_k_wait_for), 0, 0, 1, 1},
  {&__pyx_n_s_wait_for_completion, __pyx_k_wait_for_completion, sizeof(__pyx_k_wait_for_completion), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_websocket_url, __pyx_k_websocket_url, sizeof(__pyx_k_websocket_url), 0, 0, 1, 1},
  {&__pyx_kp_u_wss_ws_api3_loopring_io_v2_ws, __pyx_k_wss_ws_api3_loopring_io_v2_ws, sizeof(__pyx_k_wss_ws_api3_loopring_io_v2_ws), 0, 1, 0, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zfill, __pyx_k_zfill, sizeof(__pyx_k_zfill), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 946, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 947, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":265
 * 
 *     async def _get_next_order_id(self, token, force_sync = False):
 *         async with self._order_id_lock:             # <<<<<<<<<<<<<<
 *             next_id = self._next_order_id
 *             if force_sync or self._next_order_id.get(token) is None:
 */
  __pyx_tuple__5 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":293
 *             int(order["maxFeeBips"]),
 *             int(order["fillAmountBOrS"]),
 *             int(order.get("taker", "0x0"), 16)             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_u_taker, __pyx_kp_u_0x0); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":333
 *         # Update with signature
 * 
 *         eddsa = "0x" + "".join([hex(int(signed_message.sig.R.x))[2:].zfill(64),             # <<<<<<<<<<<<<<
 *                                 hex(int(signed_message.sig.R.y))[2:].zfill(64),
 *                                 hex(int(signed_message.sig.s))[2:].zfill(64)])
 */
  __pyx_slice__9 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__9)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__9);
  __Pyx_GIVEREF(__pyx_slice__9);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":357
 *         trading_rule = self._trading_rules[trading_pair]
 *         if order_type == OrderType.LIMIT and trading_rule.supports_limit_orders is False:
 *             raise ValueError("LIMIT orders are not supported")             # <<<<<<<<<<<<<<
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 *             raise ValueError("MARKET orders are not supported")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_LIMIT_orders_are_not_supported); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":359
 *             raise ValueError("LIMIT orders are not supported")
 *         elif order_type == OrderType.MARKET and trading_rule.supports_market_orders is False:
 *             raise ValueError("MARKET orders are not supported")             # <<<<<<<<<<<<<<
 * 
 *         if amount < trading_rule.min_order_size:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_MARKET_orders_are_not_supported); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":502
 *             self.logger().info(o + ' ' + str(s))
 * 
 *         def set_cancellation_status(oce: OrderCancelledEvent):             # <<<<<<<<<<<<<<
 *             if oce.order_id in order_status:
 *                 order_status[oce.order_id] = True
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_oce); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_set_cancellation_status, 502, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 502, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":719
 *                 raise
 *             except Exception:
 *                 self.logger().network(             # <<<<<<<<<<<<<<
 *                     "Unknown error. Retrying after 1 seconds.",
 *                     exc_info=True,
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_Unknown_error_Retrying_after_1_s); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":757
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(5.0)
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_in_user_stream); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._events cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_self__events_cannot_be_converted); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":947
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":953
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":60
 * 
 * s_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("nan")
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":61
 * s_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("nan")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_u_nan); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":64
 * 
 * 
 * def num_d(amount):             # <<<<<<<<<<<<<<
 *     return abs(Decimal(amount).normalize().as_tuple().exponent)
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_amount); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_num_d, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 64, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":68
 * 
 * 
 * def now():             # <<<<<<<<<<<<<<
 *     return int(time.time()) * 1000
 * 
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_now, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 68, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":100
 * 
 * class LatchingEventResponder(EventListener):
 *     def __init__(self, callback: any, num_expected: int):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._callback = callback
 */
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_callback, __pyx_n_s_num_expected); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_init, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 100, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":106
 *         self._num_remaining = num_expected
 * 
 *     def __call__(self, arg: any):             # <<<<<<<<<<<<<<
 *         if self._callback(arg):
 *             self._reduce()
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_arg); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_call, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 106, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":110
 *             self._reduce()
 * 
 *     def _reduce(self):             # <<<<<<<<<<<<<<
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_reduce, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 110, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":115
 *             self._completed.set()
 * 
 *     async def wait_for_completion(self, timeout: float):             # <<<<<<<<<<<<<<
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_timeout); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_wait_for_completion, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(0, 115, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":122
 *         return self._completed.is_set()
 * 
 *     def cancel_one(self):             # <<<<<<<<<<<<<<
 *         self._reduce()
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_lo_2, __pyx_n_s_cancel_one, 122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 122, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":420
 *                           amount: Decimal,
 *                           order_type: OrderType,
 *                           price: Optional[Decimal] = Decimal('NaN')):             # <<<<<<<<<<<<<<
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_n_u_NaN); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_0 = PyFloat_FromDouble(5.0); if (unlikely(!__pyx_float_5_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3600 = PyInt_FromLong(3600); if (unlikely(!__pyx_int_3600)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100001 = PyInt_FromLong(100001L); if (unlikely(!__pyx_int_100001)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_102117 = PyInt_FromLong(102117L); if (unlikely(!__pyx_int_102117)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_107003 = PyInt_FromLong(107003L); if (unlikely(!__pyx_int_107003)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3024000 = PyInt_FromLong(3024000L); if (unlikely(!__pyx_int_3024000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4294967294 = PyInt_FromString((char *)"4294967294", 0, 0); if (unlikely(!__pyx_int_4294967294)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange = &__pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base = *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_tick;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_buy = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_buy;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_sell = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_sell;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_cancel = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_cancel;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_stop_tracking_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_stop_tracking_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_get_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_balance;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_get_available_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_available_balance;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_get_order_price_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_price_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_get_order_size_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_size_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_quantize_order_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_price;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.__pyx_base.c_quantize_order_amount = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_quantize_order_amount;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.c_get_order_book = (struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_order_book;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.__pyx_base.c_get_fee = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_16LoopringExchange_c_get_fee;
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_base = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LoopringExchange, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  if (__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, __pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange;
  __pyx_t_2 = PyImport_ImportModule("hummingbot.core.data_type.transaction_tracker"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = __Pyx_ImportType(__pyx_t_2, "hummingbot.core.data_type.transaction_tracker", "TransactionTracker", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker = &__pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.__pyx_base.c_did_timeout_tx = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_34LoopringExchangeTransactionTracker_c_did_timeout_tx;
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_base = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LoopringExchangeTransactionTrack, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchangeTransactionTracker;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct__wait_for_completion;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_1_get_active_exchange_markets;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_2__get_next_order_id;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_3__serialize_order;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_4_place_order;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_5_execute_order;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_6_execute_buy;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_7_execute_sell;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_8_cancel_order;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_9_cancel_all;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_10_start_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_11_stop_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_12_check_network;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances) < 0) __PYX_ERR(0, 678, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_13__set_balances;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_14__iter_user_event_queue;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_15__user_stream_event_listener;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_16__polling_update;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_17__update_balances;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_18__update_trading_rules;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status) < 0) __PYX_ERR(0, 813, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_19__update_order_status;
  if (PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request) < 0) __PYX_ERR(0, 908, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request = &__pyx_type_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange___pyx_scope_struct_20_api_request;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(6, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(7, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(7, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 227, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 787, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 789, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(9, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(12, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(13, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase->tp_dict); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.in_flight_order_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.in_flight_order_base", "InFlightOrderBase", sizeof(struct __pyx_obj_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_20in_flight_order_base_InFlightOrderBase) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange.loopring.loopring_in_flight_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange.loopring.loopring_in_flight_order", "LoopringInFlightOrder", sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_24loopring_in_flight_order_LoopringInFlightOrder) __PYX_ERR(15, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.trading_rule"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.trading_rule", "TradingRule", sizeof(struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule) __PYX_ERR(16, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initloopring_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initloopring_exchange(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_loopring_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_loopring_exchange(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_loopring_exchange(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'loopring_exchange' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_loopring_exchange(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("loopring_exchange", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__connector__exchange__loopring__loopring_exchange) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.connector.exchange.loopring.loopring_exchange")) {
      if (unlikely(PyDict_SetItemString(modules, "hummingbot.connector.exchange.loopring.loopring_exchange", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":1
 * import aiohttp             # <<<<<<<<<<<<<<
 * import asyncio
 * import binascii
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_aiohttp, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_aiohttp, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":2
 * import aiohttp
 * import asyncio             # <<<<<<<<<<<<<<
 * import binascii
 * import json
 */
  __pyx_t_1 = __Pyx_patch_asyncio(__Pyx_Import(__pyx_n_s_asyncio, 0, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asyncio, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":3
 * import aiohttp
 * import asyncio
 * import binascii             # <<<<<<<<<<<<<<
 * import json
 * import time
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_binascii, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_binascii, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":4
 * import asyncio
 * import binascii
 * import json             # <<<<<<<<<<<<<<
 * import time
 * import uuid
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_json, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":5
 * import binascii
 * import json
 * import time             # <<<<<<<<<<<<<<
 * import uuid
 * import traceback
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":6
 * import json
 * import time
 * import uuid             # <<<<<<<<<<<<<<
 * import traceback
 * import urllib
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_uuid, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uuid, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":7
 * import time
 * import uuid
 * import traceback             # <<<<<<<<<<<<<<
 * import urllib
 * import hashlib
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_traceback, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":8
 * import uuid
 * import traceback
 * import urllib             # <<<<<<<<<<<<<<
 * import hashlib
 * from typing import (
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_urllib, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_urllib, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":9
 * import traceback
 * import urllib
 * import hashlib             # <<<<<<<<<<<<<<
 * from typing import (
 *     Any,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hashlib, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hashlib, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":11
 * import hashlib
 * from typing import (
 *     Any,             # <<<<<<<<<<<<<<
 *     Dict,
 *     List,
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Any);
  __Pyx_GIVEREF(__pyx_n_s_Any);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Any);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Optional);
  __Pyx_GIVEREF(__pyx_n_s_Optional);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_Optional);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":10
 * import urllib
 * import hashlib
 * from typing import (             # <<<<<<<<<<<<<<
 *     Any,
 *     Dict,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Any); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_List); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Optional); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Optional, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":16
 *     Optional
 * )
 * import math             # <<<<<<<<<<<<<<
 * import logging
 * from decimal import *
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":17
 * )
 * import math
 * import logging             # <<<<<<<<<<<<<<
 * from decimal import *
 * from libc.stdint cimport int64_t
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":18
 * import math
 * import logging
 * from decimal import *             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int64_t
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__38);
  __Pyx_GIVEREF(__pyx_n_s__38);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__38);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":20
 * from decimal import *
 * from libc.stdint cimport int64_t
 * from hummingbot.core.data_type.cancellation_result import CancellationResult             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_CancellationResult);
  __Pyx_GIVEREF(__pyx_n_s_CancellationResult);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_CancellationResult);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancellationResult, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":21
 * from libc.stdint cimport int64_t
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LimitOrder);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LimitOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LimitOrder, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":23
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 * from hummingbot.core.event.event_listener cimport EventListener
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":24
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet             # <<<<<<<<<<<<<<
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.connector.exchange_base import ExchangeBase
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Web3Wallet);
  __Pyx_GIVEREF(__pyx_n_s_Web3Wallet);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Web3Wallet);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_wallet_ethereum_web3, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Web3Wallet); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Web3Wallet, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":26
 * from hummingbot.wallet.ethereum.web3_wallet import Web3Wallet
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_auth import LoopringAuth
 * from hummingbot.connector.exchange.loopring.loopring_order_book_tracker import LoopringOrderBookTracker
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":27
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange.loopring.loopring_auth import LoopringAuth             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_order_book_tracker import LoopringOrderBookTracker
 * from hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source import LoopringAPIOrderBookDataSource
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LoopringAuth);
  __Pyx_GIVEREF(__pyx_n_s_LoopringAuth);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LoopringAuth);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_lo_3, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LoopringAuth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LoopringAuth, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":28
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange.loopring.loopring_auth import LoopringAuth
 * from hummingbot.connector.exchange.loopring.loopring_order_book_tracker import LoopringOrderBookTracker             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source import LoopringAPIOrderBookDataSource
 * from hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source import LoopringAPITokenConfigurationDataSource
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LoopringOrderBookTracker);
  __Pyx_GIVEREF(__pyx_n_s_LoopringOrderBookTracker);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LoopringOrderBookTracker);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_lo_4, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LoopringOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LoopringOrderBookTracker, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":29
 * from hummingbot.connector.exchange.loopring.loopring_auth import LoopringAuth
 * from hummingbot.connector.exchange.loopring.loopring_order_book_tracker import LoopringOrderBookTracker
 * from hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source import LoopringAPIOrderBookDataSource             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source import LoopringAPITokenConfigurationDataSource
 * from hummingbot.connector.exchange.loopring.loopring_user_stream_tracker import LoopringUserStreamTracker
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LoopringAPIOrderBookDataSource);
  __Pyx_GIVEREF(__pyx_n_s_LoopringAPIOrderBookDataSource);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LoopringAPIOrderBookDataSource);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_lo_5, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LoopringAPIOrderBookDataSource); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LoopringAPIOrderBookDataSource, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":30
 * from hummingbot.connector.exchange.loopring.loopring_order_book_tracker import LoopringOrderBookTracker
 * from hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source import LoopringAPIOrderBookDataSource
 * from hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source import LoopringAPITokenConfigurationDataSource             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_user_stream_tracker import LoopringUserStreamTracker
 * from hummingbot.core.utils.async_utils import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LoopringAPITokenConfigurationDat);
  __Pyx_GIVEREF(__pyx_n_s_LoopringAPITokenConfigurationDat);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LoopringAPITokenConfigurationDat);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_lo_6, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LoopringAPITokenConfigurationDat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LoopringAPITokenConfigurationDat, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":31
 * from hummingbot.connector.exchange.loopring.loopring_api_order_book_data_source import LoopringAPIOrderBookDataSource
 * from hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source import LoopringAPITokenConfigurationDataSource
 * from hummingbot.connector.exchange.loopring.loopring_user_stream_tracker import LoopringUserStreamTracker             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.async_utils import (
 *     safe_ensure_future,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LoopringUserStreamTracker);
  __Pyx_GIVEREF(__pyx_n_s_LoopringUserStreamTracker);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LoopringUserStreamTracker);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_lo_7, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LoopringUserStreamTracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LoopringUserStreamTracker, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":33
 * from hummingbot.connector.exchange.loopring.loopring_user_stream_tracker import LoopringUserStreamTracker
 * from hummingbot.core.utils.async_utils import (
 *     safe_ensure_future,             # <<<<<<<<<<<<<<
 * )
 * from hummingbot.core.event.events import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_safe_ensure_future);
  __Pyx_GIVEREF(__pyx_n_s_safe_ensure_future);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_safe_ensure_future);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":32
 * from hummingbot.connector.exchange.loopring.loopring_api_token_configuration_data_source import LoopringAPITokenConfigurationDataSource
 * from hummingbot.connector.exchange.loopring.loopring_user_stream_tracker import LoopringUserStreamTracker
 * from hummingbot.core.utils.async_utils import (             # <<<<<<<<<<<<<<
 *     safe_ensure_future,
 * )
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_async_util, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_ensure_future, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":36
 * )
 * from hummingbot.core.event.events import (
 *     MarketEvent,             # <<<<<<<<<<<<<<
 *     BuyOrderCompletedEvent,
 *     SellOrderCompletedEvent,
 */
  __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketEvent);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_SellOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_OrderCancelledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderCancelledEvent);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_OrderCancelledEvent);
  __Pyx_INCREF(__pyx_n_s_OrderExpiredEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderExpiredEvent);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_OrderExpiredEvent);
  __Pyx_INCREF(__pyx_n_s_OrderFilledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderFilledEvent);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_OrderFilledEvent);
  __Pyx_INCREF(__pyx_n_s_MarketOrderFailureEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketOrderFailureEvent);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_MarketOrderFailureEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_SellOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_TradeType);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_OrderType);
  __Pyx_INCREF(__pyx_n_s_TradeFee);
  __Pyx_GIVEREF(__pyx_n_s_TradeFee);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_TradeFee);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":35
 *     safe_ensure_future,
 * )
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     MarketEvent,
 *     BuyOrderCompletedEvent,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketEvent, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderCancelledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderExpiredEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderExpiredEvent, __pyx_t_2) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderFilledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketOrderFailureEvent, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeFee, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":49
 *     TradeFee,
 * )
 * from hummingbot.logger import HummingbotLogger             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.loopring.loopring_in_flight_order cimport LoopringInFlightOrder
 * from hummingbot.connector.trading_rule cimport TradingRule
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_HummingbotLogger);
  __Pyx_GIVEREF(__pyx_n_s_HummingbotLogger);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_HummingbotLogger);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_logger, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_HummingbotLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HummingbotLogger, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":52
 * from hummingbot.connector.exchange.loopring.loopring_in_flight_order cimport LoopringInFlightOrder
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.core.utils.estimate_fee import estimate_fee             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_estimate_fee);
  __Pyx_GIVEREF(__pyx_n_s_estimate_fee);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_estimate_fee);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_estimate_fee, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":53
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce             # <<<<<<<<<<<<<<
 * 
 * from ethsnarks_loopring import PoseidonEdDSA
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_get_tracking_nonce);
  __Pyx_GIVEREF(__pyx_n_s_get_tracking_nonce);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_get_tracking_nonce);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_tracking_nonce, __pyx_t_1) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":55
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 * 
 * from ethsnarks_loopring import PoseidonEdDSA             # <<<<<<<<<<<<<<
 * from ethsnarks_loopring import FQ, SNARK_SCALAR_FIELD
 * from ethsnarks_loopring import poseidon_params, poseidon
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_PoseidonEdDSA);
  __Pyx_GIVEREF(__pyx_n_s_PoseidonEdDSA);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PoseidonEdDSA);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ethsnarks_loopring, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_PoseidonEdDSA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PoseidonEdDSA, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":56
 * 
 * from ethsnarks_loopring import PoseidonEdDSA
 * from ethsnarks_loopring import FQ, SNARK_SCALAR_FIELD             # <<<<<<<<<<<<<<
 * from ethsnarks_loopring import poseidon_params, poseidon
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_FQ);
  __Pyx_GIVEREF(__pyx_n_s_FQ);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FQ);
  __Pyx_INCREF(__pyx_n_s_SNARK_SCALAR_FIELD);
  __Pyx_GIVEREF(__pyx_n_s_SNARK_SCALAR_FIELD);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_SNARK_SCALAR_FIELD);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ethsnarks_loopring, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FQ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FQ, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_SNARK_SCALAR_FIELD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SNARK_SCALAR_FIELD, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":57
 * from ethsnarks_loopring import PoseidonEdDSA
 * from ethsnarks_loopring import FQ, SNARK_SCALAR_FIELD
 * from ethsnarks_loopring import poseidon_params, poseidon             # <<<<<<<<<<<<<<
 * 
 * s_logger = None
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_poseidon_params);
  __Pyx_GIVEREF(__pyx_n_s_poseidon_params);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_poseidon_params);
  __Pyx_INCREF(__pyx_n_s_poseidon);
  __Pyx_GIVEREF(__pyx_n_s_poseidon);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_poseidon);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ethsnarks_loopring, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_poseidon_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_poseidon_params, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_poseidon); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_poseidon, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":59
 * from ethsnarks_loopring import poseidon_params, poseidon
 * 
 * s_logger = None             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("nan")
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_logger, Py_None) < 0) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":60
 * 
 * s_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("nan")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":61
 * s_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("nan")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_NaN, __pyx_t_1) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":64
 * 
 * 
 * def num_d(amount):             # <<<<<<<<<<<<<<
 *     return abs(Decimal(amount).normalize().as_tuple().exponent)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_1num_d, NULL, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_num_d, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":68
 * 
 * 
 * def now():             # <<<<<<<<<<<<<<
 *     return int(time.time()) * 1000
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_3now, NULL, __pyx_n_s_hummingbot_connector_exchange_lo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_now, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":72
 * 
 * 
 * BUY_ORDER_COMPLETED_EVENT = MarketEvent.BuyOrderCompleted.value             # <<<<<<<<<<<<<<
 * SELL_ORDER_COMPLETED_EVENT = MarketEvent.SellOrderCompleted.value
 * ORDER_CANCELLED_EVENT = MarketEvent.OrderCancelled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUY_ORDER_COMPLETED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":73
 * 
 * BUY_ORDER_COMPLETED_EVENT = MarketEvent.BuyOrderCompleted.value
 * SELL_ORDER_COMPLETED_EVENT = MarketEvent.SellOrderCompleted.value             # <<<<<<<<<<<<<<
 * ORDER_CANCELLED_EVENT = MarketEvent.OrderCancelled.value
 * ORDER_EXPIRED_EVENT = MarketEvent.OrderExpired.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELL_ORDER_COMPLETED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":74
 * BUY_ORDER_COMPLETED_EVENT = MarketEvent.BuyOrderCompleted.value
 * SELL_ORDER_COMPLETED_EVENT = MarketEvent.SellOrderCompleted.value
 * ORDER_CANCELLED_EVENT = MarketEvent.OrderCancelled.value             # <<<<<<<<<<<<<<
 * ORDER_EXPIRED_EVENT = MarketEvent.OrderExpired.value
 * ORDER_FILLED_EVENT = MarketEvent.OrderFilled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_CANCELLED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":75
 * SELL_ORDER_COMPLETED_EVENT = MarketEvent.SellOrderCompleted.value
 * ORDER_CANCELLED_EVENT = MarketEvent.OrderCancelled.value
 * ORDER_EXPIRED_EVENT = MarketEvent.OrderExpired.value             # <<<<<<<<<<<<<<
 * ORDER_FILLED_EVENT = MarketEvent.OrderFilled.value
 * ORDER_FAILURE_EVENT = MarketEvent.OrderFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderExpired); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_EXPIRED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":76
 * ORDER_CANCELLED_EVENT = MarketEvent.OrderCancelled.value
 * ORDER_EXPIRED_EVENT = MarketEvent.OrderExpired.value
 * ORDER_FILLED_EVENT = MarketEvent.OrderFilled.value             # <<<<<<<<<<<<<<
 * ORDER_FAILURE_EVENT = MarketEvent.OrderFailure.value
 * BUY_ORDER_CREATED_EVENT = MarketEvent.BuyOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_FILLED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":77
 * ORDER_EXPIRED_EVENT = MarketEvent.OrderExpired.value
 * ORDER_FILLED_EVENT = MarketEvent.OrderFilled.value
 * ORDER_FAILURE_EVENT = MarketEvent.OrderFailure.value             # <<<<<<<<<<<<<<
 * BUY_ORDER_CREATED_EVENT = MarketEvent.BuyOrderCreated.value
 * SELL_ORDER_CREATED_EVENT = MarketEvent.SellOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_FAILURE_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":78
 * ORDER_FILLED_EVENT = MarketEvent.OrderFilled.value
 * ORDER_FAILURE_EVENT = MarketEvent.OrderFailure.value
 * BUY_ORDER_CREATED_EVENT = MarketEvent.BuyOrderCreated.value             # <<<<<<<<<<<<<<
 * SELL_ORDER_CREATED_EVENT = MarketEvent.SellOrderCreated.value
 * API_CALL_TIMEOUT = 10.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BUY_ORDER_CREATED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":79
 * ORDER_FAILURE_EVENT = MarketEvent.OrderFailure.value
 * BUY_ORDER_CREATED_EVENT = MarketEvent.BuyOrderCreated.value
 * SELL_ORDER_CREATED_EVENT = MarketEvent.SellOrderCreated.value             # <<<<<<<<<<<<<<
 * API_CALL_TIMEOUT = 10.0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SELL_ORDER_CREATED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":80
 * BUY_ORDER_CREATED_EVENT = MarketEvent.BuyOrderCreated.value
 * SELL_ORDER_CREATED_EVENT = MarketEvent.SellOrderCreated.value
 * API_CALL_TIMEOUT = 10.0             # <<<<<<<<<<<<<<
 * 
 * # ==========================================================
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_API_CALL_TIMEOUT, __pyx_float_10_0) < 0) __PYX_ERR(0, 80, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":84
 * # ==========================================================
 * 
 * GET_ORDER_ROUTE = "/api/v3/order"             # <<<<<<<<<<<<<<
 * MAINNET_API_REST_ENDPOINT = "https://api3.loopring.io/"
 * MAINNET_WS_ENDPOINT = "wss://ws.api3.loopring.io/v2/ws"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GET_ORDER_ROUTE, __pyx_kp_u_api_v3_order) < 0) __PYX_ERR(0, 84, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":85
 * 
 * GET_ORDER_ROUTE = "/api/v3/order"
 * MAINNET_API_REST_ENDPOINT = "https://api3.loopring.io/"             # <<<<<<<<<<<<<<
 * MAINNET_WS_ENDPOINT = "wss://ws.api3.loopring.io/v2/ws"
 * EXCHANGE_INFO_ROUTE = "api/v3/timestamp"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAINNET_API_REST_ENDPOINT, __pyx_kp_u_https_api3_loopring_io) < 0) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":86
 * GET_ORDER_ROUTE = "/api/v3/order"
 * MAINNET_API_REST_ENDPOINT = "https://api3.loopring.io/"
 * MAINNET_WS_ENDPOINT = "wss://ws.api3.loopring.io/v2/ws"             # <<<<<<<<<<<<<<
 * EXCHANGE_INFO_ROUTE = "api/v3/timestamp"
 * BALANCES_INFO_ROUTE = "api/v3/user/balances"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAINNET_WS_ENDPOINT, __pyx_kp_u_wss_ws_api3_loopring_io_v2_ws) < 0) __PYX_ERR(0, 86, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":87
 * MAINNET_API_REST_ENDPOINT = "https://api3.loopring.io/"
 * MAINNET_WS_ENDPOINT = "wss://ws.api3.loopring.io/v2/ws"
 * EXCHANGE_INFO_ROUTE = "api/v3/timestamp"             # <<<<<<<<<<<<<<
 * BALANCES_INFO_ROUTE = "api/v3/user/balances"
 * ACCOUNT_INFO_ROUTE = "api/v3/account"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EXCHANGE_INFO_ROUTE, __pyx_kp_u_api_v3_timestamp) < 0) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":88
 * MAINNET_WS_ENDPOINT = "wss://ws.api3.loopring.io/v2/ws"
 * EXCHANGE_INFO_ROUTE = "api/v3/timestamp"
 * BALANCES_INFO_ROUTE = "api/v3/user/balances"             # <<<<<<<<<<<<<<
 * ACCOUNT_INFO_ROUTE = "api/v3/account"
 * MARKETS_INFO_ROUTE = "api/v3/exchange/markets"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BALANCES_INFO_ROUTE, __pyx_kp_u_api_v3_user_balances) < 0) __PYX_ERR(0, 88, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":89
 * EXCHANGE_INFO_ROUTE = "api/v3/timestamp"
 * BALANCES_INFO_ROUTE = "api/v3/user/balances"
 * ACCOUNT_INFO_ROUTE = "api/v3/account"             # <<<<<<<<<<<<<<
 * MARKETS_INFO_ROUTE = "api/v3/exchange/markets"
 * TOKENS_INFO_ROUTE = "api/v3/exchange/tokens"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ACCOUNT_INFO_ROUTE, __pyx_kp_u_api_v3_account) < 0) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":90
 * BALANCES_INFO_ROUTE = "api/v3/user/balances"
 * ACCOUNT_INFO_ROUTE = "api/v3/account"
 * MARKETS_INFO_ROUTE = "api/v3/exchange/markets"             # <<<<<<<<<<<<<<
 * TOKENS_INFO_ROUTE = "api/v3/exchange/tokens"
 * NEXT_ORDER_ID = "api/v3/storageId"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MARKETS_INFO_ROUTE, __pyx_kp_u_api_v3_exchange_markets) < 0) __PYX_ERR(0, 90, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":91
 * ACCOUNT_INFO_ROUTE = "api/v3/account"
 * MARKETS_INFO_ROUTE = "api/v3/exchange/markets"
 * TOKENS_INFO_ROUTE = "api/v3/exchange/tokens"             # <<<<<<<<<<<<<<
 * NEXT_ORDER_ID = "api/v3/storageId"
 * ORDER_ROUTE = "api/v3/order"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TOKENS_INFO_ROUTE, __pyx_kp_u_api_v3_exchange_tokens) < 0) __PYX_ERR(0, 91, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":92
 * MARKETS_INFO_ROUTE = "api/v3/exchange/markets"
 * TOKENS_INFO_ROUTE = "api/v3/exchange/tokens"
 * NEXT_ORDER_ID = "api/v3/storageId"             # <<<<<<<<<<<<<<
 * ORDER_ROUTE = "api/v3/order"
 * ORDER_CANCEL_ROUTE = "api/v3/order"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NEXT_ORDER_ID, __pyx_kp_u_api_v3_storageId) < 0) __PYX_ERR(0, 92, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":93
 * TOKENS_INFO_ROUTE = "api/v3/exchange/tokens"
 * NEXT_ORDER_ID = "api/v3/storageId"
 * ORDER_ROUTE = "api/v3/order"             # <<<<<<<<<<<<<<
 * ORDER_CANCEL_ROUTE = "api/v3/order"
 * MAXIMUM_FILL_COUNT = 16
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_ROUTE, __pyx_kp_u_api_v3_order_2) < 0) __PYX_ERR(0, 93, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":94
 * NEXT_ORDER_ID = "api/v3/storageId"
 * ORDER_ROUTE = "api/v3/order"
 * ORDER_CANCEL_ROUTE = "api/v3/order"             # <<<<<<<<<<<<<<
 * MAXIMUM_FILL_COUNT = 16
 * UNRECOGNIZED_ORDER_DEBOUCE = 20  # seconds
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ORDER_CANCEL_ROUTE, __pyx_kp_u_api_v3_order_2) < 0) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":95
 * ORDER_ROUTE = "api/v3/order"
 * ORDER_CANCEL_ROUTE = "api/v3/order"
 * MAXIMUM_FILL_COUNT = 16             # <<<<<<<<<<<<<<
 * UNRECOGNIZED_ORDER_DEBOUCE = 20  # seconds
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAXIMUM_FILL_COUNT, __pyx_int_16) < 0) __PYX_ERR(0, 95, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":96
 * ORDER_CANCEL_ROUTE = "api/v3/order"
 * MAXIMUM_FILL_COUNT = 16
 * UNRECOGNIZED_ORDER_DEBOUCE = 20  # seconds             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNRECOGNIZED_ORDER_DEBOUCE, __pyx_int_20) < 0) __PYX_ERR(0, 96, __pyx_L1_error)

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":99
 * 
 * 
 * class LatchingEventResponder(EventListener):             # <<<<<<<<<<<<<<
 *     def __init__(self, callback: any, num_expected: int):
 *         super().__init__()
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_LatchingEventResponder, __pyx_n_s_LatchingEventResponder, (PyObject *) NULL, __pyx_n_s_hummingbot_connector_exchange_lo, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":100
 * 
 * class LatchingEventResponder(EventListener):
 *     def __init__(self, callback: any, num_expected: int):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._callback = callback
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_callback, __pyx_builtin_any) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_num_expected, __pyx_n_u_int) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_1__init__, 0, __pyx_n_s_LatchingEventResponder___init, NULL, __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_t_6);
  PyList_Append(__pyx_t_4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_6, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":106
 *         self._num_remaining = num_expected
 * 
 *     def __call__(self, arg: any):             # <<<<<<<<<<<<<<
 *         if self._callback(arg):
 *             self._reduce()
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_arg, __pyx_builtin_any) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_3__call__, 0, __pyx_n_s_LatchingEventResponder___call, NULL, __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_5, __pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_call, __pyx_t_5) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":110
 *             self._reduce()
 * 
 *     def _reduce(self):             # <<<<<<<<<<<<<<
 *         self._num_remaining -= 1
 *         if self._num_remaining <= 0:
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_5_reduce, 0, __pyx_n_s_LatchingEventResponder__reduce, NULL, __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_reduce, __pyx_t_5) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":115
 *             self._completed.set()
 * 
 *     async def wait_for_completion(self, timeout: float):             # <<<<<<<<<<<<<<
 *         try:
 *             await asyncio.wait_for(self._completed.wait(), timeout=timeout)
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_timeout, __pyx_n_u_float) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_7wait_for_completion, 0, __pyx_n_s_LatchingEventResponder_wait_for, NULL, __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_6, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_wait_for_completion, __pyx_t_6) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":122
 *         return self._completed.is_set()
 * 
 *     def cancel_one(self):             # <<<<<<<<<<<<<<
 *         self._reduce()
 * 
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_22LatchingEventResponder_10cancel_one, 0, __pyx_n_s_LatchingEventResponder_cancel_on, NULL, __pyx_n_s_hummingbot_connector_exchange_lo, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_cancel_one, __pyx_t_6) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":99
 * 
 * 
 * class LatchingEventResponder(EventListener):             # <<<<<<<<<<<<<<
 *     def __init__(self, callback: any, num_expected: int):
 *         super().__init__()
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_LatchingEventResponder, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_CyFunction_InitClassCell(__pyx_t_4, __pyx_t_6) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LatchingEventResponder, __pyx_t_6) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":140
 * cdef class LoopringExchange(ExchangeBase):
 *     @classmethod
 *     def logger(cls) -> HummingbotLogger:             # <<<<<<<<<<<<<<
 *         global s_logger
 *         if s_logger is None:
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":139
 * 
 * cdef class LoopringExchange(ExchangeBase):
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global s_logger
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_8loopring_17loopring_exchange_LoopringExchange);

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":420
 *                           amount: Decimal,
 *                           order_type: OrderType,
 *                           price: Optional[Decimal] = Decimal('NaN')):             # <<<<<<<<<<<<<<
 *         if await self.execute_order(TradeType.BUY, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(BUY_ORDER_CREATED_EVENT,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__15 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":430
 *                            amount: Decimal,
 *                            order_type: OrderType,
 *                            price: Optional[Decimal] = Decimal('NaN')):             # <<<<<<<<<<<<<<
 *         if await self.execute_order(TradeType.SELL, order_id, trading_pair, amount, order_type, price):
 *             self.c_trigger_event(SELL_ORDER_CREATED_EVENT,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__16 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":435
 *                                  SellOrderCreatedEvent(now(), order_type, trading_pair, Decimal(amount), Decimal(price), order_id))
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                    dict kwargs = {}):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__17 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":436
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,
 *                    dict kwargs = {}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__54 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":443
 *         return client_order_id
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,             # <<<<<<<<<<<<<<
 *                     dict kwargs = {}):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__18 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":444
 * 
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type = OrderType.LIMIT, object price = 0.0,
 *                     dict kwargs = {}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__55 = ((PyObject*)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":874
 *         return price.quantize(self.c_get_order_price_quantum(trading_pair, price), rounding=ROUND_DOWN)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price = s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object current_price = self.c_get_price(trading_pair, False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__25 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":913
 *                           data: Optional[Dict[str, Any]] = None,
 *                           params: Optional[Dict[str, Any]] = None,
 *                           headers: Optional[Dict[str, str]] = {},             # <<<<<<<<<<<<<<
 *                           secure: bool = False) -> Dict[str, Any]:
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__28 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":956
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__29 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":957
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__30 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":960
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__31 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":961
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__32 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":973
 *                 order_side: TradeType,
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:             # <<<<<<<<<<<<<<
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__33 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/loopring/loopring_exchange.pyx":1
 * import aiohttp             # <<<<<<<<<<<<<<
 * import asyncio
 * import binascii
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../AppData/Local/Temp/pip-build-env-b9tjup2t/overlay/Lib/site-packages/numpy/__init__.pxd":1016
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.connector.exchange.loopring.loopring_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.connector.exchange.loopring.loopring_exchange");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            Py_SIZE(copy) = -(Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Coroutine */
static void __Pyx_CoroutineAwait_dealloc(PyObject *self) {
    PyObject_GC_UnTrack(self);
    Py_CLEAR(((__pyx_CoroutineAwaitObject*)self)->coroutine);
    PyObject_GC_Del(self);
}
static int __Pyx_CoroutineAwait_traverse(__pyx_CoroutineAwaitObject *self, visitproc visit, void *arg) {
    Py_VISIT(self->coroutine);
    return 0;
}
static int __Pyx_CoroutineAwait_clear(__pyx_CoroutineAwaitObject *self) {
    Py_CLEAR(self->coroutine);
    return 0;
}
static PyObject *__Pyx_CoroutineAwait_Next(__pyx_CoroutineAwaitObject *self) {
    return __Pyx_Generator_Next(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_Send(__pyx_CoroutineAwaitObject *self, PyObject *value) {
    return __Pyx_Coroutine_Send(self->coroutine, value);
}
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args) {
    return __Pyx_Coroutine_Throw(self->coroutine, args);
}
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_self(PyObject *self) {
    Py_INCREF(self);
    return self;
}
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_CoroutineAwait_no_new(CYTHON_UNUSED PyTypeObject *type, CYTHON_UNUSED PyObject *args, CYTHON_UNUSED PyObject *kwargs) {
    PyErr_SetString(PyExc_TypeError, "cannot instantiate type, use 'await coroutine' instead");
    return NULL;
}
#endif
static PyMethodDef __pyx_CoroutineAwait_methods[] = {
    {"send", (PyCFunction) __Pyx_CoroutineAwait_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_CoroutineAwait_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_CoroutineAwait_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_CoroutineAwaitType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "coroutine_wrapper",
    sizeof(__pyx_CoroutineAwaitObject),
    0,
    (destructor) __Pyx_CoroutineAwait_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("A wrapper object implementing __await__ for coroutines."),
    (traverseproc) __Pyx_CoroutineAwait_traverse,
    (inquiry) __Pyx_CoroutineAwait_clear,
    0,
    0,
    __Pyx_CoroutineAwait_self,
    (iternextfunc) __Pyx_CoroutineAwait_Next,
    __pyx_CoroutineAwait_methods,
    0                         ,
    0                      ,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if !CYTHON_COMPILING_IN_PYPY
    __Pyx_CoroutineAwait_no_new,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
#if PY_VERSION_HEX < 0x030500B1 || defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static CYTHON_INLINE PyObject *__Pyx__Coroutine_await(PyObject *coroutine) {
    __pyx_CoroutineAwaitObject *await = PyObject_GC_New(__pyx_CoroutineAwaitObject, __pyx_CoroutineAwaitType);
    if (unlikely(!await)) return NULL;
    Py_INCREF(coroutine);
    await->coroutine = coroutine;
    PyObject_GC_Track(await);
    return (PyObject*)await;
}
#endif
#if PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_await_method(PyObject *coroutine, CYTHON_UNUSED PyObject *arg) {
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static PyObject *__Pyx_Coroutine_await(PyObject *coroutine) {
    if (unlikely(!coroutine || !__Pyx_Coroutine_Check(coroutine))) {
        PyErr_SetString(PyExc_TypeError, "invalid input, expected coroutine");
        return NULL;
    }
    return __Pyx__Coroutine_await(coroutine);
}
#endif
static PyObject *
__Pyx_Coroutine_get_frame(CYTHON_UNUSED __pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    Py_RETURN_NONE;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_compare(PyObject *obj, PyObject *other, int op) {
    PyObject* result;
    switch (op) {
        case Py_EQ: result = (other == obj) ? Py_True : Py_False; break;
        case Py_NE: result = (other != obj) ? Py_True : Py_False; break;
        default:
            result = Py_NotImplemented;
    }
    Py_INCREF(result);
    return result;
}
#endif
static PyMethodDef __pyx_Coroutine_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
#if PY_VERSION_HEX < 0x030500B1
    {"__await__", (PyCFunction) __Pyx_Coroutine_await_method, METH_NOARGS,
     (char*) PyDoc_STR("__await__() -> return an iterator to be used in await expression.")},
#endif
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Coroutine_memberlist[] = {
    {(char *) "cr_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "cr_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited, or None")},
    {(char*) "cr_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Coroutine_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the coroutine"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the coroutine"), 0},
    {(char *) "cr_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the coroutine"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __pyx_Coroutine_as_async = {
    __Pyx_Coroutine_await,
    0,
    0,
};
#endif
static PyTypeObject __pyx_CoroutineType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "coroutine",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__pyx_Coroutine_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __pyx_Coroutine_methods,
    __pyx_Coroutine_memberlist,
    __pyx_Coroutine_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Coroutine_init(void) {
    __pyx_CoroutineType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_CoroutineType = __Pyx_FetchCommonType(&__pyx_CoroutineType_type);
    if (unlikely(!__pyx_CoroutineType))
        return -1;
#ifdef __Pyx_IterableCoroutine_USED
    if (unlikely(__pyx_IterableCoroutine_init() == -1))
        return -1;
#endif
    __pyx_CoroutineAwaitType = __Pyx_FetchCommonType(&__pyx_CoroutineAwaitType_type);
    if (unlikely(!__pyx_CoroutineAwaitType))
        return -1;
    return 0;
}

/* GetAwaitIter */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o) {
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(o)) {
        return __Pyx_NewRef(o);
    }
#endif
    return __Pyx__Coroutine_GetAwaitableIter(o);
}
static void __Pyx_Coroutine_AwaitableIterError(PyObject *source) {
#if PY_VERSION_HEX >= 0x030600B3 || defined(_PyErr_FormatFromCause)
    _PyErr_FormatFromCause(
        PyExc_TypeError,
        "'async for' received an invalid object "
        "from __anext__: %.100s",
        Py_TYPE(source)->tp_name);
#elif PY_MAJOR_VERSION >= 3
    PyObject *exc, *val, *val2, *tb;
    assert(PyErr_Occurred());
    PyErr_Fetch(&exc, &val, &tb);
    PyErr_NormalizeException(&exc, &val, &tb);
    if (tb != NULL) {
        PyException_SetTraceback(val, tb);
        Py_DECREF(tb);
    }
    Py_DECREF(exc);
    assert(!PyErr_Occurred());
    PyErr_Format(
        PyExc_TypeError,
        "'async for' received an invalid object "
        "from __anext__: %.100s",
        Py_TYPE(source)->tp_name);
    PyErr_Fetch(&exc, &val2, &tb);
    PyErr_NormalizeException(&exc, &val2, &tb);
    Py_INCREF(val);
    PyException_SetCause(val2, val);
    PyException_SetContext(val2, val);
    PyErr_Restore(exc, val2, tb);
#else
    source++;
#endif
}
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *obj) {
    PyObject *res;
#if CYTHON_USE_ASYNC_SLOTS
    __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
    if (likely(am && am->am_await)) {
        res = (*am->am_await)(obj);
    } else
#endif
#if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
    if (PyCoro_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    } else
#endif
#if CYTHON_COMPILING_IN_CPYTHON && defined(CO_ITERABLE_COROUTINE)
    if (PyGen_CheckExact(obj) && ((PyGenObject*)obj)->gi_code && ((PyCodeObject *)((PyGenObject*)obj)->gi_code)->co_flags & CO_ITERABLE_COROUTINE) {
        return __Pyx_NewRef(obj);
    } else
#endif
    {
        PyObject *method = NULL;
        int is_method = __Pyx_PyObject_GetMethod(obj, __pyx_n_s_await, &method);
        if (likely(is_method)) {
            res = __Pyx_PyObject_CallOneArg(method, obj);
        } else if (likely(method)) {
            res = __Pyx_PyObject_CallNoArg(method);
        } else
            goto slot_error;
        Py_DECREF(method);
    }
    if (unlikely(!res)) {
        __Pyx_Coroutine_AwaitableIterError(obj);
        goto bad;
    }
    if (unlikely(!PyIter_Check(res))) {
        PyErr_Format(PyExc_TypeError,
                     "__await__() returned non-iterator of type '%.100s'",
                     Py_TYPE(res)->tp_name);
        Py_CLEAR(res);
    } else {
        int is_coroutine = 0;
        #ifdef __Pyx_Coroutine_USED
        is_coroutine |= __Pyx_Coroutine_Check(res);
        #endif
        #if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
        is_coroutine |= PyCoro_CheckExact(res);
        #endif
        if (unlikely(is_coroutine)) {
            /* __await__ must return an *iterator*, not
               a coroutine or another awaitable (see PEP 492) */
            PyErr_SetString(PyExc_TypeError,
                            "__await__() returned a coroutine");
            Py_CLEAR(res);
        }
    }
    return res;
slot_error:
    PyErr_Format(PyExc_TypeError,
                 "object %.100s can't be used in 'await' expression",
                 Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* CoroutineYieldFrom */
static PyObject* __Pyx__Coroutine_Yield_From_Generic(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    PyObject *source_gen = __Pyx__Coroutine_GetAwaitableIter(source);
    if (unlikely(!source_gen)) {
        return NULL;
    }
    if (__Pyx_Coroutine_Check(source_gen)) {
        retval = __Pyx_Generator_Next(source_gen);
    } else {
#if CYTHON_USE_TYPE_SLOTS
        retval = Py_TYPE(source_gen)->tp_iternext(source_gen);
#else
        retval = PyIter_Next(source_gen);
#endif
    }
    if (retval) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    if (__Pyx_Coroutine_Check(source)) {
        if (unlikely(((__pyx_CoroutineObject*)source)->yieldfrom)) {
            PyErr_SetString(
                PyExc_RuntimeError,
                "coroutine is being awaited already");
            return NULL;
        }
        retval = __Pyx_Generator_Next(source);
#ifdef __Pyx_AsyncGen_USED
    } else if (__pyx_PyAsyncGenASend_CheckExact(source)) {
        retval = __Pyx_async_gen_asend_iternext(source);
#endif
    } else {
        return __Pyx__Coroutine_Yield_From_Generic(gen, source);
    }
    if (retval) {
        Py_INCREF(source);
        gen->yieldfrom = source;
    }
    return retval;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_PYSTON
    __Pyx_PyThreadState_declare
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1)
            || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_type)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
    #endif
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* RaiseMappingExpected */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg) {
    PyErr_Format(PyExc_TypeError, "'%.200s' object is not a mapping", Py_TYPE(arg)->tp_name);
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* StopAsyncIteration */
#if PY_VERSION_HEX < 0x030500B1
static PyTypeObject __Pyx__PyExc_StopAsyncIteration_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "StopAsyncIteration",
    sizeof(PyBaseExceptionObject),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("Signal the end from iterator.__anext__()."),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
#endif
static int __pyx_StopAsyncIteration_init(void) {
#if PY_VERSION_HEX >= 0x030500B1
    __Pyx_PyExc_StopAsyncIteration = PyExc_StopAsyncIteration;
#else
    PyObject *builtins = PyEval_GetBuiltins();
    if (likely(builtins)) {
        PyObject *exc = PyMapping_GetItemString(builtins, (char*) "StopAsyncIteration");
        if (exc) {
            __Pyx_PyExc_StopAsyncIteration = exc;
            return 0;
        }
    }
    PyErr_Clear();
    __Pyx__PyExc_StopAsyncIteration_type.tp_traverse = ((PyTypeObject*)PyExc_BaseException)->tp_traverse;
    __Pyx__PyExc_StopAsyncIteration_type.tp_clear = ((PyTypeObject*)PyExc_BaseException)->tp_clear;
    __Pyx__PyExc_StopAsyncIteration_type.tp_dictoffset = ((PyTypeObject*)PyExc_BaseException)->tp_dictoffset;
    __Pyx__PyExc_StopAsyncIteration_type.tp_base = (PyTypeObject*)PyExc_Exception;
    __Pyx_PyExc_StopAsyncIteration = (PyObject*) __Pyx_FetchCommonType(&__Pyx__PyExc_StopAsyncIteration_type);
    if (unlikely(!__Pyx_PyExc_StopAsyncIteration))
        return -1;
    if (builtins && unlikely(PyMapping_SetItemString(builtins, (char*) "StopAsyncIteration", __Pyx_PyExc_StopAsyncIteration) < 0))
        return -1;
#endif
    return 0;
}

/* AsyncIter */
static PyObject *__Pyx_Coroutine_GetAsyncIter_Generic(PyObject *obj) {
#if PY_VERSION_HEX < 0x030500B1
    {
        PyObject *iter = __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_aiter);
        if (likely(iter))
            return iter;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return NULL;
    }
#else
    if ((0)) (void) __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_aiter);
#endif
    PyErr_Format(PyExc_TypeError, "'async for' requires an object with __aiter__ method, got %.100s",
                 Py_TYPE(obj)->tp_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAsyncIter(PyObject *obj) {
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    }
#endif
#if CYTHON_USE_ASYNC_SLOTS
    {
        __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
        if (likely(am && am->am_aiter)) {
            return (*am->am_aiter)(obj);
        }
    }
#endif
    return __Pyx_Coroutine_GetAsyncIter_Generic(obj);
}
static PyObject *__Pyx__Coroutine_AsyncIterNext(PyObject *obj) {
#if PY_VERSION_HEX < 0x030500B1
    {
        PyObject *value = __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_anext);
        if (likely(value))
            return value;
    }
    if (PyErr_ExceptionMatches(PyExc_AttributeError))
#endif
        PyErr_Format(PyExc_TypeError, "'async for' requires an object with __anext__ method, got %.100s",
                     Py_TYPE(obj)->tp_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_Coroutine_AsyncIterNext(PyObject *obj) {
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(obj)) {
        return __Pyx_async_gen_anext(obj);
    }
#endif
#if CYTHON_USE_ASYNC_SLOTS
    {
        __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
        if (likely(am && am->am_anext)) {
            return (*am->am_anext)(obj);
        }
    }
#endif
    return __Pyx__Coroutine_AsyncIterNext(obj);
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_2); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_2, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PatchInspect */
static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* PatchAsyncIO */
static PyObject* __Pyx_patch_asyncio(PyObject* module) {
#if PY_VERSION_HEX < 0x030500B2 &&\
        (defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED)) &&\
        (!defined(CYTHON_PATCH_ASYNCIO) || CYTHON_PATCH_ASYNCIO)
    PyObject *patch_module = NULL;
    static int asyncio_patched = 0;
    if (unlikely((!asyncio_patched) && module)) {
        PyObject *package;
        package = __Pyx_Import(__pyx_n_s_asyncio_coroutines, NULL, 0);
        if (package) {
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "coroutines"), ""
"try:\n"
"    coro_types = _module._COROUTINE_TYPES\n"
"except AttributeError: pass\n"
"else:\n"
"    if _cython_coroutine_type is not None and _cython_coroutine_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_coroutine_type,)\n"
"    if _cython_generator_type is not None and _cython_generator_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_generator_type,)\n"
"_module._COROUTINE_TYPES = coro_types\n"
            );
        } else {
            PyErr_Clear();
            package = __Pyx_Import(__pyx_n_s_asyncio_tasks, NULL, 0);
            if (unlikely(!package)) goto asyncio_done;
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "tasks"), ""
"if hasattr(_module, 'iscoroutine'):\n"
"    old_types = getattr(_module.iscoroutine, '_cython_coroutine_types', None)\n"
"    if old_types is None or not isinstance(old_types, set):\n"
"        old_types = set()\n"
"        def cy_wrap(orig_func, type=type, cython_coroutine_types=old_types):\n"
"            def cy_iscoroutine(obj): return type(obj) in cython_coroutine_types or orig_func(obj)\n"
"            cy_iscoroutine._cython_coroutine_types = cython_coroutine_types\n"
"            return cy_iscoroutine\n"
"        _module.iscoroutine = cy_wrap(_module.iscoroutine)\n"
"    if _cython_coroutine_type is not None:\n"
"        old_types.add(_cython_coroutine_type)\n"
"    if _cython_generator_type is not None:\n"
"        old_types.add(_cython_generator_type)\n"
            );
        }
        Py_DECREF(package);
        if (unlikely(!patch_module)) goto ignore;
asyncio_done:
        PyErr_Clear();
        asyncio_patched = 1;
#ifdef __Pyx_Generator_USED
        {
            PyObject *inspect_module;
            if (patch_module) {
                inspect_module = PyObject_GetAttr(patch_module, __pyx_n_s_inspect);
                Py_DECREF(patch_module);
            } else {
                inspect_module = __Pyx_Import(__pyx_n_s_inspect, NULL, 0);
            }
            if (unlikely(!inspect_module)) goto ignore;
            inspect_module = __Pyx_patch_inspect(inspect_module);
            if (unlikely(!inspect_module)) {
                Py_DECREF(module);
                module = NULL;
            }
            Py_XDECREF(inspect_module);
        }
#else
        if ((0)) return __Pyx_patch_inspect(module);
#endif
    }
    return module;
ignore:
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch asyncio package with custom generator type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    if ((0)) return __Pyx_patch_inspect(__Pyx_Coroutine_patch_module(module, NULL));
#endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CyFunctionClassCell */
static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj) {
    Py_ssize_t i, count = PyList_GET_SIZE(cyfunctions);
    for (i = 0; i < count; i++) {
        __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *)
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyList_GET_ITEM(cyfunctions, i);
#else
            PySequence_ITEM(cyfunctions, i);
        if (unlikely(!m))
            return -1;
#endif
        Py_INCREF(classobj);
        m->func_classobj = classobj;
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF((PyObject*)m);
#endif
    }
    return 0;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_CyFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) ((int64_t) 0 - (int64_t) 1), const_zero = (int64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* AsyncGeneratorInitFinalizer */
#if PY_VERSION_HEX < 0x030600B0
static int __Pyx_async_gen_init_hooks(__pyx_PyAsyncGenObject *o) {
#if 0
    PyThreadState *tstate;
    PyObject *finalizer;
    PyObject *firstiter;
#endif
    if (likely(o->ag_hooks_inited)) {
        return 0;
    }
    o->ag_hooks_inited = 1;
#if 0
    tstate = __Pyx_PyThreadState_Current;
    finalizer = tstate->async_gen_finalizer;
    if (finalizer) {
        Py_INCREF(finalizer);
        o->ag_finalizer = finalizer;
    }
    firstiter = tstate->async_gen_firstiter;
    if (firstiter) {
        PyObject *res;
        Py_INCREF(firstiter);
        res = __Pyx_PyObject_CallOneArg(firstiter, (PyObject*)o);
        Py_DECREF(firstiter);
        if (res == NULL) {
            return 1;
        }
        Py_DECREF(res);
    }
#endif
    return 0;
}
#endif

/* AsyncGenerator */
PyDoc_STRVAR(__Pyx_async_gen_send_doc,
"send(arg) -> send 'arg' into generator,\n\
return next yielded value or raise StopIteration.");
PyDoc_STRVAR(__Pyx_async_gen_close_doc,
"close() -> raise GeneratorExit inside generator.");
PyDoc_STRVAR(__Pyx_async_gen_throw_doc,
"throw(typ[,val[,tb]]) -> raise exception in generator,\n\
return next yielded value or raise StopIteration.");
PyDoc_STRVAR(__Pyx_async_gen_await_doc,
"__await__() -> return a representation that can be passed into the 'await' expression.");
static PyObject *__Pyx_async_gen_asend_new(__pyx_PyAsyncGenObject *, PyObject *);
static PyObject *__Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *, PyObject *);
static const char *__Pyx_NON_INIT_CORO_MSG = "can't send non-None value to a just-started coroutine";
static const char *__Pyx_ASYNC_GEN_IGNORED_EXIT_MSG = "async generator ignored GeneratorExit";
typedef enum {
    __PYX_AWAITABLE_STATE_INIT,
    __PYX_AWAITABLE_STATE_ITER,
    __PYX_AWAITABLE_STATE_CLOSED,
} __pyx_AwaitableState;
typedef struct {
    PyObject_HEAD
    __pyx_PyAsyncGenObject *ags_gen;
    PyObject *ags_sendval;
    __pyx_AwaitableState ags_state;
} __pyx_PyAsyncGenASend;
typedef struct {
    PyObject_HEAD
    __pyx_PyAsyncGenObject *agt_gen;
    PyObject *agt_args;
    __pyx_AwaitableState agt_state;
} __pyx_PyAsyncGenAThrow;
typedef struct {
    PyObject_HEAD
    PyObject *agw_val;
} __pyx__PyAsyncGenWrappedValue;
#ifndef _PyAsyncGen_MAXFREELIST
#define _PyAsyncGen_MAXFREELIST 80
#endif
static __pyx__PyAsyncGenWrappedValue *__Pyx_ag_value_freelist[_PyAsyncGen_MAXFREELIST];
static int __Pyx_ag_value_freelist_free = 0;
static __pyx_PyAsyncGenASend *__Pyx_ag_asend_freelist[_PyAsyncGen_MAXFREELIST];
static int __Pyx_ag_asend_freelist_free = 0;
#define __pyx__PyAsyncGenWrappedValue_CheckExact(o)\
                    (Py_TYPE(o) == __pyx__PyAsyncGenWrappedValueType)
static int
__Pyx_async_gen_traverse(__pyx_PyAsyncGenObject *gen, visitproc visit, void *arg)
{
    Py_VISIT(gen->ag_finalizer);
    return __Pyx_Coroutine_traverse((__pyx_CoroutineObject*)gen, visit, arg);
}
static PyObject *
__Pyx_async_gen_repr(__pyx_CoroutineObject *o)
{
    return PyUnicode_FromFormat("<async_generator object %S at %p>",
                                o->gi_qualname ? o->gi_qualname : Py_None, o);
}
#if PY_VERSION_HEX >= 0x030600B0
static int
__Pyx_async_gen_init_hooks(__pyx_PyAsyncGenObject *o)
{
    PyThreadState *tstate;
    PyObject *finalizer;
    PyObject *firstiter;
    if (o->ag_hooks_inited) {
        return 0;
    }
    o->ag_hooks_inited = 1;
    tstate = __Pyx_PyThreadState_Current;
    finalizer = tstate->async_gen_finalizer;
    if (finalizer) {
        Py_INCREF(finalizer);
        o->ag_finalizer = finalizer;
    }
    firstiter = tstate->async_gen_firstiter;
    if (firstiter) {
        PyObject *res;
#if CYTHON_UNPACK_METHODS
        PyObject *self;
#endif
        Py_INCREF(firstiter);
#if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(firstiter)) && likely((self = PyMethod_GET_SELF(firstiter)) != NULL)) {
            PyObject *function = PyMethod_GET_FUNCTION(firstiter);
            res = __Pyx_PyObject_Call2Args(function, self, (PyObject*)o);
        } else
#endif
        res = __Pyx_PyObject_CallOneArg(firstiter, (PyObject*)o);
        Py_DECREF(firstiter);
        if (unlikely(res == NULL)) {
            return 1;
        }
        Py_DECREF(res);
    }
    return 0;
}
#endif
static PyObject *
__Pyx_async_gen_anext(PyObject *g)
{
    __pyx_PyAsyncGenObject *o = (__pyx_PyAsyncGenObject*) g;
    if (__Pyx_async_gen_init_hooks(o)) {
        return NULL;
    }
    return __Pyx_async_gen_asend_new(o, NULL);
}
static PyObject *
__Pyx_async_gen_anext_method(PyObject *g, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_async_gen_anext(g);
}
static PyObject *
__Pyx_async_gen_asend(__pyx_PyAsyncGenObject *o, PyObject *arg)
{
    if (__Pyx_async_gen_init_hooks(o)) {
        return NULL;
    }
    return __Pyx_async_gen_asend_new(o, arg);
}
static PyObject *
__Pyx_async_gen_aclose(__pyx_PyAsyncGenObject *o, CYTHON_UNUSED PyObject *arg)
{
    if (__Pyx_async_gen_init_hooks(o)) {
        return NULL;
    }
    return __Pyx_async_gen_athrow_new(o, NULL);
}
static PyObject *
__Pyx_async_gen_athrow(__pyx_PyAsyncGenObject *o, PyObject *args)
{
    if (__Pyx_async_gen_init_hooks(o)) {
        return NULL;
    }
    return __Pyx_async_gen_athrow_new(o, args);
}
static PyObject *
__Pyx_async_gen_self_method(PyObject *g, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_NewRef(g);
}
static PyGetSetDef __Pyx_async_gen_getsetlist[] = {
    {(char*) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the async generator"), 0},
    {(char*) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the async generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __Pyx_async_gen_memberlist[] = {
    {(char*) "ag_running", T_BOOL,   offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "ag_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited on, or None")},
    {0, 0, 0, 0, 0}
};
PyDoc_STRVAR(__Pyx_async_aclose_doc,
"aclose() -> raise GeneratorExit inside generator.");
PyDoc_STRVAR(__Pyx_async_asend_doc,
"asend(v) -> send 'v' in generator.");
PyDoc_STRVAR(__Pyx_async_athrow_doc,
"athrow(typ[,val[,tb]]) -> raise exception in generator.");
PyDoc_STRVAR(__Pyx_async_aiter_doc,
"__aiter__(v) -> return an asynchronous iterator.");
PyDoc_STRVAR(__Pyx_async_anext_doc,
"__anext__(v) -> continue asynchronous iteration and return the next element.");
static PyMethodDef __Pyx_async_gen_methods[] = {
    {"asend", (PyCFunction)__Pyx_async_gen_asend, METH_O, __Pyx_async_asend_doc},
    {"athrow",(PyCFunction)__Pyx_async_gen_athrow, METH_VARARGS, __Pyx_async_athrow_doc},
    {"aclose", (PyCFunction)__Pyx_async_gen_aclose, METH_NOARGS, __Pyx_async_aclose_doc},
    {"__aiter__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_aiter_doc},
    {"__anext__", (PyCFunction)__Pyx_async_gen_anext_method, METH_NOARGS, __Pyx_async_anext_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_as_async = {
    0,
    PyObject_SelfIter,
    (unaryfunc)__Pyx_async_gen_anext
};
#endif
static PyTypeObject __pyx_AsyncGenType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator",
    sizeof(__pyx_PyAsyncGenObject),
    0,
    (destructor)__Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_as_async,
#else
    0,
#endif
    (reprfunc)__Pyx_async_gen_repr,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |
        Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc)__Pyx_async_gen_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __Pyx_async_gen_methods,
    __Pyx_async_gen_memberlist,
    __Pyx_async_gen_getsetlist,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int
__Pyx_PyAsyncGen_ClearFreeLists(void)
{
    int ret = __Pyx_ag_value_freelist_free + __Pyx_ag_asend_freelist_free;
    while (__Pyx_ag_value_freelist_free) {
        __pyx__PyAsyncGenWrappedValue *o;
        o = __Pyx_ag_value_freelist[--__Pyx_ag_value_freelist_free];
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        PyObject_GC_Del(o);
    }
    while (__Pyx_ag_asend_freelist_free) {
        __pyx_PyAsyncGenASend *o;
        o = __Pyx_ag_asend_freelist[--__Pyx_ag_asend_freelist_free];
        assert(Py_TYPE(o) == __pyx__PyAsyncGenASendType);
        PyObject_GC_Del(o);
    }
    return ret;
}
static void
__Pyx_PyAsyncGen_Fini(void)
{
    __Pyx_PyAsyncGen_ClearFreeLists();
}
static PyObject *
__Pyx_async_gen_unwrap_value(__pyx_PyAsyncGenObject *gen, PyObject *result)
{
    if (result == NULL) {
        PyObject *exc_type = PyErr_Occurred();
        if (!exc_type) {
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
            gen->ag_closed = 1;
        } else if (__Pyx_PyErr_GivenExceptionMatches2(exc_type, __Pyx_PyExc_StopAsyncIteration, PyExc_GeneratorExit)) {
            gen->ag_closed = 1;
        }
        return NULL;
    }
    if (__pyx__PyAsyncGenWrappedValue_CheckExact(result)) {
        __Pyx_ReturnWithStopIteration(((__pyx__PyAsyncGenWrappedValue*)result)->agw_val);
        Py_DECREF(result);
        return NULL;
    }
    return result;
}
static void
__Pyx_async_gen_asend_dealloc(__pyx_PyAsyncGenASend *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->ags_gen);
    Py_CLEAR(o->ags_sendval);
    if (__Pyx_ag_asend_freelist_free < _PyAsyncGen_MAXFREELIST) {
        assert(__pyx_PyAsyncGenASend_CheckExact(o));
        __Pyx_ag_asend_freelist[__Pyx_ag_asend_freelist_free++] = o;
    } else {
        PyObject_GC_Del(o);
    }
}
static int
__Pyx_async_gen_asend_traverse(__pyx_PyAsyncGenASend *o, visitproc visit, void *arg)
{
    Py_VISIT(o->ags_gen);
    Py_VISIT(o->ags_sendval);
    return 0;
}
static PyObject *
__Pyx_async_gen_asend_send(PyObject *g, PyObject *arg)
{
    __pyx_PyAsyncGenASend *o = (__pyx_PyAsyncGenASend*) g;
    PyObject *result;
    if (unlikely(o->ags_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (o->ags_state == __PYX_AWAITABLE_STATE_INIT) {
        if (arg == NULL || arg == Py_None) {
            arg = o->ags_sendval ? o->ags_sendval : Py_None;
        }
        o->ags_state = __PYX_AWAITABLE_STATE_ITER;
    }
    result = __Pyx_Coroutine_Send((PyObject*)o->ags_gen, arg);
    result = __Pyx_async_gen_unwrap_value(o->ags_gen, result);
    if (result == NULL) {
        o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    }
    return result;
}
static CYTHON_INLINE PyObject *
__Pyx_async_gen_asend_iternext(PyObject *o)
{
    return __Pyx_async_gen_asend_send(o, Py_None);
}
static PyObject *
__Pyx_async_gen_asend_throw(__pyx_PyAsyncGenASend *o, PyObject *args)
{
    PyObject *result;
    if (unlikely(o->ags_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    result = __Pyx_Coroutine_Throw((PyObject*)o->ags_gen, args);
    result = __Pyx_async_gen_unwrap_value(o->ags_gen, result);
    if (result == NULL) {
        o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    }
    return result;
}
static PyObject *
__Pyx_async_gen_asend_close(PyObject *g, CYTHON_UNUSED PyObject *args)
{
    __pyx_PyAsyncGenASend *o = (__pyx_PyAsyncGenASend*) g;
    o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    Py_RETURN_NONE;
}
static PyMethodDef __Pyx_async_gen_asend_methods[] = {
    {"send", (PyCFunction)__Pyx_async_gen_asend_send, METH_O, __Pyx_async_gen_send_doc},
    {"throw", (PyCFunction)__Pyx_async_gen_asend_throw, METH_VARARGS, __Pyx_async_gen_throw_doc},
    {"close", (PyCFunction)__Pyx_async_gen_asend_close, METH_NOARGS, __Pyx_async_gen_close_doc},
    {"__await__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_gen_await_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_asend_as_async = {
    PyObject_SelfIter,
    0,
    0
};
#endif
static PyTypeObject __pyx__PyAsyncGenASendType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_asend",
    sizeof(__pyx_PyAsyncGenASend),
    0,
    (destructor)__Pyx_async_gen_asend_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_asend_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_asend_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    0,
    PyObject_SelfIter,
    (iternextfunc)__Pyx_async_gen_asend_iternext,
    __Pyx_async_gen_asend_methods,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static PyObject *
__Pyx_async_gen_asend_new(__pyx_PyAsyncGenObject *gen, PyObject *sendval)
{
    __pyx_PyAsyncGenASend *o;
    if (__Pyx_ag_asend_freelist_free) {
        __Pyx_ag_asend_freelist_free--;
        o = __Pyx_ag_asend_freelist[__Pyx_ag_asend_freelist_free];
        _Py_NewReference((PyObject *)o);
    } else {
        o = PyObject_GC_New(__pyx_PyAsyncGenASend, __pyx__PyAsyncGenASendType);
        if (o == NULL) {
            return NULL;
        }
    }
    Py_INCREF(gen);
    o->ags_gen = gen;
    Py_XINCREF(sendval);
    o->ags_sendval = sendval;
    o->ags_state = __PYX_AWAITABLE_STATE_INIT;
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static void
__Pyx_async_gen_wrapped_val_dealloc(__pyx__PyAsyncGenWrappedValue *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->agw_val);
    if (__Pyx_ag_value_freelist_free < _PyAsyncGen_MAXFREELIST) {
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        __Pyx_ag_value_freelist[__Pyx_ag_value_freelist_free++] = o;
    } else {
        PyObject_GC_Del(o);
    }
}
static int
__Pyx_async_gen_wrapped_val_traverse(__pyx__PyAsyncGenWrappedValue *o,
                                     visitproc visit, void *arg)
{
    Py_VISIT(o->agw_val);
    return 0;
}
static PyTypeObject __pyx__PyAsyncGenWrappedValueType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_wrapped_value",
    sizeof(__pyx__PyAsyncGenWrappedValue),
    0,
    (destructor)__Pyx_async_gen_wrapped_val_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_wrapped_val_traverse,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static PyObject *
__Pyx__PyAsyncGenValueWrapperNew(PyObject *val)
{
    __pyx__PyAsyncGenWrappedValue *o;
    assert(val);
    if (__Pyx_ag_value_freelist_free) {
        __Pyx_ag_value_freelist_free--;
        o = __Pyx_ag_value_freelist[__Pyx_ag_value_freelist_free];
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        _Py_NewReference((PyObject*)o);
    } else {
        o = PyObject_GC_New(__pyx__PyAsyncGenWrappedValue, __pyx__PyAsyncGenWrappedValueType);
        if (unlikely(!o)) {
            Py_DECREF(val);
            return NULL;
        }
    }
    o->agw_val = val;
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static void
__Pyx_async_gen_athrow_dealloc(__pyx_PyAsyncGenAThrow *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->agt_gen);
    Py_CLEAR(o->agt_args);
    PyObject_GC_Del(o);
}
static int
__Pyx_async_gen_athrow_traverse(__pyx_PyAsyncGenAThrow *o, visitproc visit, void *arg)
{
    Py_VISIT(o->agt_gen);
    Py_VISIT(o->agt_args);
    return 0;
}
static PyObject *
__Pyx_async_gen_athrow_send(__pyx_PyAsyncGenAThrow *o, PyObject *arg)
{
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*)o->agt_gen;
    PyObject *retval;
    if (o->agt_state == __PYX_AWAITABLE_STATE_CLOSED) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (o->agt_state == __PYX_AWAITABLE_STATE_INIT) {
        if (o->agt_gen->ag_closed) {
            PyErr_SetNone(PyExc_StopIteration);
            return NULL;
        }
        if (arg != Py_None) {
            PyErr_SetString(PyExc_RuntimeError, __Pyx_NON_INIT_CORO_MSG);
            return NULL;
        }
        o->agt_state = __PYX_AWAITABLE_STATE_ITER;
        if (o->agt_args == NULL) {
            o->agt_gen->ag_closed = 1;
            retval = __Pyx__Coroutine_Throw((PyObject*)gen,
                                /* Do not close generator when
                                   PyExc_GeneratorExit is passed */
                                PyExc_GeneratorExit, NULL, NULL, NULL, 0);
            if (retval && __pyx__PyAsyncGenWrappedValue_CheckExact(retval)) {
                Py_DECREF(retval);
                goto yield_close;
            }
        } else {
            PyObject *typ;
            PyObject *tb = NULL;
            PyObject *val = NULL;
            if (!PyArg_UnpackTuple(o->agt_args, "athrow", 1, 3,
                                   &typ, &val, &tb)) {
                return NULL;
            }
            retval = __Pyx__Coroutine_Throw((PyObject*)gen,
                                typ, val, tb, o->agt_args, 0);
            retval = __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
        }
        if (retval == NULL) {
            goto check_error;
        }
        return retval;
    }
    assert (o->agt_state == __PYX_AWAITABLE_STATE_ITER);
    retval = __Pyx_Coroutine_Send((PyObject *)gen, arg);
    if (o->agt_args) {
        return __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
    } else {
        if (retval) {
            if (__pyx__PyAsyncGenWrappedValue_CheckExact(retval)) {
                Py_DECREF(retval);
                goto yield_close;
            }
            else {
                return retval;
            }
        }
        else {
            goto check_error;
        }
    }
yield_close:
    PyErr_SetString(
        PyExc_RuntimeError, __Pyx_ASYNC_GEN_IGNORED_EXIT_MSG);
    return NULL;
check_error:
    if (PyErr_ExceptionMatches(__Pyx_PyExc_StopAsyncIteration)) {
        o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
        if (o->agt_args == NULL) {
            PyErr_Clear();
            PyErr_SetNone(PyExc_StopIteration);
        }
    }
    else if (PyErr_ExceptionMatches(PyExc_GeneratorExit)) {
        o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
        PyErr_Clear();
        PyErr_SetNone(PyExc_StopIteration);
    }
    return NULL;
}
static PyObject *
__Pyx_async_gen_athrow_throw(__pyx_PyAsyncGenAThrow *o, PyObject *args)
{
    PyObject *retval;
    if (o->agt_state == __PYX_AWAITABLE_STATE_INIT) {
        PyErr_SetString(PyExc_RuntimeError, __Pyx_NON_INIT_CORO_MSG);
        return NULL;
    }
    if (o->agt_state == __PYX_AWAITABLE_STATE_CLOSED) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    retval = __Pyx_Coroutine_Throw((PyObject*)o->agt_gen, args);
    if (o->agt_args) {
        return __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
    } else {
        if (retval && __pyx__PyAsyncGenWrappedValue_CheckExact(retval)) {
            Py_DECREF(retval);
            PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_IGNORED_EXIT_MSG);
            return NULL;
        }
        return retval;
    }
}
static PyObject *
__Pyx_async_gen_athrow_iternext(__pyx_PyAsyncGenAThrow *o)
{
    return __Pyx_async_gen_athrow_send(o, Py_None);
}
static PyObject *
__Pyx_async_gen_athrow_close(PyObject *g, CYTHON_UNUSED PyObject *args)
{
    __pyx_PyAsyncGenAThrow *o = (__pyx_PyAsyncGenAThrow*) g;
    o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
    Py_RETURN_NONE;
}
static PyMethodDef __Pyx_async_gen_athrow_methods[] = {
    {"send", (PyCFunction)__Pyx_async_gen_athrow_send, METH_O, __Pyx_async_gen_send_doc},
    {"throw", (PyCFunction)__Pyx_async_gen_athrow_throw, METH_VARARGS, __Pyx_async_gen_throw_doc},
    {"close", (PyCFunction)__Pyx_async_gen_athrow_close, METH_NOARGS, __Pyx_async_gen_close_doc},
    {"__await__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_gen_await_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_athrow_as_async = {
    PyObject_SelfIter,
    0,
    0
};
#endif
static PyTypeObject __pyx__PyAsyncGenAThrowType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_athrow",
    sizeof(__pyx_PyAsyncGenAThrow),
    0,
    (destructor)__Pyx_async_gen_athrow_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_athrow_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_athrow_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    0,
    PyObject_SelfIter,
    (iternextfunc)__Pyx_async_gen_athrow_iternext,
    __Pyx_async_gen_athrow_methods,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static PyObject *
__Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *gen, PyObject *args)
{
    __pyx_PyAsyncGenAThrow *o;
    o = PyObject_GC_New(__pyx_PyAsyncGenAThrow, __pyx__PyAsyncGenAThrowType);
    if (o == NULL) {
        return NULL;
    }
    o->agt_gen = gen;
    o->agt_args = args;
    o->agt_state = __PYX_AWAITABLE_STATE_INIT;
    Py_INCREF(gen);
    Py_XINCREF(args);
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static int __pyx_AsyncGen_init(void) {
    __pyx_AsyncGenType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenWrappedValueType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenAThrowType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenASendType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_AsyncGenType = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);
    if (unlikely(!__pyx_AsyncGenType))
        return -1;
    __pyx__PyAsyncGenAThrowType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenAThrowType_type);
    if (unlikely(!__pyx__PyAsyncGenAThrowType))
        return -1;
    __pyx__PyAsyncGenWrappedValueType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenWrappedValueType_type);
    if (unlikely(!__pyx__PyAsyncGenWrappedValueType))
        return -1;
    __pyx__PyAsyncGenASendType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenASendType_type);
    if (unlikely(!__pyx__PyAsyncGenASendType))
        return -1;
    return 0;
}

/* AsyncGen */


/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
